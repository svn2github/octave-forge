md5="3b4386b096c8872453aa2f0cdd73515c";rev="4142";by="Jorge Barros de Abreu <ficmatin01 at skipthis solar dot com dot br>"
-*- texinfo -*-
@deftypefn {Fun@value{cedilha}@~ao Carreg@'avel} {[@var{l}, @var{u}] =} splu (@var{a})
@deftypefnx {Fun@value{cedilha}@~ao Carreg@'avel} {[@var{l}, @var{u}, @var{P}] =} splu (@var{a})
@deftypefnx {Fun@value{cedilha}@~ao Carreg@'avel} {[@var{l}, @var{u}, @var{P}, @var{Q}] =} splu (@var{a})
@deftypefnx {Fun@value{cedilha}@~ao Carreg@'avel} {[@var{l}, @var{u}, @var{P}, @var{Q}] =} splu (@dots{}, @var{thres})
@deftypefnx {Fun@value{cedilha}@~ao Carreg@'avel} {[@var{l}, @var{u}, @var{P}] =} splu (@dots{}, @var{Q})
@cindex LU decomposition
Calcula a decomposi@,{c}@~ao LU ( matrizes triangulares alta e baixa) da matriz esparsa @var{a}, usando
subrotinas de UMFPACK.  O resultado @'e retornado em uma forma
permutada, conforme os valores de retorno opcionais @var{P} e @var{Q}.

Chamada com dois ou tr@^es argumentos de sa@'ida e um argumento de entrada simples,
@dfn{splu} @'e um substituto para @dfn{lu}, e portanto a esparsidade
preservando permuta@,{c}@~oes de coluna @var{Q} n@~ao @'e executada. Chamada com
um quarto argumento de sa@'ida, a preserva@,{c}@~ao da esparsidade de transforma@,{c}@~oes de coluna
@var{Q} @'e retornada, tal que @code{@var{P} * @var{a} * @var{Q} =
@var{l} * @var{u}}.

Um  argumentos adicional de entrada @var{limite}, que define o limite de
pivotagem pode ser fornecido. Alternativamente, a preserva@,{c}@~ao de coluna @var{Q} 
preservando a esparsidade pode ser passado. Note que @var{Q} @'e assumido
ser fixo se se tr@^es for menos que quatro argumentos de sa@'ida. De outra forma,
as permuta@,{c}@~oes de coluna atualizadas s@~ao retornadas como o quarto argumento.

Com dois argumentos de sa@'ida, retorna as formas permutadas das matrizes
triangulares alta e baixa, tal que @code{@var{a} = @var{l} * @var{u}}.
Com dois ou tr@^es argumentos de sa@'ida, se um @var{Q} definido pelo usu@'ario for dado,
ent@~ao @code{@var{u} * @var{Q}'} @'e retornado. N@~ao @'e obrigat@'orio que a matriz
seja quadrada.
@seealso{sparse, spinv, colamd, symamd}
@end deftypefn
