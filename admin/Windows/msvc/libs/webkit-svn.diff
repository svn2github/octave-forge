Index: JavaScriptCore/GNUmakefile.am
===================================================================
--- JavaScriptCore/GNUmakefile.am	(revision 37092)
+++ JavaScriptCore/GNUmakefile.am	(working copy)
@@ -384,7 +384,7 @@
 	$(PERL) $^ > $@
 
 JavaScriptCore/kjs/%.lut.h: $(CREATE_HASH_TABLE) $(srcdir)/JavaScriptCore/kjs/%.cpp
-	$^ -i > $@
+	$(PERL) $^ -i > $@
 
 JavaScriptCore/pcre/chartables.c: $(srcdir)/JavaScriptCore/pcre/dftables
 	$^ $@
@@ -407,7 +407,7 @@
 	JavaScriptCore/API/tests/NodeList.h \
 	JavaScriptCore/API/tests/minidom.c
 
-Programs_minidom_CPPFLAGS = \
+Programs_minidom_CPPFLAGS = -DJS_INTERNAL \
 	$(global_cppflags) \
 	$(javascriptcore_cppflags)
 
@@ -418,15 +418,13 @@
 	$(GLOBALDEPS_CFLAGS)
 
 Programs_minidom_LDADD = \
-	 libJavaScriptCore.la \
-	 -lm \
-	 -lstdc++
+	 libJavaScriptCore.la
 
 # jsc
 Programs_jsc_SOURCES = \
 	JavaScriptCore/kjs/Shell.cpp
 
-Programs_jsc_CPPFLAGS = \
+Programs_jsc_CPPFLAGS = -DJS_INTERNAL \
 	$(global_cppflags) \
 	$(javascriptcore_cppflags)
 
@@ -455,6 +453,12 @@
 	JavaScriptCore/kjs/grammar.y \
 	JavaScriptCore/kjs/keywords.table
 
+if !TARGET_WIN32
+Programs_minidom_LDADD += \
+	-lm \
+	-lstdc++
+endif
+
 # Clean rules for JavaScriptCore
 CLEANFILES += \
 	JavaScriptCore/kjs/ArrayPrototype.lut.h \
Index: JavaScriptCore/kjs/config.h
===================================================================
--- JavaScriptCore/kjs/config.h	(revision 37092)
+++ JavaScriptCore/kjs/config.h	(working copy)
@@ -64,3 +64,4 @@
 #include <wtf/DisallowCType.h>
 #endif
 
+typedef int pid_t;
Index: JavaScriptCore/API/JSBase.h
===================================================================
--- JavaScriptCore/API/JSBase.h	(revision 37092)
+++ JavaScriptCore/API/JSBase.h	(working copy)
@@ -72,7 +72,11 @@
      * TODO: Export symbols with JS_EXPORT when using MSVC.
      * See http://bugs.webkit.org/show_bug.cgi?id=16227
      */
-    #define JS_EXPORT
+    #if defined(JS_INTERNAL)
+        #define JS_EXPORT __declspec(dllexport)
+    #else
+        #define JS_EXPORT __declspec(dllimport)
+    #endif
 #else
     #define JS_EXPORT
 #endif
Index: JavaScriptCore/API/tests/JSNodeList.c
===================================================================
--- JavaScriptCore/API/tests/JSNodeList.c	(revision 37092)
+++ JavaScriptCore/API/tests/JSNodeList.c	(working copy)
@@ -36,8 +36,9 @@
 
     if (argumentCount > 0) {
         NodeList* nodeList = JSObjectGetPrivate(thisObject);
+	Node* node;
         ASSERT(nodeList);
-        Node* node = NodeList_item(nodeList, (unsigned)JSValueToNumber(context, arguments[0], exception));
+        node = NodeList_item(nodeList, (unsigned)JSValueToNumber(context, arguments[0], exception));
         if (node)
             return JSNode_new(context, node);
     }
@@ -52,10 +53,12 @@
 
 static JSValueRef JSNodeList_length(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
 {
+    NodeList* nodeList;
+
     UNUSED_PARAM(propertyName);
     UNUSED_PARAM(exception);
     
-    NodeList* nodeList = JSObjectGetPrivate(thisObject);
+    nodeList = JSObjectGetPrivate(thisObject);
     ASSERT(nodeList);
     return JSValueMakeNumber(context, NodeList_length(nodeList));
 }
@@ -68,9 +71,12 @@
 static JSValueRef JSNodeList_getProperty(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
 {
     NodeList* nodeList = JSObjectGetPrivate(thisObject);
+    double index;
+    unsigned uindex;
+
     ASSERT(nodeList);
-    double index = JSValueToNumber(context, JSValueMakeString(context, propertyName), exception);
-    unsigned uindex = (unsigned)index;
+    index = JSValueToNumber(context, JSValueMakeString(context, propertyName), exception);
+    uindex = (unsigned)index;
     if (uindex == index) { /* false for NaN */
         Node* node = NodeList_item(nodeList, uindex);
         if (node)
@@ -82,9 +88,11 @@
 
 static void JSNodeList_initialize(JSContextRef context, JSObjectRef thisObject)
 {
+    NodeList* nodeList;
+
     UNUSED_PARAM(context);
 
-    NodeList* nodeList = JSObjectGetPrivate(thisObject);
+    nodeList = JSObjectGetPrivate(thisObject);
     ASSERT(nodeList);
     
     NodeList_ref(nodeList);
@@ -100,9 +108,10 @@
 
 static JSClassRef JSNodeList_class(JSContextRef context)
 {
+    static JSClassRef jsClass;
+
     UNUSED_PARAM(context);
 
-    static JSClassRef jsClass;
     if (!jsClass) {
         JSClassDefinition definition = kJSClassDefinitionEmpty;
         definition.staticValues = JSNodeList_staticValues;
Index: JavaScriptCore/API/tests/NodeList.c
===================================================================
--- JavaScriptCore/API/tests/NodeList.c	(revision 37092)
+++ JavaScriptCore/API/tests/NodeList.c	(working copy)
@@ -29,9 +29,11 @@
 
 extern NodeList* NodeList_new(Node* parentNode)
 {
+    NodeList* nodeList;
+
     Node_ref(parentNode);
 
-    NodeList* nodeList = (NodeList*)malloc(sizeof(NodeList));
+    nodeList = (NodeList*)malloc(sizeof(NodeList));
     nodeList->parentNode = parentNode;
     nodeList->refCount = 0;
     return nodeList;
@@ -53,13 +55,17 @@
 extern Node* NodeList_item(NodeList* nodeList, unsigned index)
 {
     unsigned length = NodeList_length(nodeList);
+    NodeLink* n;
+    unsigned i;
+    unsigned count;
+
     if (index >= length)
         return NULL;
 
     /* Linear search from tail -- good enough for our purposes here */
-    NodeLink* n = nodeList->parentNode->childNodesTail;
-    unsigned i = 0;
-    unsigned count = length - 1 - index;
+    n = nodeList->parentNode->childNodesTail;
+    i = 0;
+    count = length - 1 - index;
     while (i < count) {
         ++i;
         n = n->prev;
Index: JavaScriptCore/API/tests/JSNode.c
===================================================================
--- JavaScriptCore/API/tests/JSNode.c	(revision 37092)
+++ JavaScriptCore/API/tests/JSNode.c	(working copy)
@@ -105,10 +105,12 @@
 
 static JSValueRef JSNode_getNodeType(JSContextRef context, JSObjectRef object, JSStringRef propertyName, JSValueRef* exception)
 {
+    Node* node;
+
     UNUSED_PARAM(propertyName);
     UNUSED_PARAM(exception);
 
-    Node* node = JSObjectGetPrivate(object);
+    node = JSObjectGetPrivate(object);
     if (node) {
         JSStringRef nodeType = JSStringCreateWithUTF8CString(node->nodeType);
         JSValueRef value = JSValueMakeString(context, nodeType);
@@ -121,10 +123,12 @@
 
 static JSValueRef JSNode_getChildNodes(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
 {
+    Node* node;
+
     UNUSED_PARAM(propertyName);
     UNUSED_PARAM(exception);
 
-    Node* node = JSObjectGetPrivate(thisObject);
+    node = JSObjectGetPrivate(thisObject);
     ASSERT(node);
     return JSNodeList_new(context, NodeList_new(node));
 }
@@ -147,9 +151,11 @@
 
 static void JSNode_initialize(JSContextRef context, JSObjectRef object)
 {
+    Node* node;
+
     UNUSED_PARAM(context);
 
-    Node* node = JSObjectGetPrivate(object);
+    node = JSObjectGetPrivate(object);
     ASSERT(node);
 
     Node_ref(node);
@@ -165,9 +171,10 @@
 
 JSClassRef JSNode_class(JSContextRef context)
 {
+    static JSClassRef jsClass;
+
     UNUSED_PARAM(context);
 
-    static JSClassRef jsClass;
     if (!jsClass) {
         JSClassDefinition definition = kJSClassDefinitionEmpty;
         definition.staticValues = JSNode_staticValues;
Index: JavaScriptCore/API/tests/Node.c
===================================================================
--- JavaScriptCore/API/tests/Node.c	(revision 37092)
+++ JavaScriptCore/API/tests/Node.c	(working copy)
@@ -39,8 +39,10 @@
 
 void Node_appendChild(Node* node, Node* child)
 {
+    NodeLink* nodeLink;
+
     Node_ref(child);
-    NodeLink* nodeLink = (NodeLink*)malloc(sizeof(NodeLink));
+    nodeLink = (NodeLink*)malloc(sizeof(NodeLink));
     nodeLink->node = child;
     nodeLink->prev = node->childNodesTail;
     node->childNodesTail = nodeLink;
Index: JavaScriptCore/API/tests/minidom.c
===================================================================
--- JavaScriptCore/API/tests/minidom.c	(revision 37092)
+++ JavaScriptCore/API/tests/minidom.c	(working copy)
@@ -38,33 +38,45 @@
 
 int main(int argc, char* argv[])
 {
+    JSGlobalContextRef context;
+    JSObjectRef globalObject;
+    JSStringRef printIString;
+    JSStringRef node;
+    char* scriptUTF8;
+    JSStringRef script;
+    JSValueRef exception;
+    JSValueRef result;
+
     const char *scriptPath = "minidom.js";
     if (argc > 1) {
         scriptPath = argv[1];
     }
     
-    JSGlobalContextRef context = JSGlobalContextCreateInGroup(NULL, NULL);
-    JSObjectRef globalObject = JSContextGetGlobalObject(context);
+    context = JSGlobalContextCreateInGroup(NULL, NULL);
+    globalObject = JSContextGetGlobalObject(context);
     
-    JSStringRef printIString = JSStringCreateWithUTF8CString("print");
+    printIString = JSStringCreateWithUTF8CString("print");
     JSObjectSetProperty(context, globalObject, printIString, JSObjectMakeFunctionWithCallback(context, printIString, print), kJSPropertyAttributeNone, NULL);
     JSStringRelease(printIString);
     
-    JSStringRef node = JSStringCreateWithUTF8CString("Node");
+    node = JSStringCreateWithUTF8CString("Node");
     JSObjectSetProperty(context, globalObject, node, JSObjectMakeConstructor(context, JSNode_class(context), JSNode_construct), kJSPropertyAttributeNone, NULL);
     JSStringRelease(node);
     
-    char* scriptUTF8 = createStringWithContentsOfFile(scriptPath);
-    JSStringRef script = JSStringCreateWithUTF8CString(scriptUTF8);
-    JSValueRef exception;
-    JSValueRef result = JSEvaluateScript(context, script, NULL, NULL, 1, &exception);
+    scriptUTF8 = createStringWithContentsOfFile(scriptPath);
+    script = JSStringCreateWithUTF8CString(scriptUTF8);
+    result = JSEvaluateScript(context, script, NULL, NULL, 1, &exception);
     if (result)
         printf("PASS: Test script executed successfully.\n");
     else {
+	JSStringRef exceptionIString;
+	size_t exceptionUTF8Size;
+	char* exceptionUTF8;
+
         printf("FAIL: Test script threw exception:\n");
-        JSStringRef exceptionIString = JSValueToStringCopy(context, exception, NULL);
-        size_t exceptionUTF8Size = JSStringGetMaximumUTF8CStringSize(exceptionIString);
-        char* exceptionUTF8 = (char*)malloc(exceptionUTF8Size);
+        exceptionIString = JSValueToStringCopy(context, exception, NULL);
+        exceptionUTF8Size = JSStringGetMaximumUTF8CStringSize(exceptionIString);
+        exceptionUTF8 = (char*)malloc(exceptionUTF8Size);
         JSStringGetUTF8CString(exceptionIString, exceptionUTF8, exceptionUTF8Size);
         printf("%s\n", exceptionUTF8);
         free(exceptionUTF8);
@@ -87,9 +99,10 @@
     if (argumentCount > 0) {
         JSStringRef string = JSValueToStringCopy(context, arguments[0], exception);
         size_t numChars = JSStringGetMaximumUTF8CStringSize(string);
-        char stringUTF8[numChars];
+        char* stringUTF8 = malloc(sizeof(char)*numChars);
         JSStringGetUTF8CString(string, stringUTF8, numChars);
         printf("%s\n", stringUTF8);
+	free(stringUTF8);
     }
     
     return JSValueMakeUndefined(context);
@@ -98,12 +111,13 @@
 static char* createStringWithContentsOfFile(const char* fileName)
 {
     char* buffer;
+    FILE* f;
     
     size_t buffer_size = 0;
     size_t buffer_capacity = 1024;
     buffer = (char*)malloc(buffer_capacity);
     
-    FILE* f = fopen(fileName, "r");
+    f = fopen(fileName, "r");
     if (!f) {
         fprintf(stderr, "Could not open file: %s\n", fileName);
         return 0;
Index: JavaScriptCore/VM/Machine.cpp
===================================================================
--- JavaScriptCore/VM/Machine.cpp	(revision 37092)
+++ JavaScriptCore/VM/Machine.cpp	(working copy)
@@ -2563,13 +2563,14 @@
                         r[dst] = baseObject->getDirectOffset(offset);
 
                         vPC += 8;
-                        NEXT_OPCODE;
+                        goto op_get_by_id_chain_end;
                     }
                 }
             }
         }
 
         uncacheGetByID(codeBlock(r), vPC);
+op_get_by_id_chain_end:
         NEXT_OPCODE;
     }
     BEGIN_OPCODE(op_get_by_id_generic) {
@@ -2687,7 +2688,7 @@
                 while (!proto->isNull()) {
                     if (UNLIKELY(proto->structureID() != (*it).get())) {
                         uncachePutByID(codeBlock(r), vPC);
-                        NEXT_OPCODE;
+                        goto op_put_by_id_transition_end;
                     }
                     ++it;
                     proto = static_cast<JSObject*>(proto->structureID()->prototypeForLookup(exec));
@@ -2708,6 +2709,7 @@
         }
         
         uncachePutByID(codeBlock(r), vPC);
+op_put_by_id_transition_end:
         NEXT_OPCODE;
     }
     BEGIN_OPCODE(op_put_by_id_replace) {
Index: GNUmakefile.am
===================================================================
--- GNUmakefile.am	(revision 37061)
+++ GNUmakefile.am	(working copy)
@@ -99,6 +99,7 @@
 javascriptcore_built_sources :=
 javascriptcore_built_nosources :=
 javascriptcore_dist :=
+javascriptcore_libadd :=
 
 javascriptcore_cppflags += \
 	-I$(srcdir)/JavaScriptCore \
@@ -124,6 +125,7 @@
 libJavaScriptCore_la_LIBADD = \
 	$(UNICODE_LIBS) \
 	$(GLOBALDEPS_LIBS) \
+	$(javascriptcore_libadd) \
 	-lpthread
 
 libJavaScriptCore_la_CXXFLAGS = \
@@ -137,7 +139,7 @@
 	$(GLOBALDEPS_CFLAGS) \
 	$(UNICODE_CFLAGS)
 
-libJavaScriptCore_la_CPPFLAGS = \
+libJavaScriptCore_la_CPPFLAGS = -DJS_INTERNAL \
 	$(global_cppflags) \
 	$(javascriptcore_cppflags)
 
@@ -183,7 +185,7 @@
 	$(COVERAGE_CFLAGS) \
 	$(HILDON_CFLAGS)
 
-libWebCore_la_CPPFLAGS = \
+libWebCore_la_CPPFLAGS = -DJS_INTERNAL \
 	$(global_cppflags) \
 	$(webcore_cppflags) \
 	$(javascriptcore_cppflags) \
@@ -217,6 +219,7 @@
 webkitgtk_built_sources :=
 webkitgtk_built_nosources :=
 webkitgtk_cleanfiles :=
+webkitgtk_libadd :=
 
 nodist_libwebkit_1_0_la_SOURCES = \
 	$(webkitgtk_built_sources)
@@ -235,7 +238,7 @@
 libwebkit_1_0_la_CFLAGS = \
 	$(libWebCore_la_CFLAGS)
 
-libwebkit_1_0_la_CPPFLAGS = \
+libwebkit_1_0_la_CPPFLAGS = -DJS_INTERNAL \
 	$(libWebCore_la_CPPFLAGS) \
 	$(webkitgtk_cppflags)
 
@@ -246,6 +249,7 @@
 	$(no_undefined)
 
 libwebkit_1_0_la_LIBADD = \
+	$(webkitgtk_libadd) \
 	libWebCore.la
 
 #
@@ -297,6 +301,11 @@
 webcore_libadd += -lgstinterfaces-0.10 -lgstvideo-0.10
 endif
 
+if TARGET_WIN32
+javascriptcore_libadd += -lwinmm
+webkitgtk_libadd += -lshlwapi
+endif
+
 webkitgtk_h_api += \
 	WebKit/gtk/webkit/webkit.h \
 	WebKit/gtk/webkit/webkitdefines.h \
Index: WebKit/gtk/WebCoreSupport/EditorClientGtk.cpp
===================================================================
--- WebKit/gtk/WebCoreSupport/EditorClientGtk.cpp	(revision 37092)
+++ WebKit/gtk/WebCoreSupport/EditorClientGtk.cpp	(working copy)
@@ -18,6 +18,7 @@
  */
 
 #include "config.h"
+#include "KeyboardCodes.h"
 #include "EditorClientGtk.h"
 
 #include "CString.h"
Index: WebCore/GNUmakefile.am
===================================================================
--- WebCore/GNUmakefile.am	(revision 37092)
+++ WebCore/GNUmakefile.am	(working copy)
@@ -1976,7 +1976,12 @@
 	WebCore/plugins/gtk/xembed.h
 endif
 
+if TARGET_WIN32
 webcoregtk_sources += \
+	WebCore/plugins/win/PluginDatabaseWin.cpp
+endif
+
+webcoregtk_sources += \
 	WebCore/page/gtk/AXObjectCacheAtk.cpp \
 	WebCore/page/gtk/AccessibilityObjectAtk.cpp \
 	WebCore/page/gtk/AccessibilityObjectWrapperAtk.cpp \
@@ -3484,7 +3489,7 @@
 
 # lookup tables for old-style JavaScript bindings
 %.lut.h: %.cpp $(CREATE_HASH_TABLE)
-	$(CREATE_HASH_TABLE) $< -n WebCore > $@
+	$(PERL) $(CREATE_HASH_TABLE) $< -n WebCore > $@
 
 # HTML tag and attribute names
 DerivedSources/HTMLNames.h: DerivedSources/HTMLNames.cpp;
Index: WebCore/platform/gtk/FileSystemGtk.cpp
===================================================================
--- WebCore/platform/gtk/FileSystemGtk.cpp	(revision 37092)
+++ WebCore/platform/gtk/FileSystemGtk.cpp	(working copy)
@@ -120,7 +120,7 @@
     if (!filename)
         return false;
 
-    gint result = g_mkdir_with_parents(filename, S_IRWXU);
+    gint result = g_mkdir_with_parents(filename, 0700);
     g_free(filename);
 
     return result == 0;
Index: WebCore/platform/gtk/PasteboardGtk.cpp
===================================================================
--- WebCore/platform/gtk/PasteboardGtk.cpp	(revision 37092)
+++ WebCore/platform/gtk/PasteboardGtk.cpp	(working copy)
@@ -29,6 +29,7 @@
 #include "RenderImage.h"
 #include "KURL.h"
 #include "markup.h"
+#include "Range.h"
 
 #include <gtk/gtk.h>
 
Index: WebCore/platform/gtk/KeyEventGtk.cpp
===================================================================
--- WebCore/platform/gtk/KeyEventGtk.cpp	(revision 37092)
+++ WebCore/platform/gtk/KeyEventGtk.cpp	(working copy)
@@ -28,9 +28,9 @@
  */
 
 #include "config.h"
+#include "KeyboardCodes.h"
 #include "PlatformKeyboardEvent.h"
 
-#include "KeyboardCodes.h"
 #include "NotImplemented.h"
 #include "TextEncoding.h"
 
Index: WebCore/bindings/scripts/IDLParser.pm
===================================================================
--- WebCore/bindings/scripts/IDLParser.pm	(revision 37092)
+++ WebCore/bindings/scripts/IDLParser.pm	(working copy)
@@ -64,7 +64,7 @@
     my $preprocessor = shift;
 
     if (!$preprocessor) {
-        $preprocessor = "/usr/bin/gcc -E -P -x c++";
+        $preprocessor = "gcc -E -P -x c++";
     }
 
     if (!$defines) {
Index: WebCore/bindings/scripts/InFilesParser.pm
===================================================================
--- WebCore/bindings/scripts/InFilesParser.pm	(revision 37092)
+++ WebCore/bindings/scripts/InFilesParser.pm	(working copy)
@@ -87,7 +87,7 @@
     foreach (<$fileStream>) {
         # Empty line, change from common parameter part
         # to per tag part if we have started parsing.
-        if (/^$/) {
+        if (/^\s*$/) {
             if ($hasStartedParsing) {
                 $isParsingCommonParameters = 0;
             }
Index: WebCore/dom/make_names.pl
===================================================================
--- WebCore/dom/make_names.pl	(revision 37092)
+++ WebCore/dom/make_names.pl	(working copy)
@@ -42,7 +42,7 @@
 my %attrs = ();
 my %parameters = ();
 my $extraDefines = 0;
-my $preprocessor = "/usr/bin/gcc -E -P -x c++";
+my $preprocessor = "gcc -E -P -x c++";
 my %svgCustomMappings = ();
 my %htmlCustomMappings = ();
 
Index: WebCore/plugins/PluginView.h
===================================================================
--- WebCore/plugins/PluginView.h	(revision 37092)
+++ WebCore/plugins/PluginView.h	(working copy)
@@ -63,7 +63,7 @@
     class KeyboardEvent;
     class MouseEvent;
     class KURL;
-#if PLATFORM(WIN_OS) && !PLATFORM(WX) && ENABLE(NETSCAPE_PLUGIN_API)
+#if PLATFORM(WIN_OS) && !PLATFORM(WX) && !PLATFORM(GTK) && ENABLE(NETSCAPE_PLUGIN_API)
     class PluginMessageThrottlerWin;
 #endif
     class PluginPackage;
@@ -157,7 +157,7 @@
 
         virtual bool isPluginView() const { return true; }
 
-#if PLATFORM(WIN_OS) && !PLATFORM(WX) && ENABLE(NETSCAPE_PLUGIN_API)
+#if PLATFORM(WIN_OS) && !PLATFORM(WX) && !PLATFORM(GTK) && ENABLE(NETSCAPE_PLUGIN_API)
         static LRESULT CALLBACK PluginViewWndProc(HWND, UINT, WPARAM, LPARAM);
         LRESULT wndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);
         WNDPROC pluginWndProc() const { return m_pluginWndProc; }
@@ -247,7 +247,7 @@
         bool m_needsXEmbed;
 #endif
 
-#if PLATFORM(WIN_OS) && !PLATFORM(WX) && ENABLE(NETSCAPE_PLUGIN_API)
+#if PLATFORM(WIN_OS) && !PLATFORM(WX) && !PLATFORM(GTK) && ENABLE(NETSCAPE_PLUGIN_API)
         OwnPtr<PluginMessageThrottlerWin> m_messageThrottler;
         WNDPROC m_pluginWndProc;
         unsigned m_lastMessage;
Index: WebCore/plugins/gtk/PluginViewGtk.cpp
===================================================================
--- WebCore/plugins/gtk/PluginViewGtk.cpp	(revision 37092)
+++ WebCore/plugins/gtk/PluginViewGtk.cpp	(working copy)
@@ -442,7 +442,7 @@
             *((XID *)w) = GDK_WINDOW_XWINDOW(containingWindow()->window);
 #endif
 #ifdef GDK_WINDOWING_WIN32
-            *((HWND *)w) = GDK_WINDOWING_HWND(containingWindow()->window);
+            *((HWND *)w) = (HWND)GDK_WINDOW_HWND(containingWindow()->window);
 #endif
             return NPERR_NO_ERROR;
         }
Index: WebCore/plugins/PluginView.cpp
===================================================================
--- WebCore/plugins/PluginView.cpp	(revision 37092)
+++ WebCore/plugins/PluginView.cpp	(working copy)
@@ -47,7 +47,7 @@
 #include "Page.h"
 #include "FocusController.h"
 #include "PlatformMouseEvent.h"
-#if PLATFORM(WIN_OS) && !PLATFORM(WX) && ENABLE(NETSCAPE_PLUGIN_API)
+#if PLATFORM(WIN_OS) && !PLATFORM(WX) && !PLATFORM(GTK) && ENABLE(NETSCAPE_PLUGIN_API)
 #include "PluginMessageThrottlerWin.h"
 #endif
 #include "PluginPackage.h"
@@ -550,7 +550,7 @@
 #if PLATFORM(QT)
     , m_isNPAPIPlugin(false)
 #endif
-#if PLATFORM(WIN_OS) && !PLATFORM(WX) && ENABLE(NETSCAPE_PLUGIN_API)
+#if PLATFORM(WIN_OS) && !PLATFORM(WX) && !PLATFORM(GTK) && ENABLE(NETSCAPE_PLUGIN_API)
     , m_pluginWndProc(0)
     , m_lastMessage(0)
     , m_isCallingPluginWndProc(false)
Index: WebCore/css/make-css-file-arrays.pl
===================================================================
--- WebCore/css/make-css-file-arrays.pl	(revision 37092)
+++ WebCore/css/make-css-file-arrays.pl	(working copy)
@@ -28,7 +28,7 @@
 GetOptions('preprocessor=s' => \$preprocessor);
 
 if (!$preprocessor) {
-    $preprocessor = "/usr/bin/gcc -E -P -x c++";
+    $preprocessor = "gcc -E -P -x c++";
 }
 
 my $header = $ARGV[0];
Index: WebCore/loader/FTPDirectoryDocument.cpp
===================================================================
--- WebCore/loader/FTPDirectoryDocument.cpp	(revision 37092)
+++ WebCore/loader/FTPDirectoryDocument.cpp	(working copy)
@@ -235,7 +235,7 @@
 }
 
 #define localtime_r(x, y) localTimeQt(x, y)
-#elif PLATFORM(WIN) && !defined(localtime_r)
+#elif (PLATFORM(WIN) || PLATFORM(GTK)) && !defined(localtime_r)
 #define localtime_r(x, y) localtime_s((y), (x))
 #endif
 
Index: WebCore/loader/FTPDirectoryParser.cpp
===================================================================
--- WebCore/loader/FTPDirectoryParser.cpp	(revision 37092)
+++ WebCore/loader/FTPDirectoryParser.cpp	(working copy)
@@ -51,7 +51,7 @@
 }
 
 #define gmtime_r(x, y) gmtimeQt(x, y)
-#elif PLATFORM(WIN) && !defined(gmtime_r)
+#elif (PLATFORM(WIN) || PLATFORM(GTK)) && !defined(gmtime_r)
 #define gmtime_r(x, y) gmtime_s((y), (x))
 #endif
 
Index: WebKitTools/DumpRenderTree/gtk/DumpRenderTree.cpp
===================================================================
--- WebKitTools/DumpRenderTree/gtk/DumpRenderTree.cpp	(revision 37092)
+++ WebKitTools/DumpRenderTree/gtk/DumpRenderTree.cpp	(working copy)
@@ -340,6 +340,7 @@
     };
 
     int option;
+#ifndef _MSC_VER
     while ((option = getopt_long(argc, (char* const*)argv, "", options, NULL)) != -1)
         switch (option) {
             case '?':   // unknown or ambiguous option
@@ -347,6 +348,9 @@
                 exit(1);
                 break;
         }
+#else
+    int optind = 1;
+#endif
 
     GtkWidget* window = gtk_window_new(GTK_WINDOW_POPUP);
     GtkContainer* container = GTK_CONTAINER(gtk_fixed_new());
Index: WebKitTools/GtkLauncher/main.c
===================================================================
--- WebKitTools/GtkLauncher/main.c	(revision 37092)
+++ WebKitTools/GtkLauncher/main.c	(working copy)
@@ -47,10 +47,11 @@
 update_title (GtkWindow* window)
 {
     GString* string = g_string_new (main_title);
+    gchar* title;
     g_string_append (string, " - WebKit Launcher");
     if (load_progress < 100)
         g_string_append_printf (string, " (%d%%)", load_progress);
-    gchar* title = g_string_free (string, FALSE);
+    title = g_string_free (string, FALSE);
     gtk_window_set_title (window, title);
     g_free (title);
 }
@@ -137,11 +138,11 @@
 {
     GtkWidget* toolbar = gtk_toolbar_new ();
 
+    GtkToolItem* item;
+
     gtk_toolbar_set_orientation (GTK_TOOLBAR (toolbar), GTK_ORIENTATION_HORIZONTAL);
     gtk_toolbar_set_style (GTK_TOOLBAR (toolbar), GTK_TOOLBAR_BOTH_HORIZ);
 
-    GtkToolItem* item;
-
     /* the back button */
     item = gtk_tool_button_new_from_stock (GTK_STOCK_GO_BACK);
     g_signal_connect (G_OBJECT (item), "clicked", G_CALLBACK (go_back_cb), NULL);
@@ -182,9 +183,12 @@
 int
 main (int argc, char* argv[])
 {
+    GtkWidget* vbox;
+    gchar* uri;
+
     gtk_init (&argc, &argv);
 
-    GtkWidget* vbox = gtk_vbox_new (FALSE, 0);
+    vbox = gtk_vbox_new (FALSE, 0);
     gtk_box_pack_start (GTK_BOX (vbox), create_toolbar (), FALSE, FALSE, 0);
     gtk_box_pack_start (GTK_BOX (vbox), create_browser (), TRUE, TRUE, 0);
     gtk_box_pack_start (GTK_BOX (vbox), create_statusbar (), FALSE, FALSE, 0);
@@ -192,7 +196,7 @@
     main_window = create_window ();
     gtk_container_add (GTK_CONTAINER (main_window), vbox);
 
-    gchar* uri = (gchar*) (argc > 1 ? argv[1] : "http://www.google.com/");
+    uri = (gchar*) (argc > 1 ? argv[1] : "http://www.google.com/");
     webkit_web_view_open (web_view, uri);
 
     gtk_widget_grab_focus (GTK_WIDGET (web_view));
Index: autogen.sh
===================================================================
--- autogen.sh	(revision 37061)
+++ autogen.sh	(working copy)
@@ -54,4 +54,4 @@
 
 cd $ORIGDIR || exit 1
 
-$srcdir/configure $AUTOGEN_CONFIGURE_ARGS "$@" || exit $?
+#$srcdir/configure $AUTOGEN_CONFIGURE_ARGS "$@" || exit $?
