diff -urN -x '*.exe' -x '*.dll' -x '*.o' -x '*.a' -x '*.bak' -x '*.def' lapack-lite-3.1.1-orig/INSTALL/Makefile lapack-lite-3.1.1/INSTALL/Makefile
--- lapack-lite-3.1.1-orig/INSTALL/Makefile	2007-02-26 19:19:47 +0100
+++ lapack-lite-3.1.1/INSTALL/Makefile	2007-12-08 22:02:24 +0100
@@ -1,5 +1,9 @@
 include ../make.inc
 
+SRCDIR = $(SRCTOP)/INSTALL
+
+vpath %.f $(SRCDIR)
+
 .SUFFIXES : .o .f 
 all:  testlsame testslamch testdlamch testsecond testdsecnd testieee testversion 
 
diff -urN -x '*.exe' -x '*.dll' -x '*.o' -x '*.a' -x '*.bak' -x '*.def' lapack-lite-3.1.1-orig/Makefile lapack-lite-3.1.1/Makefile
--- lapack-lite-3.1.1-orig/Makefile	2007-02-26 19:20:49 +0100
+++ lapack-lite-3.1.1/Makefile	2008-08-21 21:49:38 +0200
@@ -6,7 +6,7 @@
 
 include make.inc
 
-all: lapack_install lib lapack_testing blas_testing
+all: lapack_install lib lapack_testing blas_testing shlib
 
 lib: lapacklib tmglib
 #lib: blaslib lapacklib tmglib
@@ -23,6 +23,15 @@
 lapacklib:	lapack_install
 	( cd SRC; $(MAKE) )
 
+shlib : lapack.dll
+
+lapack.dll : lapack.a
+	$(F77) -shared $(FLDFLAGS) -o lapack.dll $(LIB_DEFFILE) \
+	  -Wl,--out-implib=lapack.dll.a \
+	  -Wl,--output-def=lapack_out.def \
+	  -Wl,--whole-archive lapack.a \
+	  -Wl,--no-whole-archive -lblas
+
 tmglib:
 	( cd TESTING/MATGEN; $(MAKE) )
 
diff -urN -x '*.exe' -x '*.dll' -x '*.o' -x '*.a' -x '*.bak' -x '*.def' lapack-lite-3.1.1-orig/SRC/Makefile lapack-lite-3.1.1/SRC/Makefile
--- lapack-lite-3.1.1-orig/SRC/Makefile	2007-02-26 19:20:07 +0100
+++ lapack-lite-3.1.1/SRC/Makefile	2008-08-21 21:48:01 +0200
@@ -1,5 +1,9 @@
 include ../make.inc
 
+SRCDIR = $(SRCTOP)/SRC
+
+vpath %.f $(SRCDIR)
+
 #######################################################################
 #  This is the makefile to create a library for LAPACK.
 #  The files are organized as follows:
@@ -293,7 +297,21 @@
 ALLOBJ=$(SLASRC) $(DLASRC) $(CLASRC) $(ZLASRC) $(SCLAUX) $(DZLAUX)	\
 	$(ALLAUX)
 
-../$(LAPACKLIB): $(ALLOBJ)
+FSOURCES = $(wildcard $(SRCDIR)/*.f) $(SRCDIR)/../INSTALL/dlamch.f $(SRCDIR)/../INSTALL/slamch.f
+
+ALLDEF=$(patsubst %.o,%.def, $(ALLOBJ))
+
+%.def : %.f
+	@echo "Making $@"
+	@sed -n \
+	     -e 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/' \
+	     -e 's/^\(      \|	\)\(.*function\|subroutine\|entry\)[ 	]*\([^ 	(]*\).*$$/\3_/p' < $< > $@
+
+../$(LIB_DEFFILE): $(ALLDEF)
+	echo "EXPORTS" > $@
+	cat $^ >> $@
+
+../$(LAPACKLIB): $(ALLOBJ) ../$(LIB_DEFFILE)
 	$(ARCH) $(ARCHFLAGS) $@ $(ALLOBJ)
 	$(RANLIB) $@
 
diff -urN -x '*.exe' -x '*.dll' -x '*.o' -x '*.a' -x '*.bak' -x '*.def' lapack-lite-3.1.1-orig/make.inc lapack-lite-3.1.1/make.inc
--- lapack-lite-3.1.1-orig/make.inc	1970-01-01 01:00:00 +0100
+++ lapack-lite-3.1.1/make.inc	2008-08-21 21:48:10 +0200
@@ -0,0 +1,61 @@
+####################################################################
+#  LAPACK make include file.                                       #
+#  LAPACK, Version 3.1.1                                           #
+#  February 2007                                                   #
+####################################################################
+#
+# See the INSTALL/ directory for more examples.
+#
+SHELL = /bin/sh
+#
+#  The machine (platform) identifier to append to the library names
+#
+PLAT = 
+#  
+#  Modify the FORTRAN and OPTS definitions to refer to the
+#  compiler and desired compiler options for your machine.  NOOPT
+#  refers to the compiler options desired when NO OPTIMIZATION is
+#  selected.  Define LOADER and LOADOPTS to refer to the loader and 
+#  desired load options for your machine.
+#
+FORTRAN  = $(F77) 
+OPTS     = -funroll-all-loops -O3
+DRVOPTS  = $(OPTS)
+NOOPT    =
+LOADER   = $(F77)
+LOADOPTS = 
+#
+# Timer for the SECOND and DSECND routines
+#
+# Default : SECOND and DSECND will use a call to the EXTERNAL FUNCTION ETIME
+# TIMER    = EXT_ETIME
+# For RS6K : SECOND and DSECND will use a call to the EXTERNAL FUNCTION ETIME_
+# TIMER    = EXT_ETIME_
+# For gfortran compiler: SECOND and DSECND will use a call to the INTERNAL FUNCTION ETIME
+# TIMER    = INT_ETIME 
+# If your Fortran compiler does not provide etime (like Nag Fortran Compiler, etc...)
+# SECOND and DSECND will use a call to the INTERNAL FUNCTION CPU_TIME 
+TIMER    = INT_CPU_TIME
+# If neither of this works...you can use the NONE value... In that case, SECOND and DSECND will always return 0
+# TIMER     = NONE
+#
+#  The archiver and the flag(s) to use when building archive (library)
+#  If you system has no ranlib, set RANLIB = echo.
+#
+ARCH     = ar
+ARCHFLAGS= cr
+RANLIB   = ranlib
+#
+#  The location of the libraries to which you will link.  (The 
+#  machine-specific, optimized BLAS library should be used whenever
+#  possible.)
+#
+BLASLIB      = -lblas
+LAPACKLIB    = lapack$(PLAT).a
+TMGLIB       = tmglib$(PLAT).a
+EIGSRCLIB    = eigsrc$(PLAT).a
+LINSRCLIB    = linsrc$(PLAT).a
+
+SRCTOP = @SRCDIR@
+
+LIB_DEFFILE = $(patsubst %.a,%.def, $(LAPACKLIB))
