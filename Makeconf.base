## Makeconf is automatically generated from Makeconf.base and Makeconf.add
## in the various subdirectories.  To regenerate, use ./autogen.sh to
## create a new ./Makeconf.in, then use ./configure to generate a new
## Makeconf.

OCTAVE_FORGE = 1

SHELL = @SHELL@

canonical_host_type = @canonical_host_type@
prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
mandir = @mandir@
libdir = @libdir@
datadir = @datadir@
infodir = @infodir@
includedir = @includedir@
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_DATA = @INSTALL_DATA@
INSTALLOCT=octinst.sh

DESTDIR =

RANLIB = @RANLIB@
STRIP = @STRIP@
LN_S = @LN_S@

# Most octave programs will be compiled with $(MKOCTFILE).  Those which
# cannot use mkoctfile directly can request the flags that mkoctfile 
# would use as follows:
#    FLAG = $(shell $(MKOCTFILE) -p FLAG)
# The following flags are for compiling programs that are independent
# of Octave.  How confusing.
CC = @CC@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
CPICFLAG = @CPICFLAG@
CXX = @CXX@
CXXFLAGS = @CXXFLAGS@
CXXPICFLAG = @CXXPICFLAG@
F77 = @F77@
FFLAGS = @FFLAGS@
FPICFLAG = @FPICFLAG@

OCTAVE = @OCTAVE@
OCTAVE_VERSION = @OCTAVE_VERSION@
MKOCTFILE = @MKOCTFILE@ -DHAVE_OCTAVE_$(ver) -v
SHLEXT = @SHLEXT@

ver = @ver@
MPATH = @mpath@
OPATH = @opath@
XPATH = @xpath@
ALTMPATH = @altmpath@
ALTOPATH = @altopath@

MAKEINFO = @MAKEINFO@
TEXI2PDF = @TEXI2PDF@
TEXI2DVI = @TEXI2DVI@
TEXI2HTML = @TEXI2HTML@
DVIPDF = @DVIPDF@
DVIPS = @DVIPS@

MKDOC = @MKDOC@
MKTEXI = @MKTEXI@
TOPDIR = @TOPDIR@

SVN2CL = @SVN2CL@

%.o: %.c ; $(MKOCTFILE) -c $<
%.o: %.f ; $(MKOCTFILE) -c $<
%.o: %.cc ; $(MKOCTFILE) -c $<
%.oct: %.cc ; $(MKOCTFILE) $<

# These are stub rules for the construction of packages

opkg = $(filter-out %/,$(subst /,/ ,$@))
ifeq ($(PKG_FILE),)
# Use the wildcard on INDEX and PKG_ADD as well to allow for their absence
PKG_FILES = COPYING DESCRIPTION $(wildcard ChangeLog) $(wildcard INDEX) \
	$(wildcard PKG_ADD) $(wildcard PKG_DEL) $(wildcard post_install.m) \
	$(wildcard pre_install.m)  $(wildcard on_uninstall.m) \
	$(wildcard inst/*) $(wildcard src/*) \
	$(wildcard doc/*) $(wildcard bin/*)
endif
REAL_PKG_FILES = $(filter-out %/.svn %/.svnignore %~ %/autom4te.cache, $(PKG_FILES))

pkg/%:
	@ver=`grep "Version:" DESCRIPTION | sed -e "s/Version: *//" | \
	  sed -e "s/^[[:space:]]*//" | sed -e "s/[[:space:]]*$$//"`; \
	name=`grep "Name:" DESCRIPTION | sed -e "s/^Name: *//" | \
	  sed -e "s/^[[:space:]]*//" | sed -e "s/[[:space:]]*$$//" | \
	  sed -e 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`; \
	if [ -e "../$(PKGDIR)/$$name-$$ver.tar.gz" ]; then \
	  newer=`find . -type f -newer ../$(PKGDIR)/$$name-$$ver.tar.gz`; \
	  if test "X$${newer}X" != "XX"; then \
	    build="yes"; \
	  else \
	    build="no"; \
	  fi; \
	else \
	  build="yes"; \
	fi; \
	if test "X$${build}X" = "XyesX"; then \
	  mkdir ../$(PKGDIR)/$$name-$$ver; \
	  if [ ! -f ChangeLog ]; then \
	    if test "x$(SVN2CL)" != "x"; then \
	      $(SVN2CL) --file=../$(PKGDIR)/$$name-$$ver/ChangeLog.tmp; \
	      if [ -f ../$(PKGDIR)/$$name-$$ver/ChangeLog.tmp ]; then \
	        echo "# Automatically generated file --- DO NOT EDIT" | \
	        cat - ../$(PKGDIR)/$$name-$$ver/ChangeLog.tmp > \
	        ../$(PKGDIR)/$$name-$$ver/ChangeLog; \
	        rm ../$(PKGDIR)/$$name-$$ver/ChangeLog.tmp; \
	      fi; \
	    fi; \
	  fi; \
	  tar -cf - $(REAL_PKG_FILES) | (cd ../$(PKGDIR)/$$name-$$ver; tar -xf -); \
	  cd ../$(PKGDIR); \
	  cp ../package_configure.in $$name-$$ver/configure; \
	  cp ../package_Makefile.in $$name-$$ver/Makefile; \
	  (cd $$name-$$ver; find . -name .svn -a -type d | xargs rm -fr); \
	  tar -zcf $$name-$$ver.tar.gz $$name-$$ver; \
	  rm -fr $$name-$$ver; \
	fi

pre-pkg::
	@if [ -f src/autogen.sh ]; then \
          cd src; \
          sh ./autogen.sh; \
          cd ..; \
	fi

# By default do nothing post packaging
post-pkg::
	@true

