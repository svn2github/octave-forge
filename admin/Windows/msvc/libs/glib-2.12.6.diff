diff -urN original-libraries/glib-2.12.6/build/win32/dirent/makefile.msc glib-2.12.6/build/win32/dirent/makefile.msc
--- original-libraries/glib-2.12.6/build/win32/dirent/makefile.msc	2004-08-25 18:36:52.000000000 +0200
+++ glib-2.12.6/build/win32/dirent/makefile.msc	2007-02-01 15:52:53.850350100 +0100
@@ -1,6 +1,6 @@
 TOP = ..\..\..\..
 
-!INCLUDE $(TOP)\glib\build\win32\make.msc
+!INCLUDE $(TOP)\glib-2.12.6\build\win32\make.msc
 
 dirent_OBJECTS = dirent.obj wdirent.obj
 
diff -urN original-libraries/glib-2.12.6/build/win32/make.msc glib-2.12.6/build/win32/make.msc
--- original-libraries/glib-2.12.6/build/win32/make.msc	2006-01-31 11:33:56.000000000 +0100
+++ glib-2.12.6/build/win32/make.msc	2007-02-01 16:08:35.267736900 +0100
@@ -14,9 +14,9 @@
 !ELSE
 # Debugging:
 OPTIMIZE = 
-CRUNTIME = -MDd
+CRUNTIME = -MD
 DEBUGINFO = -Zi -DG_ENABLE_DEBUG=1
-LINKDEBUG = /debug /nodefaultlib:msvcrt.lib
+LINKDEBUG = /debug
 !ENDIF
 
 LDFLAGS = /link /machine:ix86 $(LINKDEBUG)
@@ -43,8 +43,10 @@
 ATK_CFLAGS = -I $(ATK)
 ATK_LIBS = $(ATK)\atk\atk-$(ATK_VER).lib
 
-CAIRO_CFLAGS = -I $(CAIRO)\cairo\src -I $(CAIRO)\libpixman\src -I $(CAIRO) $(FONTCONFIG_CFLAGS) $(FREETYPE2_CFLAGS)
-CAIRO_LIBS = $(CAIRO)\cairo\src\libcairo-$(CAIRO_VER).lib
+#CAIRO_CFLAGS = -I $(CAIRO)\cairo\src -I $(CAIRO)\libpixman\src -I $(CAIRO) $(FONTCONFIG_CFLAGS) $(FREETYPE2_CFLAGS)
+#CAIRO_LIBS = $(CAIRO)\cairo\src\libcairo-$(CAIRO_VER).lib
+CAIRO_CFLAGS = -I$(VCLIBS_PREFIX)\include\cairo
+CAIRO_LIBS = cairo.lib
 
 DIRENT_CFLAGS = -I $(GLIB)\build\win32\dirent
 DIRENT_LIBS = $(GLIB)\build\win32\dirent\dirent.lib
@@ -53,7 +55,7 @@
 # built with MSVC, but one can produce an import library even if the
 # DLL was built with gcc.
 
-FREETYPE2_CFLAGS = -I $(FREETYPE2)\include
+FREETYPE2_CFLAGS = -I$(VCLIBS_PREFIX)\include -I$(VCLIBS_PREFIX)\include\freetype2
 FREETYPE2_LIBS = $(FREETYPE2)\obj\freetype-$(FREETYPE2_VER).lib
 
 GDK_PIXBUF_CFLAGS = -I $(GDK_PIXBUF)
@@ -63,7 +65,7 @@
 GIMP_PLUGIN_LIBS = $(GIMP)\libgimp\gimp-$(GIMP_VER).lib $(GIMP)\libgimp\gimpui-$(GIMP_VER).lib
 
 # overide definition to use it as callable path
-GLIB = $(TOP)\glib
+GLIB = $(TOP)\glib-2.12.6
 
 GLIB_CFLAGS = -I $(GLIB) -I $(GLIB)\glib -I $(GLIB)\gmodule $(INTL_CFLAGS)
 GLIB_LIBS = $(GLIB)\glib\glib-$(GLIB_VER).lib $(GLIB)\gmodule\gmodule-$(GLIB_VER).lib $(GLIB)\gobject\gobject-$(GLIB_VER).lib
@@ -91,11 +93,11 @@
 LIBART_CFLAGS = -I$(LIBART)\.. -FIlibart_lgpl/art_config.h
 LIBART_LIBS = $(LIBART)\libart.lib
 
-INTL_CFLAGS = -I $(INTL)
-INTL_LIBS = $(INTL)\intl.lib 
+INTL_CFLAGS =
+INTL_LIBS = intl.lib 
 
-LIBICONV_CFLAGS = -I $(LIBICONV)\include
-LIBICONV_LIBS = $(LIBICONV)\lib\iconv.lib
+LIBICONV_CFLAGS =
+LIBICONV_LIBS = iconv.lib
 
 LIBXML_CFLAGS = -I $(LIBXML)
 LIBXML_LIBS = $(LIBXML)\xml-$(LIBXML_VER).lib
@@ -167,12 +169,12 @@
 	-del *.lib
 	-del *.err
 	-del *.map
-	-del *.sym
 	-del *.exp
 	-del *.lk1
 	-del *.mk1
 	-del *.pdb
 	-del *.ilk
+	-del *.manifest
 
 # Needed by hacker rule to make makefile.msc from makefile.msc.in:
 SED = e:\cygwin\bin\sed
diff -urN original-libraries/glib-2.12.6/build/win32/module.defs glib-2.12.6/build/win32/module.defs
--- original-libraries/glib-2.12.6/build/win32/module.defs	2005-02-06 20:03:44.000000000 +0100
+++ glib-2.12.6/build/win32/module.defs	2007-02-01 16:34:30.990817500 +0100
@@ -106,3 +106,5 @@
 # mingw) are needed by a just a few packages when compiling with gcc.
 # This is just where tml has it installed.
 PLATFORMSDK = i:/src/psdk
+
+VCLIBS_PREFIX = D:\Software\VCLibs
diff -urN original-libraries/glib-2.12.6/glib/glib.def glib-2.12.6/glib/glib.def
--- original-libraries/glib-2.12.6/glib/glib.def	1970-01-01 01:00:00.000000000 +0100
+++ glib-2.12.6/glib/glib.def	2007-01-23 15:22:31.059893300 +0100
@@ -0,0 +1,1405 @@
+EXPORTS 
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+g_array_append_vals
+g_array_free
+g_array_insert_vals
+g_array_new
+g_array_prepend_vals
+g_array_remove_index
+g_array_remove_index_fast
+g_array_remove_range
+g_array_set_size
+g_array_sized_new
+g_array_sort
+g_array_sort_with_data
+g_byte_array_append
+g_byte_array_free
+g_byte_array_new
+g_byte_array_prepend
+g_byte_array_remove_index
+g_byte_array_remove_index_fast
+g_byte_array_remove_range
+g_byte_array_set_size
+g_byte_array_sized_new
+g_byte_array_sort
+g_byte_array_sort_with_data
+g_ptr_array_add
+g_ptr_array_foreach
+g_ptr_array_free
+g_ptr_array_new
+g_ptr_array_remove
+g_ptr_array_remove_fast
+g_ptr_array_remove_index
+g_ptr_array_remove_index_fast
+g_ptr_array_remove_range
+g_ptr_array_set_size
+g_ptr_array_sized_new
+g_ptr_array_sort
+g_ptr_array_sort_with_data
+
+
+
+
+
+g_async_queue_length
+g_async_queue_length_unlocked
+g_async_queue_lock
+g_async_queue_new
+g_async_queue_pop
+g_async_queue_pop_unlocked
+g_async_queue_push
+g_async_queue_push_unlocked
+g_async_queue_push_sorted
+g_async_queue_push_sorted_unlocked
+g_async_queue_ref
+g_async_queue_sort
+g_async_queue_sort_unlocked
+g_async_queue_timed_pop
+g_async_queue_timed_pop_unlocked
+g_async_queue_try_pop
+g_async_queue_try_pop_unlocked
+g_async_queue_unlock
+g_async_queue_unref
+
+g_async_queue_ref_unlocked
+g_async_queue_unref_and_unlock
+
+
+
+
+
+
+g_atomic_int_add
+g_atomic_int_compare_and_exchange
+g_atomic_int_exchange_and_add
+g_atomic_pointer_compare_and_exchange
+
+ 
+g_atomic_int_get
+g_atomic_pointer_get
+g_atomic_int_set
+g_atomic_pointer_set
+
+
+
+
+
+
+g_on_error_query
+g_on_error_stack_trace
+
+
+
+
+
+g_base64_encode_step
+g_base64_encode_close
+g_base64_encode
+g_base64_decode_step
+g_base64_decode
+
+
+
+
+
+g_bookmark_file_error_quark
+g_bookmark_file_new
+g_bookmark_file_free
+g_bookmark_file_load_from_file
+g_bookmark_file_load_from_data
+g_bookmark_file_load_from_data_dirs
+g_bookmark_file_to_data
+g_bookmark_file_to_file
+g_bookmark_file_set_title
+g_bookmark_file_get_title
+g_bookmark_file_set_description
+g_bookmark_file_get_description
+g_bookmark_file_set_mime_type
+g_bookmark_file_get_mime_type
+g_bookmark_file_set_groups
+g_bookmark_file_add_group
+g_bookmark_file_has_group
+g_bookmark_file_get_groups
+g_bookmark_file_add_application
+g_bookmark_file_has_application
+g_bookmark_file_get_applications
+g_bookmark_file_set_app_info
+g_bookmark_file_get_app_info
+g_bookmark_file_set_is_private
+g_bookmark_file_get_is_private
+g_bookmark_file_set_icon
+g_bookmark_file_get_icon
+g_bookmark_file_set_added
+g_bookmark_file_get_added
+g_bookmark_file_set_modified
+g_bookmark_file_get_modified
+g_bookmark_file_set_visited
+g_bookmark_file_get_visited
+g_bookmark_file_has_item
+g_bookmark_file_get_size
+g_bookmark_file_get_uris
+g_bookmark_file_remove_group
+g_bookmark_file_remove_application
+g_bookmark_file_remove_item
+g_bookmark_file_move_item
+
+
+
+
+
+g_cache_destroy
+g_cache_insert
+g_cache_key_foreach
+g_cache_new
+g_cache_remove
+
+g_cache_value_foreach
+
+
+
+
+
+
+g_completion_add_items
+g_completion_clear_items
+g_completion_complete
+g_completion_complete_utf8
+g_completion_free
+g_completion_new
+g_completion_remove_items
+g_completion_set_compare
+
+
+
+
+
+g_get_filename_charsets
+g_convert
+g_convert_error_quark
+g_convert_with_fallback
+g_convert_with_iconv
+g_iconv
+g_iconv_close
+g_iconv_open
+g_locale_from_utf8
+g_locale_to_utf8
+g_filename_display_name
+g_filename_display_basename
+g_filename_from_uri PRIVATE
+g_filename_from_utf8 PRIVATE
+g_filename_to_uri PRIVATE
+g_filename_to_utf8 PRIVATE
+
+g_filename_from_uri_utf8
+g_filename_from_utf8_utf8
+g_filename_to_uri_utf8
+g_filename_to_utf8_utf8
+
+g_uri_list_extract_uris
+
+
+
+
+
+g_datalist_clear
+g_datalist_foreach
+g_datalist_get_flags
+g_datalist_id_get_data
+g_datalist_id_remove_no_notify
+g_datalist_id_set_data_full
+g_datalist_set_flags
+g_datalist_unset_flags
+g_datalist_init
+g_dataset_destroy
+g_dataset_foreach
+g_dataset_id_get_data
+g_dataset_id_remove_no_notify
+g_dataset_id_set_data_full
+
+
+
+
+
+g_quark_from_static_string
+g_quark_from_string
+g_quark_to_string
+g_quark_try_string
+g_intern_string
+g_intern_static_string
+
+
+
+
+
+g_date_add_days
+g_date_add_months
+g_date_add_years
+g_date_clamp
+g_date_clear
+g_date_compare
+g_date_days_between
+g_date_free
+g_date_get_day
+g_date_get_day_of_year
+g_date_get_days_in_month
+g_date_get_iso8601_week_of_year
+g_date_get_julian
+g_date_get_monday_week_of_year
+g_date_get_monday_weeks_in_year
+g_date_get_month
+g_date_get_sunday_week_of_year
+g_date_get_sunday_weeks_in_year
+g_date_get_weekday
+g_date_get_year
+g_date_is_first_of_month
+g_date_is_last_of_month
+g_date_is_leap_year
+g_date_new
+g_date_new_dmy
+g_date_new_julian
+g_date_order
+g_date_set_day
+g_date_set_dmy
+g_date_set_julian
+g_date_set_month
+g_date_set_parse
+
+g_date_set_time
+
+g_date_set_time_t
+g_date_set_time_val
+g_date_set_year
+g_date_strftime
+g_date_subtract_days
+g_date_subtract_months
+g_date_subtract_years
+g_date_to_struct_tm
+g_date_valid
+g_date_valid_day
+g_date_valid_dmy
+g_date_valid_julian
+g_date_valid_month
+g_date_valid_weekday
+g_date_valid_year
+
+
+
+
+
+g_dir_close
+g_dir_open PRIVATE
+g_dir_read_name PRIVATE
+
+g_dir_open_utf8
+g_dir_read_name_utf8
+
+g_dir_rewind
+
+
+
+
+
+g_clear_error
+g_error_copy
+g_error_free
+g_error_matches
+g_error_new
+g_error_new_literal
+g_propagate_error
+g_set_error
+
+
+
+
+
+g_build_filename
+g_build_filenamev
+g_build_path
+g_build_pathv
+g_file_error_from_errno
+g_file_error_quark
+g_file_get_contents PRIVATE
+g_file_set_contents
+g_file_open_tmp PRIVATE
+g_file_test PRIVATE
+g_file_read_link
+g_mkstemp PRIVATE
+g_mkdir_with_parents
+
+g_file_get_contents_utf8
+g_file_open_tmp_utf8
+g_file_test_utf8
+g_mkstemp_utf8
+
+
+
+
+
+
+g_hash_table_destroy
+g_hash_table_unref
+g_hash_table_ref
+g_hash_table_find
+g_hash_table_foreach
+g_hash_table_foreach_remove
+g_hash_table_foreach_steal
+g_hash_table_insert
+g_hash_table_lookup
+g_hash_table_lookup_extended
+g_hash_table_new
+g_hash_table_new_full
+g_hash_table_remove
+g_hash_table_remove_all
+g_hash_table_replace
+g_hash_table_size
+g_hash_table_steal
+g_hash_table_steal_all
+
+
+
+
+
+g_hook_alloc
+g_hook_compare_ids
+g_hook_destroy
+g_hook_destroy_link
+g_hook_find
+g_hook_find_data
+g_hook_find_func
+g_hook_find_func_data
+g_hook_first_valid
+g_hook_free
+g_hook_get
+g_hook_insert_before
+g_hook_insert_sorted
+g_hook_list_clear
+g_hook_list_init
+g_hook_list_invoke
+g_hook_list_invoke_check
+g_hook_list_marshal
+g_hook_list_marshal_check
+g_hook_next_valid
+g_hook_prepend
+g_hook_ref
+g_hook_unref
+
+
+
+
+
+g_io_add_watch
+g_io_add_watch_full
+g_io_create_watch
+g_io_channel_error_from_errno
+g_io_channel_error_quark
+g_io_channel_flush
+g_io_channel_get_buffer_condition
+g_io_channel_get_buffered
+g_io_channel_get_buffer_size
+g_io_channel_get_close_on_unref
+g_io_channel_get_encoding
+g_io_channel_get_flags
+g_io_channel_get_line_term
+g_io_channel_init
+g_io_channel_read_chars
+g_io_channel_read_line
+g_io_channel_read_line_string
+g_io_channel_read_to_end
+g_io_channel_read_unichar
+g_io_channel_ref
+g_io_channel_seek_position
+g_io_channel_set_buffered
+g_io_channel_set_buffer_size
+g_io_channel_set_close_on_unref
+g_io_channel_set_encoding
+g_io_channel_set_flags
+g_io_channel_set_line_term
+g_io_channel_shutdown
+g_io_channel_unref
+
+g_io_channel_close
+g_io_channel_read
+g_io_channel_seek
+g_io_channel_write
+
+g_io_channel_write_chars
+g_io_channel_write_unichar
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+g_io_channel_unix_get_fd
+g_io_channel_unix_new
+g_io_channel_new_file PRIVATE
+g_io_channel_new_file_utf8
+g_io_channel_win32_get_fd
+g_io_channel_win32_make_pollfd
+g_io_channel_win32_new_fd
+g_io_channel_win32_new_messages
+g_io_channel_win32_new_socket
+g_io_channel_win32_new_stream_socket
+g_io_channel_win32_poll
+g_io_channel_win32_set_debug
+
+
+
+
+
+
+g_key_file_error_quark
+g_key_file_free
+g_key_file_get_boolean
+g_key_file_get_boolean_list
+g_key_file_get_comment
+g_key_file_get_groups
+g_key_file_get_double
+g_key_file_get_double_list
+g_key_file_get_integer
+g_key_file_get_integer_list
+g_key_file_get_keys
+g_key_file_get_locale_string
+g_key_file_get_locale_string_list
+g_key_file_get_start_group
+g_key_file_get_string
+g_key_file_get_string_list
+g_key_file_get_value
+g_key_file_has_group
+g_key_file_has_key
+g_key_file_load_from_data
+g_key_file_load_from_data_dirs
+g_key_file_load_from_file
+g_key_file_new
+g_key_file_remove_comment
+g_key_file_remove_group
+g_key_file_remove_key
+g_key_file_set_boolean
+g_key_file_set_boolean_list
+g_key_file_set_comment
+g_key_file_set_double
+g_key_file_set_double_list
+g_key_file_set_integer
+g_key_file_set_integer_list
+g_key_file_set_list_separator
+g_key_file_set_locale_string
+g_key_file_set_locale_string_list
+g_key_file_set_string
+g_key_file_set_string_list
+g_key_file_set_value
+g_key_file_to_data
+
+
+
+
+
+g_list_alloc
+g_list_append
+g_list_concat
+g_list_copy
+g_list_delete_link
+g_list_find
+g_list_find_custom
+g_list_first
+g_list_foreach
+g_list_free
+g_list_free_1
+g_list_index
+g_list_insert
+g_list_insert_before
+g_list_insert_sorted
+g_list_insert_sorted_with_data
+g_list_last
+g_list_length
+g_list_nth
+g_list_nth_data
+g_list_nth_prev
+
+g_list_pop_allocator
+
+g_list_position
+g_list_prepend
+
+g_list_push_allocator
+
+g_list_remove
+g_list_remove_all
+g_list_remove_link
+g_list_reverse
+g_list_sort
+g_list_sort_with_data
+
+
+
+
+
+g_child_watch_add
+g_child_watch_add_full
+g_child_watch_source_new
+g_get_current_time
+g_main_context_acquire
+g_main_context_add_poll
+g_main_context_check
+g_main_context_default
+g_main_context_dispatch
+g_main_context_find_source_by_funcs_user_data
+g_main_context_find_source_by_id
+g_main_context_find_source_by_user_data
+g_main_context_get_poll_func
+g_main_context_is_owner
+g_main_context_iteration
+g_main_context_new
+g_main_context_pending
+g_main_context_prepare
+g_main_context_query
+g_main_context_ref
+g_main_context_release
+g_main_context_remove_poll
+g_main_context_set_poll_func
+g_main_context_unref
+g_main_context_wait
+g_main_context_wakeup
+g_main_depth
+g_main_current_source
+g_main_loop_get_context
+g_main_loop_is_running
+g_main_loop_new
+g_main_loop_quit
+g_main_loop_ref
+g_main_loop_run
+g_main_loop_unref
+g_source_add_poll
+g_source_attach
+g_source_destroy
+g_source_get_can_recurse
+g_source_get_context
+g_source_get_current_time
+g_source_get_id
+g_source_get_priority
+g_source_new
+g_source_ref
+g_source_remove
+g_source_remove_by_funcs_user_data
+g_source_remove_by_user_data
+g_source_remove_poll
+g_source_set_callback
+g_source_set_callback_indirect
+g_source_set_can_recurse
+g_source_set_funcs
+g_source_is_destroyed
+g_source_set_priority
+g_source_unref
+g_idle_add
+g_idle_add_full
+g_idle_remove_by_data
+g_idle_source_new
+g_timeout_add
+g_timeout_add_full
+g_timeout_source_new
+
+
+
+
+
+g_mapped_file_new
+g_mapped_file_get_length
+g_mapped_file_get_contents
+g_mapped_file_free
+
+
+
+
+
+g_markup_error_quark
+g_markup_escape_text
+g_markup_parse_context_end_parse
+g_markup_parse_context_free
+g_markup_parse_context_get_element
+g_markup_parse_context_get_position
+g_markup_parse_context_new
+g_markup_parse_context_parse
+g_markup_printf_escaped
+g_markup_vprintf_escaped
+
+
+
+
+
+g_free
+g_malloc
+g_malloc0
+g_mem_is_system_malloc
+g_mem_profile
+g_mem_set_vtable
+g_realloc
+g_try_malloc
+g_try_malloc0
+g_try_realloc
+
+g_allocator_free
+g_allocator_new
+g_mem_chunk_alloc
+g_mem_chunk_alloc0
+g_mem_chunk_clean
+g_mem_chunk_destroy
+g_mem_chunk_free
+g_mem_chunk_info
+g_mem_chunk_new
+g_mem_chunk_print
+g_mem_chunk_reset
+g_blow_chunks
+
+
+
+
+
+
+g_slice_alloc
+g_slice_alloc0
+g_slice_free1
+g_slice_free_chain_with_offset
+g_slice_set_config
+g_slice_get_config
+g_slice_get_config_state
+
+
+
+
+
+g_printf_string_upper_bound
+g_log
+g_log_default_handler
+g_log_remove_handler
+g_log_set_always_fatal
+g_log_set_default_handler
+g_log_set_fatal_mask
+g_log_set_handler
+g_logv
+g_return_if_fail_warning
+g_assert_warning
+g_print
+g_printerr
+g_set_printerr_handler
+g_set_print_handler
+
+
+
+
+
+g_node_child_index
+g_node_child_position
+g_node_children_foreach
+g_node_copy
+g_node_copy_deep
+g_node_depth
+g_node_destroy
+g_node_find
+g_node_find_child
+g_node_first_sibling
+g_node_get_root
+g_node_insert
+g_node_insert_after
+g_node_insert_before
+g_node_is_ancestor
+g_node_last_child
+g_node_last_sibling
+g_node_max_height
+g_node_n_children
+g_node_new
+g_node_n_nodes
+g_node_nth_child
+
+g_node_pop_allocator
+
+g_node_prepend
+
+g_node_push_allocator
+
+g_node_reverse_children
+g_node_traverse
+g_node_unlink
+
+
+
+
+
+g_option_context_add_group
+g_option_context_add_main_entries
+g_option_error_quark
+g_option_context_free
+g_option_context_get_description
+g_option_context_get_help_enabled
+g_option_context_get_ignore_unknown_options
+g_option_context_get_main_group
+g_option_context_get_summary
+g_option_context_new
+g_option_context_parse
+g_option_context_set_description
+g_option_context_set_help_enabled
+g_option_context_set_ignore_unknown_options
+g_option_context_set_main_group
+g_option_context_set_summary
+g_option_context_set_translate_func
+g_option_context_set_translation_domain
+g_option_group_add_entries
+g_option_group_free
+g_option_group_new
+g_option_group_set_error_hook
+g_option_group_set_parse_hooks
+g_option_group_set_translate_func
+g_option_group_set_translation_domain
+
+
+
+
+
+g_pattern_match
+g_pattern_match_simple
+g_pattern_match_string
+g_pattern_spec_equal
+g_pattern_spec_free
+g_pattern_spec_new
+
+
+
+
+
+g_spaced_primes_closest
+
+
+
+
+
+g_fprintf
+g_printf
+g_sprintf
+g_vasprintf
+g_vfprintf
+g_vprintf
+g_vsprintf
+
+
+
+
+
+g_snprintf
+g_vsnprintf
+
+
+
+
+
+g_qsort_with_data
+
+
+
+
+
+g_queue_copy
+g_queue_delete_link
+g_queue_find
+g_queue_find_custom
+g_queue_foreach
+g_queue_free
+g_queue_get_length
+g_queue_index
+g_queue_insert_after
+g_queue_insert_before
+g_queue_insert_sorted
+g_queue_is_empty
+g_queue_link_index
+g_queue_new
+g_queue_peek_head
+g_queue_peek_head_link
+g_queue_peek_nth
+g_queue_peek_nth_link
+g_queue_peek_tail
+g_queue_peek_tail_link
+g_queue_pop_head
+g_queue_pop_head_link
+g_queue_pop_nth
+g_queue_pop_nth_link
+g_queue_pop_tail
+g_queue_pop_tail_link
+g_queue_push_head
+g_queue_push_head_link
+g_queue_push_nth
+g_queue_push_nth_link
+g_queue_push_tail
+g_queue_push_tail_link
+g_queue_remove
+g_queue_remove_all
+g_queue_reverse
+g_queue_sort
+g_queue_unlink
+
+
+
+
+
+g_rand_copy
+g_rand_double
+g_rand_double_range
+g_rand_free
+g_rand_int
+g_rand_int_range
+g_rand_new
+g_rand_new_with_seed
+g_rand_new_with_seed_array
+g_random_double
+g_random_double_range
+g_random_int
+g_random_int_range
+g_random_set_seed
+g_rand_set_seed
+g_rand_set_seed_array
+
+
+
+
+
+g_relation_count
+g_relation_delete
+g_relation_destroy
+g_relation_exists
+g_relation_index
+g_relation_insert
+g_relation_new
+g_relation_print
+g_relation_select
+g_tuples_destroy
+g_tuples_index
+
+
+
+
+
+g_scanner_cur_line
+g_scanner_cur_position
+g_scanner_cur_token
+g_scanner_cur_value
+g_scanner_destroy
+g_scanner_eof
+g_scanner_error
+g_scanner_get_next_token
+g_scanner_input_file
+g_scanner_input_text
+g_scanner_lookup_symbol
+g_scanner_new
+g_scanner_peek_next_token
+g_scanner_scope_add_symbol
+g_scanner_scope_foreach_symbol
+g_scanner_scope_lookup_symbol
+g_scanner_scope_remove_symbol
+g_scanner_set_scope
+g_scanner_sync_file_offset
+g_scanner_unexp_token
+g_scanner_warn
+
+
+
+
+
+g_shell_error_quark
+g_shell_parse_argv
+g_shell_quote
+g_shell_unquote
+
+
+
+
+
+g_slist_alloc
+g_slist_append
+g_slist_concat
+g_slist_copy
+g_slist_delete_link
+g_slist_find
+g_slist_find_custom
+g_slist_foreach
+g_slist_free
+g_slist_free_1
+g_slist_index
+g_slist_insert
+g_slist_insert_before
+g_slist_insert_sorted
+g_slist_insert_sorted_with_data
+g_slist_last
+g_slist_length
+g_slist_nth
+g_slist_nth_data
+
+g_slist_pop_allocator
+
+g_slist_position
+g_slist_prepend
+
+g_slist_push_allocator
+
+g_slist_remove
+g_slist_remove_all
+g_slist_remove_link
+g_slist_reverse
+g_slist_sort
+g_slist_sort_with_data
+
+
+
+
+
+g_spawn_async PRIVATE
+g_spawn_async_with_pipes PRIVATE
+g_spawn_close_pid
+g_spawn_command_line_async PRIVATE
+g_spawn_command_line_sync PRIVATE
+g_spawn_error_quark
+g_spawn_sync PRIVATE
+
+g_spawn_async_utf8
+g_spawn_async_with_pipes_utf8
+g_spawn_command_line_async_utf8
+g_spawn_command_line_sync_utf8
+g_spawn_sync_utf8
+
+
+
+
+
+
+
+
+g_chmod
+g_open
+g_creat
+g_rename
+g_mkdir
+g_stat
+g_lstat
+g_remove
+g_fopen
+g_freopen
+
+g_access
+g_chdir
+g_unlink
+g_rmdir
+
+
+
+
+
+g_ascii_digit_value
+g_ascii_dtostr
+g_ascii_formatd
+g_ascii_strdown
+g_ascii_strtod
+g_ascii_strtoull
+g_ascii_strtoll
+g_ascii_strup
+g_ascii_tolower
+g_ascii_toupper
+g_ascii_xdigit_value
+g_ascii_strcasecmp
+g_ascii_strncasecmp
+g_memdup
+g_stpcpy
+g_strcanon
+g_strchomp
+g_strchug
+g_strcompress
+g_strconcat
+g_strdelimit
+g_strdup
+g_strdup_printf
+g_strdupv
+g_strdup_vprintf
+g_strerror
+g_strescape
+g_strfreev
+g_str_has_prefix
+g_str_has_suffix
+g_strjoin
+g_strjoinv
+g_strlcat
+g_strlcpy
+g_strndup
+g_strnfill
+g_strreverse
+g_strrstr
+g_strrstr_len
+g_strsignal
+g_strsplit
+g_strsplit_set
+g_strstr_len
+g_strtod
+
+g_strcasecmp
+g_strncasecmp
+g_strup
+g_strdown
+
+g_strv_length
+g_strip_context
+
+
+
+
+
+g_string_append
+g_string_append_len
+g_string_append_printf
+g_string_append_unichar
+g_string_ascii_down
+g_string_ascii_up
+g_string_assign
+g_string_chunk_free
+g_string_chunk_insert
+g_string_chunk_insert_const
+g_string_chunk_insert_len
+g_string_chunk_new
+g_string_equal
+g_string_erase
+g_string_free
+g_string_hash
+g_string_insert
+g_string_insert_c
+g_string_insert_len
+g_string_insert_unichar
+g_string_new
+g_string_new_len
+g_string_prepend
+g_string_prepend_c
+g_string_prepend_len
+g_string_prepend_unichar
+g_string_printf
+g_string_set_size
+g_string_sized_new
+g_string_truncate
+
+g_string_down
+g_string_up
+
+
+ 
+g_string_append_c
+
+g_str_equal
+g_str_hash
+
+
+
+
+
+g_once_impl
+
+g_thread_init_glib
+
+
+g_thread_functions_for_glib_use
+g_threads_got_initialized
+g_thread_use_default_impl
+
+g_thread_create_full
+g_thread_error_quark
+g_thread_exit
+g_thread_join
+g_thread_self
+g_thread_set_priority
+g_static_mutex_free
+g_static_mutex_get_mutex_impl
+g_static_mutex_init
+g_static_private_free
+g_static_private_get
+g_static_private_init
+g_static_private_set
+g_static_rec_mutex_free
+g_static_rec_mutex_init
+g_static_rec_mutex_lock
+g_static_rec_mutex_lock_full
+g_static_rec_mutex_trylock
+g_static_rec_mutex_unlock
+g_static_rec_mutex_unlock_full
+g_static_rw_lock_free
+g_static_rw_lock_init
+g_static_rw_lock_reader_lock
+g_static_rw_lock_reader_trylock
+g_static_rw_lock_reader_unlock
+g_static_rw_lock_writer_lock
+g_static_rw_lock_writer_trylock
+g_static_rw_lock_writer_unlock
+g_thread_foreach
+
+
+
+
+
+g_thread_pool_free
+g_thread_pool_get_max_threads
+g_thread_pool_get_max_unused_threads
+g_thread_pool_get_max_idle_time
+g_thread_pool_get_num_threads
+g_thread_pool_get_num_unused_threads
+g_thread_pool_new
+g_thread_pool_push
+g_thread_pool_set_max_threads
+g_thread_pool_set_max_unused_threads
+g_thread_pool_set_max_idle_time
+g_thread_pool_stop_unused_threads
+g_thread_pool_unprocessed
+g_thread_pool_set_sort_function
+
+
+
+
+
+g_timer_continue
+g_timer_destroy
+g_timer_elapsed
+g_timer_new
+g_timer_reset
+g_timer_start
+g_timer_stop
+g_time_val_add
+g_time_val_from_iso8601
+g_time_val_to_iso8601
+g_usleep
+
+
+
+
+
+g_tree_destroy
+g_tree_foreach
+g_tree_height
+g_tree_insert
+g_tree_lookup
+g_tree_lookup_extended
+g_tree_new
+g_tree_new_full
+g_tree_new_with_data
+g_tree_nnodes
+g_tree_remove
+g_tree_replace
+g_tree_search
+g_tree_steal
+
+g_tree_traverse
+
+
+
+
+
+
+g_unichar_break_type
+
+
+
+
+
+g_utf8_collate
+g_utf8_collate_key
+g_utf8_collate_key_for_filename
+
+
+
+
+
+g_unicode_canonical_decomposition
+g_unicode_canonical_ordering
+g_utf8_normalize
+
+
+
+
+
+g_unichar_isalnum
+g_unichar_isalpha
+g_unichar_iscntrl
+g_unichar_isdefined
+g_unichar_isdigit
+g_unichar_isgraph
+g_unichar_islower
+g_unichar_isprint
+g_unichar_ispunct
+g_unichar_isspace
+g_unichar_istitle
+g_unichar_isupper
+g_unichar_iswide
+g_unichar_iswide_cjk
+g_unichar_isxdigit
+g_unichar_tolower
+g_unichar_totitle
+g_unichar_toupper
+g_unichar_get_mirror_char
+g_unichar_digit_value
+g_unichar_xdigit_value
+g_unichar_type
+g_utf8_casefold
+g_utf8_strup
+g_utf8_strdown
+
+
+
+
+
+g_get_charset
+g_ucs4_to_utf16
+g_ucs4_to_utf8
+g_utf16_to_ucs4
+g_utf16_to_utf8
+g_utf8_find_next_char
+g_utf8_find_prev_char
+g_utf8_get_char
+g_utf8_get_char_validated
+g_utf8_offset_to_pointer
+g_utf8_pointer_to_offset
+g_utf8_prev_char
+g_utf8_strchr
+g_utf8_strlen
+g_utf8_strncpy
+g_utf8_strrchr
+g_utf8_strreverse
+g_utf8_to_ucs4
+g_utf8_to_ucs4_fast
+g_utf8_to_utf16
+g_utf8_validate
+g_unichar_to_utf8
+g_unichar_validate
+
+
+
+
+
+g_int_equal
+g_int_hash
+g_direct_equal
+g_direct_hash
+
+
+
+
+
+g_atexit
+
+g_basename
+
+g_get_application_name
+g_find_program_in_path PRIVATE
+g_get_current_dir PRIVATE
+g_getenv PRIVATE
+g_unsetenv PRIVATE
+g_get_home_dir PRIVATE
+g_get_host_name
+g_setenv PRIVATE
+g_listenv
+
+g_find_program_in_path_utf8
+g_get_current_dir_utf8
+g_getenv_utf8
+g_unsetenv_utf8
+g_setenv_utf8
+g_get_home_dir_utf8
+
+g_get_language_names
+g_get_prgname
+g_get_real_name PRIVATE
+
+g_get_real_name_utf8
+
+g_get_system_config_dirs
+g_get_system_data_dirs
+
+g_win32_get_system_data_dirs_for_module
+
+g_get_tmp_dir PRIVATE
+
+g_get_tmp_dir_utf8
+
+g_get_user_cache_dir
+g_get_user_config_dir
+g_get_user_data_dir
+g_get_user_name PRIVATE
+
+g_get_user_name_utf8
+
+glib_check_version
+g_nullify_pointer
+g_parse_debug_string
+g_path_get_basename
+g_path_get_dirname
+g_path_is_absolute
+g_path_skip_root
+g_set_application_name
+g_set_prgname
+
+g_bit_nth_lsf
+g_bit_nth_msf
+g_bit_storage
+g_trash_stack_height
+g_trash_stack_peek
+g_trash_stack_pop
+g_trash_stack_push
+g_get_codeset
+
+
+
+
+
+
+
+g_win32_error_message
+g_win32_ftruncate
+g_win32_get_package_installation_directory PRIVATE
+g_win32_get_package_installation_directory_utf8
+g_win32_get_package_installation_subdirectory PRIVATE
+g_win32_get_package_installation_subdirectory_utf8
+g_win32_get_windows_version
+g_win32_getlocale
+g_win32_locale_filename_from_utf8
+
+
+
+
+
+g_ascii_table
+g_utf8_skip
+g_idle_funcs
+g_timeout_funcs
+g_io_watch_funcs
+g_child_watch_funcs
+glib_binary_age
+glib_interface_age
+glib_major_version
+glib_mem_profiler_table
+glib_micro_version
+glib_minor_version
+glib_on_error_halt
+g_mem_gc_friendly
+
+
+
diff -urN original-libraries/glib-2.12.6/glib/makefile.msc glib-2.12.6/glib/makefile.msc
--- original-libraries/glib-2.12.6/glib/makefile.msc	2006-12-20 17:41:10.000000000 +0100
+++ glib-2.12.6/glib/makefile.msc	2007-02-01 16:32:31.987009500 +0100
@@ -17,6 +17,7 @@
 	galias.h		\
 	galiasdef.c		\
 	gnulib\gnulib.lib	\
+	..\build\win32\dirent\dirent.lib \
 	libglib-2.0-0.dll \
 	glib-2.12s.lib \
 	gspawn-win32-helper.exe	\
@@ -27,6 +28,11 @@
 	nmake -f makefile.msc
 	cd ..
 
+..\build\win32\dirent\dirent.lib:
+	cd ..\build\win32\dirent
+	nmake -f makefile.msc
+	cd ..\..\..\glib
+
 glib_OBJECTS =			\
 	garray.obj		\
 	gasyncqueue.obj		\
@@ -83,6 +89,66 @@
 	gwin32.obj		\
 	localcharset.obj
 
+glibinclude_HEADERS =   \
+	glib-object.h	\
+	glib.h
+
+glibsubinclude_HEADERS =   \
+	galloca.h	\
+	garray.h	\
+	gasyncqueue.h	\
+	gatomic.h	\
+	gbacktrace.h	\
+	gbase64.h	\
+	gbookmarkfile.h \
+	gcache.h	\
+	gcompletion.h	\
+	gconvert.h	\
+	gdataset.h	\
+	gdate.h		\
+	gdir.h		\
+	gerror.h	\
+	gfileutils.h	\
+	ghash.h		\
+	ghook.h		\
+	gi18n.h		\
+	gi18n-lib.h	\
+	giochannel.h	\
+	gkeyfile.h 	\
+	glist.h		\
+	gmacros.h	\
+	gmain.h		\
+	gmappedfile.h	\
+	gmarkup.h	\
+	gmem.h		\
+	gmessages.h	\
+	gnode.h		\
+	goption.h	\
+	gpattern.h	\
+	gprimes.h	\
+	gqsort.h	\
+	gquark.h	\
+	gqueue.h	\
+	grand.h		\
+	grel.h		\
+	gscanner.h	\
+	gshell.h	\
+	gslice.h	\
+	gslist.h	\
+	gspawn.h	\
+	gstdio.h	\
+	gstrfuncs.h	\
+	gstring.h	\
+	gthread.h	\
+	gthreadpool.h	\
+	gtimer.h	\
+	gtree.h		\
+	gtypes.h	\
+	gunicode.h	\
+	gutils.h	\
+	gwin32.h	\
+	gprintf.h
+
 ..\glibconfig.h: ..\glibconfig.h.win32
 	copy ..\glibconfig.h.win32 ..\glibconfig.h
 
@@ -116,13 +182,27 @@
 	$(CC) $(CFLAGS) -LD -Fe$@ $(glib_OBJECTS) glib.res $(LIBICONV_LIBS) $(INTL_LIBS) \
 	gnulib\gnulib.lib $(DIRENT_LIBS) user32.lib advapi32.lib shell32.lib wsock32.lib ole32.lib ws2_32.lib \
 	$(LDFLAGS) /implib:glib-2.0.lib /def:glib.def
+	mt -outputresource:$@ -manifest $@.manifest
 
 gspawn-win32-helper.exe : gspawn-win32-helper.c libglib-2.0-0.dll
 	$(CC) $(CFLAGS) -Fe$@ -DG_LOG_DOMAIN=\"gspawn-win32-helper\" gspawn-win32-helper.c glib-2.0.lib $(LDFLAGS) /subsystem:windows user32.lib
+	mt -outputresource:$@ -manifest $@.manifest
 
 ################ other stuff
 
 clean::
-	del ..\config.h
-	del ..\glibconfig.h
-
+	-del ..\config.h
+	-del ..\glibconfig.h
+	-del gnulib\gnulib.lib gnulib\*.obj
+	-del ..\build\win32\dirent\dirent.lib
+	-del ..\build\win32\dirent\*.obj
+
+install:
+	-mkdir $(VCLIBS_PREFIX)\bin
+	copy libglib-2.0-0.dll $(VCLIBS_PREFIX)\bin
+	-mkdir $(VCLIBS_PREFIX)\lib
+	copy glib-2.0.lib $(VCLIBS_PREFIX)\lib
+	-mkdir $(VCLIBS_PREFIX)\include\glib-2.0
+	for %h in ($(glibinclude_HEADERS)) do copy %h $(VCLIBS_PREFIX)\include\glib-2.0
+	-mkdir $(VCLIBS_PREFIX)\include\glib-2.0\glib
+	for %h in ($(glibsubinclude_HEADERS)) do copy %h $(VCLIBS_PREFIX)\include\glib-2.0\glib
diff -urN original-libraries/glib-2.12.6/gmodule/makefile.msc glib-2.12.6/gmodule/makefile.msc
--- original-libraries/glib-2.12.6/gmodule/makefile.msc	2006-12-20 17:41:12.000000000 +0100
+++ glib-2.12.6/gmodule/makefile.msc	2007-02-01 16:17:35.943240100 +0100
@@ -26,6 +26,15 @@
 libgmodule-2.0-0.dll : $(gmodule_OBJECTS) gmodule.def gmodule.res
 	$(CC) $(CFLAGS) -LD -Fe$@ $(gmodule_OBJECTS) gmodule.res \
 	..\glib\glib-2.0.lib $(LDFLAGS) /implib:gmodule-2.0.lib /def:gmodule.def
+	mt -outputresource:$@ -manifest $@.manifest
 
 clean::
 	del gmoduleconf.h
+
+install:
+	-mkdir $(VCLIBS_PREFIX)\bin
+	copy libgmodule-2.0-0.dll $(VCLIBS_PREFIX)\bin
+	-mkdir $(VCLIBS_PREFIX)\lib
+	copy gmodule-2.0.lib $(VCLIBS_PREFIX)\lib
+	-mkdir $(VCLIBS_PREFIX)\include\glib-2.0
+	copy gmodule.h $(VCLIBS_PREFIX)\include\glib-2.0
diff -urN original-libraries/glib-2.12.6/gobject/glib-mkenums glib-2.12.6/gobject/glib-mkenums
--- original-libraries/glib-2.12.6/gobject/glib-mkenums	1970-01-01 01:00:00.000000000 +0100
+++ glib-2.12.6/gobject/glib-mkenums	2007-01-23 16:50:24.302303700 +0100
@@ -0,0 +1,466 @@
+# perl.exe -w
+
+# glib-mkenums.pl 
+# Information about the current enumeration
+my $flags;			# Is enumeration a bitmask?
+my $option_lowercase_name;			# A lower case name to use as part of the *_get_type() function, instead of the one that we guess.
+                        # For instance, when an enum uses abnormal capitalization and we can not guess where to put the underscores.
+my $seenbitshift;		# Have we seen bitshift operators?
+my $enum_prefix;		# Prefix for this enumeration
+my $enumname;			# Name for this enumeration
+my $enumshort;			# $enumname without prefix
+my $enumindex = 0;		# Global enum counter
+my $firstenum = 1;		# Is this the first enumeration per file?
+my @entries;			# [ $name, $val ] for each entry
+
+sub parse_trigraph {
+    my $opts = shift;
+    my @opts;
+
+    for $opt (split /\s*,\s*/, $opts) {
+	$opt =~ s/^\s*//;
+	$opt =~ s/\s*$//;
+        my ($key,$val) = $opt =~ /(\w+)(?:=(.+))?/;
+	defined $val or $val = 1;
+	push @opts, $key, $val;
+    }
+    @opts;
+}
+sub parse_entries {
+    my $file = shift;
+    my $file_name = shift;
+    my $looking_for_name = 0;
+    
+    while (<$file>) {
+	# read lines until we have no open comments
+	while (m@/\*([^*]|\*(?!/))*$@) {
+	    my $new;
+	    defined ($new = <$file>) || die "Unmatched comment in $ARGV";
+	    $_ .= $new;
+	}
+	# strip comments w/o options
+	s@/\*(?!<)
+	    ([^*]+|\*(?!/))*
+	   \*/@@gx;
+	
+	# strip newlines
+	s@\n@ @;
+	
+	# skip empty lines
+	next if m@^\s*$@;
+	
+	if ($looking_for_name) {
+	    if (/^\s*(\w+)/) {
+		$enumname = $1;
+		return 1;
+	    }
+	}
+	
+	# Handle include files
+	if (/^\#include\s*<([^>]*)>/ ) {
+            my $file= "../$1";
+	    open NEWFILE, $file or die "Cannot open include file $file: $!\n";
+	    
+	    if (parse_entries (\*NEWFILE, $NEWFILE)) {
+		return 1;
+	    } else {
+		next;
+	    }
+	}
+	
+	if (/^\s*\}\s*(\w+)/) {
+	    $enumname = $1;
+	    $enumindex++;
+	    return 1;
+	}
+	
+	if (/^\s*\}/) {
+	    $enumindex++;
+	    $looking_for_name = 1;
+	    next;
+	}
+
+        if (m@^\s*
+              (\w+)\s*                   # name
+              (?:=(                      # value
+		   \s*\w+\s*\(.*\)\s*       # macro with multiple args
+		   |                        # OR
+                   (?:[^,/]|/(?!\*))*       # anything but a comma or comment
+                  ))?,?\s*
+              (?:/\*<                    # options
+                (([^*]|\*(?!/))*)
+               >\s*\*/)?,?
+              \s*$
+             @x) {
+            my ($name, $value, $options) = ($1,$2,$3);
+
+	    if (!defined $flags && defined $value && $value =~ /<</) {
+		$seenbitshift = 1;
+	    }
+
+	    if (defined $options) {
+		my %options = parse_trigraph($options);
+		if (!defined $options{skip}) {
+		    push @entries, [ $name, $options{nick} ];
+		}
+	    } else {
+		push @entries, [ $name ];
+	    }
+	} elsif (m@^\s*\#@) {
+	    # ignore preprocessor directives
+	} else {
+	    print STDERR "$0: $file_name:$.: Failed to parse `$_'\n";
+	}
+    }
+
+    return 0;
+}
+
+sub version {
+    print STDERR "glib-mkenums version glib-2.12.6\n";
+    print STDERR "glib-mkenums comes with ABSOLUTELY NO WARRANTY.\n";
+    print STDERR "You may redistribute copies of glib-mkenums under the terms of\n";
+    print STDERR "the GNU General Public License which can be found in the\n";
+    print STDERR "GLib source package. Sources, examples and contact\n";
+    print STDERR "information are available at http://www.gtk.org\n";
+    exit 0;
+}
+sub usage {
+    print STDERR "Usage: glib-mkenums [options] [files...]\n";
+    print STDERR "  --fhead <text>             output file header\n";
+    print STDERR "  --fprod <text>             per input file production\n";
+    print STDERR "  --ftail <text>             output file trailer\n";
+    print STDERR "  --eprod <text>             per enum text (produced prior to value itarations)\n";
+    print STDERR "  --vhead <text>             value header, produced before iterating over enum values\n";
+    print STDERR "  --vprod <text>             value text, produced for each enum value\n";
+    print STDERR "  --vtail <text>             value tail, produced after iterating over enum values\n";
+    print STDERR "  --comments <text>          comment structure\n";
+    print STDERR "  --template file            template file\n";
+    print STDERR "  -h, --help                 show this help message\n";
+    print STDERR "  -v, --version              print version informations\n";
+    print STDERR "Production text substitutions:\n";
+    print STDERR "  \@EnumName\@                 PrefixTheXEnum\n";
+    print STDERR "  \@enum_name\@                prefix_the_xenum\n";
+    print STDERR "  \@ENUMNAME\@                 PREFIX_THE_XENUM\n";
+    print STDERR "  \@ENUMSHORT\@                THE_XENUM\n";
+    print STDERR "  \@VALUENAME\@                PREFIX_THE_XVALUE\n";
+    print STDERR "  \@valuenick\@                the-xvalue\n";
+    print STDERR "  \@type\@                     either enum or flags\n";
+    print STDERR "  \@Type\@                     either Enum or Flags\n";
+    print STDERR "  \@TYPE\@                     either ENUM or FLAGS\n";
+    print STDERR "  \@filename\@                 name of current input file\n";
+    exit 0;
+}
+
+# production variables:
+my $fhead = "";   # output file header
+my $fprod = "";   # per input file production
+my $ftail = "";   # output file trailer
+my $eprod = "";   # per enum text (produced prior to value itarations)
+my $vhead = "";   # value header, produced before iterating over enum values
+my $vprod = "";   # value text, produced for each enum value
+my $vtail = "";   # value tail, produced after iterating over enum values
+# other options
+my $comment_tmpl = "/* \@comment\@ */";
+
+sub read_template_file {
+  my ($file) = @_;
+  my %tmpl = ('file-header', $fhead, 
+	      'file-production', $fprod, 
+	      'file-tail', $ftail, 
+	      'enumeration-production', $eprod,
+	      'value-header', $vhead,
+	      'value-production', $vprod,
+	      'value-tail', $vtail,
+	      'comment', $comment_tmpl);
+  my $in = 'junk';
+  open (FILE, $file) || die "Can't open $file: $!\n";
+  while (<FILE>) {
+    if (/^\/\*\*\*\s+(BEGIN|END)\s+([\w-]+)\s+\*\*\*\//) {
+      if (($in eq 'junk') && ($1 eq 'BEGIN') && (exists($tmpl{$2}))) {
+	$in = $2;
+	next;
+      }
+      elsif (($in eq $2) && ($1 eq 'END') && (exists($tmpl{$2}))) {
+	$in = 'junk';
+	next;
+      }
+      else {
+	  die "Malformed template file $file\n";
+      }
+    }
+    if (!($in eq 'junk')) {
+	$tmpl{$in} .= $_;
+    }
+  }
+  close (FILE);
+  if (!($in eq 'junk')) {
+      die "Malformed template file $file\n";
+  }
+  $fhead = $tmpl{'file-header'};
+  $fprod = $tmpl{'file-production'};
+  $ftail = $tmpl{'file-tail'};
+  $eprod = $tmpl{'enumeration-production'};
+  $vhead = $tmpl{'value-header'};
+  $vprod = $tmpl{'value-production'};
+  $vtail = $tmpl{'value-tail'};
+  $comment_tmpl = $tmpl{'comment'};
+}
+
+if (!defined $ARGV[0]) {
+    usage;
+}
+while ($_ = $ARGV[0], /^-/) {
+    shift;
+    last if /^--$/;
+    if (/^--template$/)              { read_template_file (shift); }
+    elsif (/^--fhead$/)              { $fhead = $fhead . shift }
+    elsif (/^--fprod$/)              { $fprod = $fprod . shift }
+    elsif (/^--ftail$/)              { $ftail = $ftail . shift }
+    elsif (/^--eprod$/)              { $eprod = $eprod . shift }
+    elsif (/^--vhead$/)              { $vhead = $vhead . shift }
+    elsif (/^--vprod$/)              { $vprod = $vprod . shift }
+    elsif (/^--vtail$/)              { $vtail = $vtail . shift }
+    elsif (/^--comments$/)           { $comment_tmpl = shift }
+    elsif (/^--help$/ || /^-h$/)     { usage; }
+    elsif (/^--version$/ || /^-v$/)  { version; }
+    else { usage; }
+}
+
+# put auto-generation comment
+{
+    my $comment = $comment_tmpl;
+    $comment =~ s/\@comment\@/Generated data (by glib-mkenums)/;
+    print "\n" . $comment . "\n\n";
+}
+
+if (length($fhead)) {
+    my $prod = $fhead;
+
+    $prod =~ s/\@filename\@/$ARGV[0]/g;
+    $prod =~ s/\\a/\a/g; $prod =~ s/\\b/\b/g; $prod =~ s/\\t/\t/g; $prod =~ s/\\n/\n/g;
+    $prod =~ s/\\f/\f/g; $prod =~ s/\\r/\r/g;
+    chomp ($prod);
+		
+    print "$prod\n";
+}
+
+while (<>) {
+    if (eof) {
+	close (ARGV);		# reset line numbering
+	$firstenum = 1;		# Flag to print filename at next enum
+    }
+
+    # read lines until we have no open comments
+    while (m@/\*([^*]|\*(?!/))*$@) {
+	my $new;
+	defined ($new = <>) || die "Unmatched comment in $ARGV";
+	$_ .= $new;
+    }
+    # strip comments w/o options
+    s@/\*(?!<)
+       ([^*]+|\*(?!/))*
+       \*/@@gx;
+	
+    if (m@^\s*typedef\s+enum\s*
+           ({)?\s*
+           (?:/\*<
+             (([^*]|\*(?!/))*)
+            >\s*\*/)?
+           \s*({)?
+         @x) {
+	if (defined $2) {
+	    my %options = parse_trigraph ($2);
+	    next if defined $options{skip};
+	    $enum_prefix = $options{prefix};
+	    $flags = $options{flags};
+      $option_lowercase_name = $options{lowercase_name};
+	} else {
+	    $enum_prefix = undef;
+	    $flags = undef;
+      $option_lowercase_name = undef;
+	}
+	# Didn't have trailing '{' look on next lines
+	if (!defined $1 && !defined $4) {
+	    while (<>) {
+		if (s/^\s*\{//) {
+		    last;
+		}
+	    }
+	}
+
+	$seenbitshift = 0;
+	@entries = ();
+
+	# Now parse the entries
+	parse_entries (\*ARGV, $ARGV);
+
+	# figure out if this was a flags or enums enumeration
+	if (!defined $flags) {
+	    $flags = $seenbitshift;
+	}
+
+	# Autogenerate a prefix
+	if (!defined $enum_prefix) {
+	    for (@entries) {
+		my $nick = $_->[1];
+		if (!defined $nick) {
+		    my $name = $_->[0];
+		    if (defined $enum_prefix) {
+			my $tmp = ~ ($name ^ $enum_prefix);
+			($tmp) = $tmp =~ /(^\xff*)/;
+			$enum_prefix = $enum_prefix & $tmp;
+		    } else {
+			$enum_prefix = $name;
+		    }
+		}
+	    }
+	    if (!defined $enum_prefix) {
+		$enum_prefix = "";
+	    } else {
+		# Trim so that it ends in an underscore
+		$enum_prefix =~ s/_[^_]*$/_/;
+	    }
+	} else {
+	    # canonicalize user defined prefixes
+	    $enum_prefix = uc($enum_prefix);
+	    $enum_prefix =~ s/-/_/g;
+	    $enum_prefix =~ s/(.*)([^_])$/$1$2_/;
+	}
+	
+	for $entry (@entries) {
+	    my ($name,$nick) = @{$entry};
+            if (!defined $nick) {
+ 	        ($nick = $name) =~ s/^$enum_prefix//;
+	        $nick =~ tr/_/-/;
+	        $nick = lc($nick);
+	        @{$entry} = ($name, $nick);
+            }
+	}
+	
+
+	# Spit out the output
+	
+	# enumname is e.g. GMatchType
+	$enspace = $enumname;
+	$enspace =~ s/^([A-Z][a-z]*).*$/$1/;
+	
+	$enumshort = $enumname;
+	$enumshort =~ s/^[A-Z][a-z]*//;
+	$enumshort =~ s/([^A-Z])([A-Z])/$1_$2/g;
+	$enumshort =~ s/([A-Z][A-Z])([A-Z][0-9a-z])/$1_$2/g;
+	$enumshort = uc($enumshort);
+
+	$enumlong = uc($enspace) . "_" . $enumshort;
+	$enumsym = lc($enspace) . "_" . lc($enumshort);
+
+  #The options might override the lower case name if it could not be generated correctly:
+  if (defined($option_lowercase_name)) {
+      $enumsym = $option_lowercase_name;
+  }
+
+	if ($firstenum) {
+	    $firstenum = 0;
+	    
+	    if (length($fprod)) {
+		my $prod = $fprod;
+
+		$prod =~ s/\@filename\@/$ARGV/g;
+		$prod =~ s/\\a/\a/g; $prod =~ s/\\b/\b/g; $prod =~ s/\\t/\t/g; $prod =~ s/\\n/\n/g;
+		$prod =~ s/\\f/\f/g; $prod =~ s/\\r/\r/g;
+	        chomp ($prod);
+		
+		print "$prod\n";
+	    }
+	}
+	
+	if (length($eprod)) {
+	    my $prod = $eprod;
+
+	    $prod =~ s/\@enum_name\@/$enumsym/g;
+	    $prod =~ s/\@EnumName\@/$enumname/g;
+	    $prod =~ s/\@ENUMSHORT\@/$enumshort/g;
+	    $prod =~ s/\@ENUMNAME\@/$enumlong/g;
+	    if ($flags) { $prod =~ s/\@type\@/flags/g; } else { $prod =~ s/\@type\@/enum/g; }
+	    if ($flags) { $prod =~ s/\@Type\@/Flags/g; } else { $prod =~ s/\@Type\@/Enum/g; }
+	    if ($flags) { $prod =~ s/\@TYPE\@/FLAGS/g; } else { $prod =~ s/\@TYPE\@/ENUM/g; }
+	    $prod =~ s/\\a/\a/g; $prod =~ s/\\b/\b/g; $prod =~ s/\\t/\t/g; $prod =~ s/\\n/\n/g;
+	    $prod =~ s/\\f/\f/g; $prod =~ s/\\r/\r/g;
+            chomp ($prod);
+
+	    print "$prod\n";
+	}
+
+	if (length($vhead)) {
+	    my $prod = $vhead;
+
+	    $prod =~ s/\@enum_name\@/$enumsym/g;
+            $prod =~ s/\@EnumName\@/$enumname/g;
+            $prod =~ s/\@ENUMSHORT\@/$enumshort/g;
+            $prod =~ s/\@ENUMNAME\@/$enumlong/g;
+	    if ($flags) { $prod =~ s/\@type\@/flags/g; } else { $prod =~ s/\@type\@/enum/g; }
+	    if ($flags) { $prod =~ s/\@Type\@/Flags/g; } else { $prod =~ s/\@Type\@/Enum/g; }
+	    if ($flags) { $prod =~ s/\@TYPE\@/FLAGS/g; } else { $prod =~ s/\@TYPE\@/ENUM/g; }
+            $prod =~ s/\\a/\a/g; $prod =~ s/\\b/\b/g; $prod =~ s/\\t/\t/g; $prod =~ s/\\n/\n/g;
+            $prod =~ s/\\f/\f/g; $prod =~ s/\\r/\r/g;
+            chomp ($prod);
+	    
+            print "$prod\n";
+	}
+
+	if (length($vprod)) {
+	    my $prod = $vprod;
+	    
+	    $prod =~ s/\\a/\a/g; $prod =~ s/\\b/\b/g; $prod =~ s/\\t/\t/g; $prod =~ s/\\n/\n/g;
+	    $prod =~ s/\\f/\f/g; $prod =~ s/\\r/\r/g;
+	    for (@entries) {
+		my ($name,$nick) = @{$_};
+		my $tmp_prod = $prod;
+
+		$tmp_prod =~ s/\@VALUENAME\@/$name/g;
+		$tmp_prod =~ s/\@valuenick\@/$nick/g;
+		if ($flags) { $tmp_prod =~ s/\@type\@/flags/g; } else { $tmp_prod =~ s/\@type\@/enum/g; }
+		if ($flags) { $tmp_prod =~ s/\@Type\@/Flags/g; } else { $tmp_prod =~ s/\@Type\@/Enum/g; }
+		if ($flags) { $tmp_prod =~ s/\@TYPE\@/FLAGS/g; } else { $tmp_prod =~ s/\@TYPE\@/ENUM/g; }
+		chomp ($tmp_prod);
+
+		print "$tmp_prod\n";
+	    }
+	}
+
+	if (length($vtail)) {
+	    my $prod = $vtail;
+
+	    $prod =~ s/\@enum_name\@/$enumsym/g;
+            $prod =~ s/\@EnumName\@/$enumname/g;
+            $prod =~ s/\@ENUMSHORT\@/$enumshort/g;
+            $prod =~ s/\@ENUMNAME\@/$enumlong/g;
+	    if ($flags) { $prod =~ s/\@type\@/flags/g; } else { $prod =~ s/\@type\@/enum/g; }
+	    if ($flags) { $prod =~ s/\@Type\@/Flags/g; } else { $prod =~ s/\@Type\@/Enum/g; }
+	    if ($flags) { $prod =~ s/\@TYPE\@/FLAGS/g; } else { $prod =~ s/\@TYPE\@/ENUM/g; }
+            $prod =~ s/\\a/\a/g; $prod =~ s/\\b/\b/g; $prod =~ s/\\t/\t/g; $prod =~ s/\\n/\n/g;
+            $prod =~ s/\\f/\f/g; $prod =~ s/\\r/\r/g;
+            chomp ($prod);
+	    
+            print "$prod\n";
+	}
+    }
+}
+
+if (length($ftail)) {
+    my $prod = $ftail;
+
+    $prod =~ s/\@filename\@/$ARGV/g;
+    $prod =~ s/\\a/\a/g; $prod =~ s/\\b/\b/g; $prod =~ s/\\t/\t/g; $prod =~ s/\\n/\n/g;
+    $prod =~ s/\\f/\f/g; $prod =~ s/\\r/\r/g;
+    chomp ($prod);
+		
+    print "$prod\n";
+}
+
+# put auto-generation comment
+{
+    my $comment = $comment_tmpl;
+    $comment =~ s/\@comment\@/Generated data ends here/;
+    print "\n" . $comment . "\n\n";
+}
diff -urN original-libraries/glib-2.12.6/gobject/gobject.def glib-2.12.6/gobject/gobject.def
--- original-libraries/glib-2.12.6/gobject/gobject.def	1970-01-01 01:00:00.000000000 +0100
+++ glib-2.12.6/gobject/gobject.def	2007-01-23 15:25:00.460093700 +0100
@@ -0,0 +1,438 @@
+EXPORTS 
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+g_boxed_copy
+g_boxed_free
+g_boxed_type_register_static
+g_date_get_type
+g_gstring_get_type
+g_strv_get_type
+g_hash_table_get_type
+g_closure_get_type
+g_value_get_type
+g_value_array_get_type
+g_value_set_boxed
+g_value_take_boxed
+g_value_dup_boxed
+g_value_get_boxed
+g_value_set_static_boxed
+
+g_value_set_boxed_take_ownership
+
+
+
+
+
+
+g_cclosure_marshal_BOOLEAN__FLAGS
+g_cclosure_marshal_STRING__OBJECT_POINTER
+g_cclosure_marshal_VOID__BOOLEAN
+g_cclosure_marshal_VOID__BOXED
+g_cclosure_marshal_VOID__CHAR
+g_cclosure_marshal_VOID__DOUBLE
+g_cclosure_marshal_VOID__ENUM
+g_cclosure_marshal_VOID__FLAGS
+g_cclosure_marshal_VOID__FLOAT
+g_cclosure_marshal_VOID__INT
+g_cclosure_marshal_VOID__LONG
+g_cclosure_marshal_VOID__OBJECT
+g_cclosure_marshal_VOID__PARAM
+g_cclosure_marshal_VOID__POINTER
+g_cclosure_marshal_VOID__STRING
+g_cclosure_marshal_VOID__UCHAR
+g_cclosure_marshal_VOID__UINT
+g_cclosure_marshal_VOID__UINT_POINTER
+g_cclosure_marshal_VOID__ULONG
+g_cclosure_marshal_VOID__VOID
+
+
+
+
+
+g_cclosure_new
+g_cclosure_new_swap
+g_closure_add_finalize_notifier
+g_closure_add_invalidate_notifier
+g_closure_add_marshal_guards
+g_closure_invalidate
+g_closure_invoke
+g_closure_new_simple
+g_closure_ref
+g_closure_remove_finalize_notifier
+g_closure_remove_invalidate_notifier
+g_closure_set_marshal
+g_closure_set_meta_marshal
+g_closure_sink
+g_closure_unref
+g_signal_type_cclosure_new
+
+
+
+
+
+g_enum_complete_type_info
+g_enum_get_value
+g_enum_get_value_by_name
+g_enum_get_value_by_nick
+g_enum_register_static
+g_flags_complete_type_info
+g_flags_get_first_value
+g_flags_get_value_by_name
+g_flags_get_value_by_nick
+g_flags_register_static
+g_value_set_enum
+g_value_set_flags
+g_value_get_enum
+g_value_get_flags
+
+
+
+
+
+g_io_channel_get_type
+g_io_condition_get_type
+g_source_set_closure
+
+
+
+
+
+g_cclosure_new_object
+g_cclosure_new_object_swap
+g_closure_new_object
+g_initially_unowned_get_type
+g_object_add_weak_pointer
+g_object_class_find_property
+g_object_class_install_property
+g_object_class_list_properties
+g_object_class_override_property
+g_object_connect
+g_object_disconnect
+g_object_freeze_notify
+g_object_get
+g_object_get_data
+g_object_get_property
+g_object_get_qdata
+g_object_get_valist
+g_object_interface_find_property
+g_object_interface_install_property
+g_object_interface_list_properties
+g_object_new
+g_object_newv
+g_object_new_valist
+g_object_notify
+g_object_is_floating
+g_object_ref_sink
+g_object_force_floating
+g_object_ref
+g_object_unref
+g_object_remove_weak_pointer
+g_object_run_dispose
+g_object_set
+g_object_set_data
+g_object_set_data_full
+g_object_set_property
+g_object_set_qdata
+g_object_set_qdata_full
+g_object_set_valist
+g_object_steal_data
+g_object_steal_qdata
+g_object_thaw_notify
+g_object_watch_closure
+g_object_weak_ref
+g_object_weak_unref
+g_object_add_toggle_ref
+g_object_remove_toggle_ref
+g_value_get_object
+g_value_set_object
+g_value_dup_object
+g_value_take_object
+
+g_value_set_object_take_ownership
+g_object_compat_control
+
+g_signal_connect_object
+
+
+
+
+
+g_param_spec_boolean
+g_param_spec_boxed
+g_param_spec_char
+g_param_spec_double
+g_param_spec_enum
+g_param_spec_flags
+g_param_spec_float
+g_param_spec_int
+g_param_spec_int64
+g_param_spec_long
+g_param_spec_object
+g_param_spec_override
+g_param_spec_gtype
+g_param_spec_param
+g_param_spec_pointer
+g_param_spec_string
+g_param_spec_uchar
+g_param_spec_uint
+g_param_spec_uint64
+g_param_spec_ulong
+g_param_spec_unichar
+g_param_spec_value_array
+
+
+
+
+
+g_param_spec_get_blurb
+g_param_spec_get_name
+g_param_spec_get_nick
+g_param_spec_get_redirect_target
+g_param_spec_internal
+g_param_type_register_static
+g_param_spec_ref
+g_param_spec_ref_sink
+g_param_spec_unref
+g_param_spec_sink
+g_param_spec_steal_qdata
+g_param_spec_set_qdata
+g_param_spec_set_qdata_full
+g_param_spec_get_qdata
+g_param_value_convert
+g_param_value_defaults
+g_param_values_cmp
+g_param_value_set_default
+g_param_value_validate
+g_param_spec_pool_insert
+g_param_spec_pool_list
+g_param_spec_pool_list_owned
+g_param_spec_pool_lookup
+g_param_spec_pool_new
+g_param_spec_pool_remove
+g_value_get_param
+g_value_set_param
+g_value_dup_param
+g_value_take_param
+
+g_value_set_param_take_ownership
+
+
+
+
+
+
+g_pointer_type_register_static
+g_strdup_value_contents
+g_value_set_boolean
+g_value_set_char
+g_value_set_double
+g_value_set_float
+g_value_set_int
+g_value_set_int64
+g_value_set_long
+g_value_set_pointer
+g_value_set_static_string
+g_value_set_string
+
+g_value_set_string_take_ownership
+
+g_value_set_uchar
+g_value_set_uint
+g_value_set_uint64
+g_value_set_ulong
+g_value_dup_string
+g_value_get_boolean
+g_value_get_char
+g_value_get_double
+g_value_get_float
+g_value_get_int
+g_value_get_int64
+g_value_get_long
+g_value_get_pointer
+g_value_get_string
+g_value_get_uchar
+g_value_get_uint
+g_value_get_uint64
+g_value_get_ulong
+g_value_take_string
+g_gtype_get_type
+g_value_set_gtype
+g_value_get_gtype
+
+
+
+
+
+g_signal_accumulator_true_handled
+g_signal_add_emission_hook
+g_signal_chain_from_overridden
+g_signal_connect_closure
+g_signal_connect_closure_by_id
+g_signal_connect_data
+g_signal_emit
+g_signal_emit_by_name
+g_signal_emitv
+g_signal_emit_valist
+g_signal_get_invocation_hint
+g_signal_handler_block
+g_signal_handler_disconnect
+g_signal_handler_find
+g_signal_handler_is_connected
+g_signal_handlers_block_matched
+g_signal_handlers_destroy
+g_signal_handlers_disconnect_matched
+g_signal_handlers_unblock_matched
+g_signal_handler_unblock
+g_signal_has_handler_pending
+g_signal_list_ids
+g_signal_lookup
+g_signal_name
+g_signal_new
+g_signal_newv
+g_signal_new_valist
+g_signal_override_class_closure
+g_signal_parse_name
+g_signal_query
+g_signal_remove_emission_hook
+g_signal_stop_emission
+g_signal_stop_emission_by_name
+
+
+
+
+
+g_type_add_class_cache_func
+g_type_add_interface_check
+g_type_add_interface_dynamic
+g_type_add_interface_static
+g_type_check_class_cast
+g_type_check_class_is_a
+g_type_check_instance 
+g_type_check_instance_cast
+g_type_check_instance_is_a
+g_type_check_is_value_type
+g_type_check_value
+g_type_check_value_holds
+g_type_children
+g_type_class_add_private
+g_type_class_peek
+g_type_class_peek_parent
+g_type_class_peek_static
+g_type_class_ref
+g_type_class_unref
+g_type_class_unref_uncached
+g_type_create_instance
+g_type_default_interface_peek
+g_type_default_interface_ref
+g_type_default_interface_unref
+g_type_depth
+g_type_free_instance
+g_type_from_name
+g_type_fundamental
+g_type_fundamental_next
+g_type_get_plugin
+g_type_get_qdata
+g_type_init
+g_type_init_with_debug_flags
+g_type_instance_get_private
+g_type_interface_add_prerequisite
+g_type_interface_get_plugin
+g_type_interface_peek
+g_type_interface_peek_parent
+g_type_interface_prerequisites
+g_type_interfaces
+g_type_is_a
+g_type_name
+g_type_name_from_class
+g_type_name_from_instance
+g_type_next_base
+g_type_parent
+g_type_qname
+g_type_query
+g_type_register_dynamic
+g_type_register_fundamental
+g_type_register_static
+g_type_register_static_simple
+g_type_remove_class_cache_func
+g_type_remove_interface_check
+g_type_set_qdata
+g_type_test_flags
+g_type_value_table_peek
+
+
+
+
+
+g_type_module_add_interface
+g_type_module_get_type
+g_type_module_register_enum
+g_type_module_register_flags
+g_type_module_register_type
+g_type_module_set_name
+g_type_module_unuse
+g_type_module_use
+
+
+
+
+
+g_value_array_append
+g_value_array_copy
+g_value_array_free
+g_value_array_get_nth
+g_value_array_insert
+g_value_array_new
+g_value_array_prepend
+g_value_array_remove
+g_value_array_sort
+g_value_array_sort_with_data
+
+
+
+
+
+g_type_plugin_complete_interface_info
+g_type_plugin_complete_type_info
+g_type_plugin_get_type
+g_type_plugin_unuse
+g_type_plugin_use
+
+
+
+
+
+g_value_copy
+g_value_fits_pointer
+g_value_init
+g_value_peek_pointer
+g_value_register_transform_func
+g_value_reset
+g_value_transform
+g_value_type_compatible
+g_value_type_transformable
+g_value_unset
+g_value_set_instance
+
+
+
+
+g_param_spec_types
+
+
+
+
+
diff -urN original-libraries/glib-2.12.6/gobject/makefile.msc glib-2.12.6/gobject/makefile.msc
--- original-libraries/glib-2.12.6/gobject/makefile.msc	2006-12-20 17:41:10.000000000 +0100
+++ glib-2.12.6/gobject/makefile.msc	2007-02-01 16:32:45.768700500 +0100
@@ -42,6 +42,25 @@
 	gvaluetypes.obj	\
 	gvaluetransform.obj
 
+gobject_HEADERS = \
+	gboxed.h		\
+	gclosure.h		\
+	genums.h		\
+	gobject.h		\
+	gparam.h		\
+	gparamspecs.h		\
+	gsignal.h		\
+	gsourceclosure.h	\
+	gtype.h			\
+	gtypemodule.h		\
+	gtypeplugin.h		\
+	gvalue.h		\
+	gvaluearray.h		\
+	gvaluecollector.h	\
+	gvaluetypes.h		\
+	gobjectnotifyqueue.c	\
+	gmarshal.h
+
 gobjectalias.h: gobject.symbols
 	perl makegobjectalias.pl < gobject.symbols > gobjectalias.h
 
@@ -68,6 +87,7 @@
 libgobject-2.0-0.dll : $(gobject_OBJECTS) gobject.def gobject.res
 	$(CC) $(CFLAGS) -Fm -LD -Fe$@ $(gobject_OBJECTS) gobject.res \
 	..\glib\glib-2.0.lib $(LDFLAGS) /implib:gobject-2.0.lib /def:gobject.def
+	mt -outputresource:$@ -manifest $@.manifest
 
 gobject-2.12s.lib : $(gobject_OBJECTS) 
 	lib /out:$@ $(gobject_OBJECTS)
@@ -76,10 +96,12 @@
 glib-genmarshal.exe : glib-genmarshal.c gmarshal.strings
 	$(CC) -Fe$@ $(CFLAGS) -UGOBJECT_COMPILATION glib-genmarshal.c \
 	..\glib\glib-2.12s.lib user32.lib advapi32.lib ole32.lib shell32.lib $(INTL_LIBS) $(LIBICONV_LIBS)
+	mt -outputresource:$@ -manifest $@.manifest
 
 gobject-query.exe : gobject-query.c libgobject-2.0-0.dll
 	$(CC) -Fe$@ $(CFLAGS) -UGOBJECT_COMPILATION gobject-query.c \
 	..\glib\glib-2.0.lib gobject-2.0.lib user32.lib advapi32.lib $(INTL_LIBS) $(LIBICONV_LIBS)
+	mt -outputresource:$@ -manifest $@.manifest
 
 gmarshal.strings : gmarshal.list
 	perl marshal-genstrings.pl > gmarshal.strings
@@ -87,3 +109,11 @@
 .c.exe :
 	$(CC) $(CFLAGS) -c $<
 	$(CC) $(CFLAGS) -Fe$@ $< gobject-2.0.lib ..\glib\glib-2.0.lib ..\gmodule\gmodule-2.0.lib $(LDFLAGS) user32.lib /subsystem:console
+
+install:
+	-mkdir $(VCLIBS_PREFIX)\bin
+	copy libgobject-2.0-0.dll $(VCLIBS_PREFIX)\bin
+	-mkdir $(VCLIBS_PREFIX)\lib
+	copy gobject-2.0.lib $(VCLIBS_PREFIX)\lib
+	-mkdir $(VCLIBS_PREFIX)\include\glib-2.0\gobject
+	for %h in ($(gobject_HEADERS)) do copy %h $(VCLIBS_PREFIX)\include\glib-2.0\gobject
diff -urN original-libraries/glib-2.12.6/gthread/makefile.msc glib-2.12.6/gthread/makefile.msc
--- original-libraries/glib-2.12.6/gthread/makefile.msc	2006-12-20 17:41:12.000000000 +0100
+++ glib-2.12.6/gthread/makefile.msc	2007-02-01 16:23:23.860095000 +0100
@@ -24,3 +24,10 @@
 libgthread-2.0-0.dll : $(gthread_OBJECTS) gthread.def gthread.res
 	$(CC) $(CFLAGS) -LD -Fe$@ $(gthread_OBJECTS) gthread.res \
 	..\glib\glib-2.0.lib $(DEPCLIBS) user32.lib $(LDFLAGS) /implib:gthread-2.0.lib /def:gthread.def
+	mt -outputresource:$@ -manifest $@.manifest
+
+install:
+	-mkdir $(VCLIBS_PREFIX)\bin
+	copy libgthread-2.0-0.dll $(VCLIBS_PREFIX)\bin
+	-mkdir $(VCLIBS_PREFIX)\lib
+	copy gthread-2.0.lib $(VCLIBS_PREFIX)\lib
diff -urN original-libraries/glib-2.12.6/makefile.msc glib-2.12.6/makefile.msc
--- original-libraries/glib-2.12.6/makefile.msc	2001-09-21 22:48:58.000000000 +0200
+++ glib-2.12.6/makefile.msc	2007-02-01 16:31:57.704662500 +0100
@@ -1,6 +1,8 @@
 ## Makefile for building the GLib dlls with Microsoft C
 ## Use: nmake -f makefile.msc
 
+!INCLUDE build\win32\module.defs
+
 PARTS = glib gmodule gthread gobject tests
 
 all : \
@@ -26,3 +28,12 @@
 
 glibconfig.h: glibconfig.h.win32
 	copy glibconfig.h.win32 glibconfig.h
+
+install: sub-install local-install
+
+local-install:
+	-mkdir $(VCLIBS_PREFIX)\lib\glib-2.0\include
+	copy glibconfig.h $(VCLIBS_PREFIX)\lib\glib-2.0\include
+
+sub-install: 
+	for %d in ($(PARTS)) do nmake -nologo -f makefile.msc sub-one THIS=%d TARGET=install
diff -urN original-libraries/glib-2.12.6/tests/makefile.msc glib-2.12.6/tests/makefile.msc
--- original-libraries/glib-2.12.6/tests/makefile.msc	2006-12-20 17:41:12.000000000 +0100
+++ glib-2.12.6/tests/makefile.msc	2007-02-01 16:33:14.910258000 +0100
@@ -67,3 +67,5 @@
 
 check:	all
 	for %p in ($(TESTS)) do set PATH=..\glib;..\gmodule;..\gobject;..\gthread;%PATH% && %p
+
+install:
