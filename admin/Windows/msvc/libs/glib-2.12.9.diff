diff -urN -x gmarshal.c -x gmarshal.h glib-2.12.9/glib/dirent.c glib-2.12.9-new/glib/dirent.c
--- glib-2.12.9/glib/dirent.c	1970-01-01 01:00:00.000000000 +0100
+++ glib-2.12.9-new/glib/dirent.c	2007-07-19 16:58:10.999899200 +0200
@@ -0,0 +1,340 @@
+/*
+ * dirent.c
+ * This file has no copyright assigned and is placed in the Public Domain.
+ * This file is a part of the mingw-runtime package.
+ * No warranty is given; refer to the file DISCLAIMER within the package.
+ *
+ * Derived from DIRLIB.C by Matt J. Weinstein
+ * This note appears in the DIRLIB.H
+ * DIRLIB.H by M. J. Weinstein   Released to public domain 1-Jan-89
+ *
+ * Updated by Jeremy Bettis <jeremy@hksys.com>
+ * Significantly revised and rewinddir, seekdir and telldir added by Colin
+ * Peters <colin@fu.is.saga-u.ac.jp>
+ *	
+ */
+
+#include <stdlib.h>
+#include <errno.h>
+#include <string.h>
+#include <io.h>
+#include <direct.h>
+#include <dirent.h>
+
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h> /* for GetFileAttributes */
+
+#include <tchar.h>
+
+#ifdef _UNICODE
+#define _tdirent	_wdirent
+#define _TDIR 		_WDIR
+#define _topendir	_wopendir
+#define _tclosedir	_wclosedir
+#define _treaddir	_wreaddir
+#define _trewinddir	_wrewinddir
+#define _ttelldir	_wtelldir
+#define _tseekdir	_wseekdir
+#else
+#define _tdirent	dirent
+#define _TDIR 		DIR
+#define _topendir	opendir
+#define _tclosedir	closedir
+#define _treaddir	readdir
+#define _trewinddir	rewinddir
+#define _ttelldir	telldir
+#define _tseekdir	seekdir
+#endif
+
+#define SUFFIX	_T("*")
+#define	SLASH	_T("\\")
+
+
+/*
+ * opendir
+ *
+ * Returns a pointer to a DIR structure appropriately filled in to begin
+ * searching a directory.
+ */
+_TDIR *
+_topendir (const _TCHAR *szPath)
+{
+  _TDIR *nd;
+  unsigned int rc;
+  _TCHAR szFullPath[MAX_PATH];
+	
+  errno = 0;
+
+  if (!szPath)
+    {
+      errno = EFAULT;
+      return (_TDIR *) 0;
+    }
+
+  if (szPath[0] == _T('\0'))
+    {
+      errno = ENOTDIR;
+      return (_TDIR *) 0;
+    }
+
+  /* Attempt to determine if the given path really is a directory. */
+  rc = GetFileAttributes (szPath);
+  if (rc == (unsigned int)-1)
+    {
+      /* call GetLastError for more error info */
+      errno = ENOENT;
+      return (_TDIR *) 0;
+    }
+  if (!(rc & FILE_ATTRIBUTE_DIRECTORY))
+    {
+      /* Error, entry exists but not a directory. */
+      errno = ENOTDIR;
+      return (_TDIR *) 0;
+    }
+
+  /* Make an absolute pathname.  */
+  _tfullpath (szFullPath, szPath, MAX_PATH);
+
+  /* Allocate enough space to store DIR structure and the complete
+   * directory path given. */
+  nd = (_TDIR *) malloc (sizeof (_TDIR) + (_tcslen(szFullPath) + _tcslen (SLASH) +
+			 _tcslen(SUFFIX) + 1) * sizeof(_TCHAR));
+
+  if (!nd)
+    {
+      /* Error, out of memory. */
+      errno = ENOMEM;
+      return (_TDIR *) 0;
+    }
+
+  /* Create the search expression. */
+  _tcscpy (nd->dd_name, szFullPath);
+
+  /* Add on a slash if the path does not end with one. */
+  if (nd->dd_name[0] != _T('\0') &&
+      nd->dd_name[_tcslen (nd->dd_name) - 1] != _T('/') &&
+      nd->dd_name[_tcslen (nd->dd_name) - 1] != _T('\\'))
+    {
+      _tcscat (nd->dd_name, SLASH);
+    }
+
+  /* Add on the search pattern */
+  _tcscat (nd->dd_name, SUFFIX);
+
+  /* Initialize handle to -1 so that a premature closedir doesn't try
+   * to call _findclose on it. */
+  nd->dd_handle = -1;
+
+  /* Initialize the status. */
+  nd->dd_stat = 0;
+
+  /* Initialize the dirent structure. ino and reclen are invalid under
+   * Win32, and name simply points at the appropriate part of the
+   * findfirst_t structure. */
+  nd->dd_dir.d_ino = 0;
+  nd->dd_dir.d_reclen = 0;
+  nd->dd_dir.d_namlen = 0;
+  memset (nd->dd_dir.d_name, 0, FILENAME_MAX);
+
+  return nd;
+}
+
+
+/*
+ * readdir
+ *
+ * Return a pointer to a dirent structure filled with the information on the
+ * next entry in the directory.
+ */
+struct _tdirent *
+_treaddir (_TDIR * dirp)
+{
+  errno = 0;
+
+  /* Check for valid DIR struct. */
+  if (!dirp)
+    {
+      errno = EFAULT;
+      return (struct _tdirent *) 0;
+    }
+
+  if (dirp->dd_stat < 0)
+    {
+      /* We have already returned all files in the directory
+       * (or the structure has an invalid dd_stat). */
+      return (struct _tdirent *) 0;
+    }
+  else if (dirp->dd_stat == 0)
+    {
+      /* We haven't started the search yet. */
+      /* Start the search */
+      dirp->dd_handle = _tfindfirst (dirp->dd_name, &(dirp->dd_dta));
+
+  	  if (dirp->dd_handle == -1)
+	{
+	  /* Whoops! Seems there are no files in that
+	   * directory. */
+	  dirp->dd_stat = -1;
+	}
+      else
+	{
+	  dirp->dd_stat = 1;
+	}
+    }
+  else
+    {
+      /* Get the next search entry. */
+      if (_tfindnext (dirp->dd_handle, &(dirp->dd_dta)))
+	{
+	  /* We are off the end or otherwise error.	
+	     _findnext sets errno to ENOENT if no more file
+	     Undo this. */
+	  DWORD winerr = GetLastError();
+	  if (winerr == ERROR_NO_MORE_FILES)
+	    errno = 0;	
+	  _findclose (dirp->dd_handle);
+	  dirp->dd_handle = -1;
+	  dirp->dd_stat = -1;
+	}
+      else
+	{
+	  /* Update the status to indicate the correct
+	   * number. */
+	  dirp->dd_stat++;
+	}
+    }
+
+  if (dirp->dd_stat > 0)
+    {
+      /* Successfully got an entry. Everything about the file is
+       * already appropriately filled in except the length of the
+       * file name. */
+      dirp->dd_dir.d_namlen = _tcslen (dirp->dd_dta.name);
+      _tcscpy (dirp->dd_dir.d_name, dirp->dd_dta.name);
+      return &dirp->dd_dir;
+    }
+
+  return (struct _tdirent *) 0;
+}
+
+
+/*
+ * closedir
+ *
+ * Frees up resources allocated by opendir.
+ */
+int
+_tclosedir (_TDIR * dirp)
+{
+  int rc;
+
+  errno = 0;
+  rc = 0;
+
+  if (!dirp)
+    {
+      errno = EFAULT;
+      return -1;
+    }
+
+  if (dirp->dd_handle != -1)
+    {
+      rc = _findclose (dirp->dd_handle);
+    }
+
+  /* Delete the dir structure. */
+  free (dirp);
+
+  return rc;
+}
+
+/*
+ * rewinddir
+ *
+ * Return to the beginning of the directory "stream". We simply call findclose
+ * and then reset things like an opendir.
+ */
+void
+_trewinddir (_TDIR * dirp)
+{
+  errno = 0;
+
+  if (!dirp)
+    {
+      errno = EFAULT;
+      return;
+    }
+
+  if (dirp->dd_handle != -1)
+    {
+      _findclose (dirp->dd_handle);
+    }
+
+  dirp->dd_handle = -1;
+  dirp->dd_stat = 0;
+}
+
+/*
+ * telldir
+ *
+ * Returns the "position" in the "directory stream" which can be used with
+ * seekdir to go back to an old entry. We simply return the value in stat.
+ */
+long
+_ttelldir (_TDIR * dirp)
+{
+  errno = 0;
+
+  if (!dirp)
+    {
+      errno = EFAULT;
+      return -1;
+    }
+  return dirp->dd_stat;
+}
+
+/*
+ * seekdir
+ *
+ * Seek to an entry previously returned by telldir. We rewind the directory
+ * and call readdir repeatedly until either dd_stat is the position number
+ * or -1 (off the end). This is not perfect, in that the directory may
+ * have changed while we weren't looking. But that is probably the case with
+ * any such system.
+ */
+void
+_tseekdir (_TDIR * dirp, long lPos)
+{
+  errno = 0;
+
+  if (!dirp)
+    {
+      errno = EFAULT;
+      return;
+    }
+
+  if (lPos < -1)
+    {
+      /* Seeking to an invalid position. */
+      errno = EINVAL;
+      return;
+    }
+  else if (lPos == -1)
+    {
+      /* Seek past end. */
+      if (dirp->dd_handle != -1)
+	{
+	  _findclose (dirp->dd_handle);
+	}
+      dirp->dd_handle = -1;
+      dirp->dd_stat = -1;
+    }
+  else
+    {
+      /* Rewind and read forward to the appropriate index. */
+      _trewinddir (dirp);
+
+      while ((dirp->dd_stat < lPos) && _treaddir (dirp))
+	;
+    }
+}
diff -urN -x gmarshal.c -x gmarshal.h glib-2.12.9/glib/dirent.h glib-2.12.9-new/glib/dirent.h
--- glib-2.12.9/glib/dirent.h	1970-01-01 01:00:00.000000000 +0100
+++ glib-2.12.9-new/glib/dirent.h	2007-07-19 16:58:11.031150400 +0200
@@ -0,0 +1,121 @@
+/*
+ * DIRENT.H (formerly DIRLIB.H)
+ * This file has no copyright assigned and is placed in the Public Domain.
+ * This file is a part of the mingw-runtime package.
+ * No warranty is given; refer to the file DISCLAIMER within the package.
+ *
+ */
+#ifndef _DIRENT_H_
+#define _DIRENT_H_
+
+#include <stdio.h>
+#include <io.h>
+
+#ifndef RC_INVOKED
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+struct dirent
+{
+	long		d_ino;		/* Always zero. */
+	unsigned short	d_reclen;	/* Always zero. */
+	unsigned short	d_namlen;	/* Length of name in d_name. */
+	char		d_name[FILENAME_MAX]; /* File name. */
+};
+
+/*
+ * This is an internal data structure. Good programmers will not use it
+ * except as an argument to one of the functions below.
+ * dd_stat field is now int (was short in older versions).
+ */
+typedef struct
+{
+	/* disk transfer area for this dir */
+	struct _finddata_t	dd_dta;
+
+	/* dirent struct to return from dir (NOTE: this makes this thread
+	 * safe as long as only one thread uses a particular DIR struct at
+	 * a time) */
+	struct dirent		dd_dir;
+
+	/* _findnext handle */
+	long			dd_handle;
+
+	/*
+         * Status of search:
+	 *   0 = not started yet (next entry to read is first entry)
+	 *  -1 = off the end
+	 *   positive = 0 based index of next entry
+	 */
+	int			dd_stat;
+
+	/* given path for dir with search pattern (struct is extended) */
+	char			dd_name[1];
+} DIR;
+
+DIR* __cdecl opendir (const char*);
+struct dirent* __cdecl readdir (DIR*);
+int __cdecl closedir (DIR*);
+void __cdecl rewinddir (DIR*);
+long __cdecl telldir (DIR*);
+void __cdecl seekdir (DIR*, long);
+
+
+/* wide char versions */
+
+struct _wdirent
+{
+	long		d_ino;		/* Always zero. */
+	unsigned short	d_reclen;	/* Always zero. */
+	unsigned short	d_namlen;	/* Length of name in d_name. */
+	wchar_t		d_name[FILENAME_MAX]; /* File name. */
+};
+
+/*
+ * This is an internal data structure. Good programmers will not use it
+ * except as an argument to one of the functions below.
+ */
+typedef struct
+{
+	/* disk transfer area for this dir */
+	struct _wfinddata_t	dd_dta;
+
+	/* dirent struct to return from dir (NOTE: this makes this thread
+	 * safe as long as only one thread uses a particular DIR struct at
+	 * a time) */
+	struct _wdirent		dd_dir;
+
+	/* _findnext handle */
+	long			dd_handle;
+
+	/*
+         * Status of search:
+	 *   0 = not started yet (next entry to read is first entry)
+	 *  -1 = off the end
+	 *   positive = 0 based index of next entry
+	 */
+	int			dd_stat;
+
+	/* given path for dir with search pattern (struct is extended) */
+	wchar_t			dd_name[1];
+} _WDIR;
+
+
+
+_WDIR* __cdecl _wopendir (const wchar_t*);
+struct _wdirent*  __cdecl _wreaddir (_WDIR*);
+int __cdecl _wclosedir (_WDIR*);
+void __cdecl _wrewinddir (_WDIR*);
+long __cdecl _wtelldir (_WDIR*);
+void __cdecl _wseekdir (_WDIR*, long);
+
+
+#ifdef	__cplusplus
+}
+#endif
+
+#endif	/* Not RC_INVOKED */
+
+#endif	/* Not _DIRENT_H_ */
diff -urN -x gmarshal.c -x gmarshal.h glib-2.12.9/glib/makefile.msc glib-2.12.9-new/glib/makefile.msc
--- glib-2.12.9/glib/makefile.msc	2007-01-17 00:50:30.000000000 +0100
+++ glib-2.12.9-new/glib/makefile.msc	2007-07-19 16:56:11.635940800 +0200
@@ -3,12 +3,12 @@
 
 TOP = ..\..
 
-!INCLUDE ..\build\win32\make.msc
+!INCLUDE ..\win32.msc
 
 ################################################################
 
 INCLUDES = -FImsvc_recommended_pragmas.h -I . -I ..
-DEFINES = -DHAVE_CONFIG_H -DGLIB_COMPILATION -DG_LOG_DOMAIN=\"GLib\" -DG_ENABLE_DEBUG
+DEFINES = -DHAVE_CONFIG_H -DGLIB_COMPILATION -DG_LOG_DOMAIN=\"GLib\" -DG_ENABLE_DEBUG -D_CRT_SECURE_NO_DEPRECATE
 DEPCFLAGS = -Zm400 $(INTL_CFLAGS) $(LIBICONV_CFLAGS) $(DIRENT_CFLAGS)
 
 all :				\
@@ -81,7 +81,69 @@
 	gutf8.obj		\
 	gutils.obj		\
 	gwin32.obj		\
-	localcharset.obj
+	localcharset.obj	\
+	dirent.obj		\
+	wdirent.obj
+
+glibinclude_HEADERS =   \
+	glib-object.h	\
+	glib.h
+
+glibsubinclude_HEADERS =   \
+	galloca.h	\
+	garray.h	\
+	gasyncqueue.h	\
+	gatomic.h	\
+	gbacktrace.h	\
+	gbase64.h	\
+	gbookmarkfile.h \
+	gcache.h	\
+	gcompletion.h	\
+	gconvert.h	\
+	gdataset.h	\
+	gdate.h		\
+	gdir.h		\
+	gerror.h	\
+	gfileutils.h	\
+	ghash.h		\
+	ghook.h		\
+	gi18n.h		\
+	gi18n-lib.h	\
+	giochannel.h	\
+	gkeyfile.h 	\
+	glist.h		\
+	gmacros.h	\
+	gmain.h		\
+	gmappedfile.h	\
+	gmarkup.h	\
+	gmem.h		\
+	gmessages.h	\
+	gnode.h		\
+	goption.h	\
+	gpattern.h	\
+	gprimes.h	\
+	gqsort.h	\
+	gquark.h	\
+	gqueue.h	\
+	grand.h		\
+	grel.h		\
+	gscanner.h	\
+	gshell.h	\
+	gslice.h	\
+	gslist.h	\
+	gspawn.h	\
+	gstdio.h	\
+	gstrfuncs.h	\
+	gstring.h	\
+	gthread.h	\
+	gthreadpool.h	\
+	gtimer.h	\
+	gtree.h		\
+	gtypes.h	\
+	gunicode.h	\
+	gutils.h	\
+	gwin32.h	\
+	gprintf.h
 
 ..\glibconfig.h: ..\glibconfig.h.win32
 	copy ..\glibconfig.h.win32 ..\glibconfig.h
@@ -101,6 +163,8 @@
 glib.def: glib.symbols
 	echo EXPORTS > glib.def
 	cl /EP -DINCLUDE_VARIABLES -DG_OS_WIN32 -DINCLUDE_INTERNAL_SYMBOLS -DALL_FILES glib.symbols >> glib.def
+	sed -e "s/G_GNUC_[A-Z_]\+\((.*)\)\?//g" glib.def > ttt
+	move /y ttt glib.def
 
 glib.res : glib.rc
 	rc -DBUILDNUMBER=0 -r -fo glib.res glib.rc
@@ -116,13 +180,31 @@
 	$(CC) $(CFLAGS) -LD -Fe$@ $(glib_OBJECTS) glib.res $(LIBICONV_LIBS) $(INTL_LIBS) \
 	gnulib\gnulib.lib $(DIRENT_LIBS) user32.lib advapi32.lib shell32.lib wsock32.lib ole32.lib ws2_32.lib \
 	$(LDFLAGS) /implib:glib-2.0.lib /def:glib.def
+	mt -outputresource:$@ -manifest $@.manifest
 
 gspawn-win32-helper.exe : gspawn-win32-helper.c libglib-2.0-0.dll
 	$(CC) $(CFLAGS) -Fe$@ -DG_LOG_DOMAIN=\"gspawn-win32-helper\" gspawn-win32-helper.c glib-2.0.lib $(LDFLAGS) /subsystem:windows user32.lib
+	mt -outputresource:$@ -manifest $@.manifest
 
 ################ other stuff
 
-clean::
-	del ..\config.h
-	del ..\glibconfig.h
+install:
+	-mkdir $(PREFIX)\bin
+	copy libglib-2.0-0.dll $(PREFIX)\bin
+	-mkdir $(PREFIX)\lib
+	copy glib-2.0.lib $(PREFIX)\lib
+	-mkdir $(PREFIX)\include\glib-2.0
+	for %h in ($(glibinclude_HEADERS)) do copy %h $(PREFIX)\include\glib-2.0
+	-mkdir $(PREFIX)\include\glib-2.0\glib
+	for %h in ($(glibsubinclude_HEADERS)) do copy %h $(PREFIX)\include\glib-2.0\glib
+	-mkdir $(PREFIX)\lib\glib-2.0\include
+	copy ..\glibconfig.h $(PREFIX)\lib\glib-2.0\include
 
+clean::
+	-del /q ..\config.h
+	-del /q ..\glibconfig.h
+	-del /q localcharset.c
+	-del /q *.obj *.manifest *.dll *.lib *.exp
+	-del /q gnulib\gnulib.lib gnulib\*.obj
+	-del /q glib.res glib.def
+	-del /q gspawn-win32-helper.exe
diff -urN -x gmarshal.c -x gmarshal.h glib-2.12.9/glib/wdirent.c glib-2.12.9-new/glib/wdirent.c
--- glib-2.12.9/glib/wdirent.c	1970-01-01 01:00:00.000000000 +0100
+++ glib-2.12.9-new/glib/wdirent.c	2007-07-19 16:58:13.843758400 +0200
@@ -0,0 +1,3 @@
+#define _UNICODE 1
+#define UNICODE 1
+#include "dirent.c"
diff -urN -x gmarshal.c -x gmarshal.h glib-2.12.9/gmodule/makefile.msc glib-2.12.9-new/gmodule/makefile.msc
--- glib-2.12.9/gmodule/makefile.msc	2007-01-17 00:50:33.000000000 +0100
+++ glib-2.12.9-new/gmodule/makefile.msc	2007-07-19 16:41:36.183431200 +0200
@@ -3,7 +3,7 @@
 
 TOP = ..\..
 
-!INCLUDE ..\build\win32\make.msc
+!INCLUDE ..\win32.msc
 
 ################################################################
 
@@ -26,6 +26,17 @@
 libgmodule-2.0-0.dll : $(gmodule_OBJECTS) gmodule.def gmodule.res
 	$(CC) $(CFLAGS) -LD -Fe$@ $(gmodule_OBJECTS) gmodule.res \
 	..\glib\glib-2.0.lib $(LDFLAGS) /implib:gmodule-2.0.lib /def:gmodule.def
+	mt -outputresource:$@ -manifest $@.manifest
 
 clean::
-	del gmoduleconf.h
+	-del /q gmoduleconf.h
+	-del /q lib*.dll gmodule-2.0.lib gmodule-2.0.exp
+	-del /q *.obj gmodule.res *.manifest
+
+install:
+	-mkdir $(PREFIX)\bin
+	copy libgmodule-2.0-0.dll $(PREFIX)\bin
+	-mkdir $(PREFIX)\lib
+	copy gmodule-2.0.lib $(PREFIX)\lib
+	-mkdir $(PREFIX)\include\glib-2.0
+	copy gmodule.h $(PREFIX)\include\glib-2.0
diff -urN -x gmarshal.c -x gmarshal.h glib-2.12.9/gobject/makefile.msc glib-2.12.9-new/gobject/makefile.msc
--- glib-2.12.9/gobject/makefile.msc	2007-01-17 00:50:31.000000000 +0100
+++ glib-2.12.9-new/gobject/makefile.msc	2007-07-19 16:54:28.770406400 +0200
@@ -3,7 +3,7 @@
 
 TOP = ..\..
 
-!INCLUDE ..\build\win32\make.msc
+!INCLUDE ..\win32.msc
 
 ################################################################
 
@@ -22,7 +22,6 @@
 	gmarshal.strings \
 	gobject-query.exe \
 	libgobject-2.0-0.dll	\
-	gobject-2.12s.lib \
 	testgobject.exe
 
 gobject_OBJECTS =		\
@@ -42,6 +41,25 @@
 	gvaluetypes.obj	\
 	gvaluetransform.obj
 
+gobject_public_h_sources = \
+	gboxed.h		\
+	gclosure.h		\
+	genums.h		\
+	gobject.h		\
+	gparam.h		\
+	gparamspecs.h		\
+	gsignal.h		\
+	gsourceclosure.h	\
+	gtype.h			\
+	gtypemodule.h		\
+	gtypeplugin.h		\
+	gvalue.h		\
+	gvaluearray.h		\
+	gvaluecollector.h	\
+	gvaluetypes.h		\
+	gobjectnotifyqueue.c	\
+	gmarshal.h
+
 gobjectalias.h: gobject.symbols
 	perl makegobjectalias.pl < gobject.symbols > gobjectalias.h
 
@@ -51,6 +69,8 @@
 gobject.def: gobject.symbols
 	echo EXPORTS > gobject.def
 	cl /EP -DINCLUDE_VARIABLES -DG_OS_WIN32 -DALL_FILES gobject.symbols >> gobject.def
+	sed -e "s/G_GNUC_[A-Z_]\+\((.*)\)\?//g" $@ > ttt
+	move /y ttt $@
 
 gobject.res : gobject.rc
 	rc -DBUILDNUMBER=0 -r -fo gobject.res gobject.rc
@@ -68,6 +88,7 @@
 libgobject-2.0-0.dll : $(gobject_OBJECTS) gobject.def gobject.res
 	$(CC) $(CFLAGS) -Fm -LD -Fe$@ $(gobject_OBJECTS) gobject.res \
 	..\glib\glib-2.0.lib $(LDFLAGS) /implib:gobject-2.0.lib /def:gobject.def
+	mt -outputresource:$@ -manifest $@.manifest
 
 gobject-2.12s.lib : $(gobject_OBJECTS) 
 	lib /out:$@ $(gobject_OBJECTS)
@@ -76,10 +97,12 @@
 glib-genmarshal.exe : glib-genmarshal.c gmarshal.strings
 	$(CC) -Fe$@ $(CFLAGS) -UGOBJECT_COMPILATION glib-genmarshal.c \
 	..\glib\glib-2.12s.lib user32.lib advapi32.lib ole32.lib shell32.lib $(INTL_LIBS) $(LIBICONV_LIBS)
+	mt -outputresource:$@ -manifest $@.manifest
 
 gobject-query.exe : gobject-query.c libgobject-2.0-0.dll
 	$(CC) -Fe$@ $(CFLAGS) -UGOBJECT_COMPILATION gobject-query.c \
 	..\glib\glib-2.0.lib gobject-2.0.lib user32.lib advapi32.lib $(INTL_LIBS) $(LIBICONV_LIBS)
+	mt -outputresource:$@ -manifest $@.manifest
 
 gmarshal.strings : gmarshal.list
 	perl marshal-genstrings.pl > gmarshal.strings
@@ -87,3 +110,16 @@
 .c.exe :
 	$(CC) $(CFLAGS) -c $<
 	$(CC) $(CFLAGS) -Fe$@ $< gobject-2.0.lib ..\glib\glib-2.0.lib ..\gmodule\gmodule-2.0.lib $(LDFLAGS) user32.lib /subsystem:console
+	mt -outputresource:$@ -manifest $@.manifest
+
+clean:
+	-del /q *.obj *.manifest *.exe *.exp *.lib *.dll
+	-del /q gobject.res gobject.def libgobject-2.0-0.map xgen-gmh
+
+install:
+	-mkdir $(PREFIX)\bin
+	copy libgobject-2.0-0.dll $(PREFIX)\bin
+	-mkdir $(PREFIX)\lib
+	copy gobject-2.0.lib $(PREFIX)\lib
+	-mkdir $(PREFIX)\include\glib-2.0\gobject
+	for %h in ($(gobject_public_h_sources)) do copy %h $(PREFIX)\include\glib-2.0\gobject
diff -urN -x gmarshal.c -x gmarshal.h glib-2.12.9/gthread/makefile.msc glib-2.12.9-new/gthread/makefile.msc
--- glib-2.12.9/gthread/makefile.msc	2007-01-17 00:50:34.000000000 +0100
+++ glib-2.12.9-new/gthread/makefile.msc	2007-07-19 16:54:56.037776400 +0200
@@ -3,7 +3,7 @@
 
 TOP = ..\..
 
-!INCLUDE ..\build\win32\make.msc
+!INCLUDE ..\win32.msc
 
 ################################################################
 
@@ -24,3 +24,13 @@
 libgthread-2.0-0.dll : $(gthread_OBJECTS) gthread.def gthread.res
 	$(CC) $(CFLAGS) -LD -Fe$@ $(gthread_OBJECTS) gthread.res \
 	..\glib\glib-2.0.lib $(DEPCLIBS) user32.lib $(LDFLAGS) /implib:gthread-2.0.lib /def:gthread.def
+	mt -outputresource:$@ -manifest $@.manifest
+
+clean:
+	-del /q *.dll *.lib *.exp *.obj *.manifest gthread.res
+
+install:
+	-mkdir $(PREFIX)\bin
+	copy libgthread-2.0-0.dll $(PREFIX)\bin
+	-mkdir $(PREFIX)\lib
+	copy gthread-2.0.lib $(PREFIX)\lib
diff -urN -x gmarshal.c -x gmarshal.h glib-2.12.9/makefile.msc glib-2.12.9-new/makefile.msc
--- glib-2.12.9/makefile.msc	2007-01-17 00:24:39.000000000 +0100
+++ glib-2.12.9-new/makefile.msc	2007-07-19 16:48:40.395563700 +0200
@@ -6,12 +6,14 @@
 all : \
 	config.h \
 	glibconfig.h \
+	win32.msc \
 	sub-all
 
 sub-all: 
 	for %d in ($(PARTS)) do nmake -nologo -f makefile.msc sub-one THIS=%d TARGET=all
 
 clean : sub-clean
+	del /q win32.msc
 
 sub-clean:
 	for %d in ($(PARTS)) do nmake -nologo -f makefile.msc sub-one THIS=%d TARGET=clean
@@ -26,3 +28,17 @@
 
 glibconfig.h: glibconfig.h.win32
 	copy glibconfig.h.win32 glibconfig.h
+
+win32.msc: makefile.msc
+	@echo CFLAGS = -MD -O2 $$(DEFINES) $$(DEPCFLAGS) $$(INCLUDES) > $@
+	@echo LDFLAGS = /link >> $@
+	@echo DIRENT_LIBS = >> $@
+	@echo DIRENT_FLAGS = >> $@
+	@echo INTL_LIBS = intl.lib >> $@
+	@echo LIBICONV_LIBS = iconv.lib >> $@
+	@echo PREFIX = D:\Temp\glib >> $@
+
+install: sub-install
+
+sub-install: 
+	for %d in ($(PARTS)) do nmake -nologo -f makefile.msc sub-one THIS=%d TARGET=install
diff -urN -x gmarshal.c -x gmarshal.h glib-2.12.9/tests/makefile.msc glib-2.12.9-new/tests/makefile.msc
--- glib-2.12.9/tests/makefile.msc	2007-01-17 00:50:37.000000000 +0100
+++ glib-2.12.9-new/tests/makefile.msc	2007-07-19 16:55:19.476776400 +0200
@@ -3,7 +3,7 @@
 
 TOP = ..\..
 
-!INCLUDE ..\build\win32\make.msc
+!INCLUDE ..\win32.msc
 
 ################################################################
 
@@ -67,3 +67,9 @@
 
 check:	all
 	for %p in ($(TESTS)) do set PATH=..\glib;..\gmodule;..\gobject;..\gthread;%PATH% && %p
+
+clean:
+	-del /q *.exe *.manifest *.obj *.exp *.dll *.lib
+	-del /q iochannel-test-outfile
+
+install:
