md5="6c927b02e1193c16d6e6704c6be834b6";rev="4142";by="Jorge Barros de Abreu <ficmatin01 at skipthis solar dot com dot br>"
-*- texinfo -*-
@deftypefn {Fun@value{cedilha}@~ao Carreg@'avel} {[@var{x}, @var{xdot}, @var{t_out}, @var{istat}, @var{msg}] =} dasrt (@var{fcn} [, @var{g}], @var{x_0}, @var{xdot_0}, @var{t} [, @var{t_crit}])
Resolve o conjunto de equa@,{c}@~oes diferenciais alg@'ebricas
@tex
$$ 0 = f (x, \dot{x}, t) $$
com
$$ x(t_0) = x_0, \dot{x}(t_0) = \dot{x}_0 $$
@end tex
@ifinfo

@example
0 = f (x, xdot, t)
@end example

com

@example
x(t_0) = x_0, xdot(t_0) = xdot_0
@end example

@end ifinfo
como o crit@'erio de parada funcional (resolvendo ra@'iz).

A solu@value{cedilha}@~ao @'e retornada nas matrizes @var{x} e @var{xdot},
com cada linha nas matrizes resultado correspondendo a um dos
elementos no vetor @var{t_out}.  O primeiro elemento de @var{t}
pode ser @math{t_0} e corresponde ao estado incial do
sistema @var{x_0} e sua derivada @var{xdot_0}, dessa forma a primeira
linha da sa@'ida @var{x} @'e @var{x_0} e a primeira linha
da sa@'ida @var{xdot} @'e @var{xdot_0}.

O vetor @var{t} fornece um limite superior para o comprimento do intervalo de
integra@,{c}@~ao.  Se a condi@,{c}@~ao de parada @'e atingida, o vetor
@var{t_out} ser@'a menor que @var{t}, e o elemento final de
@var{t_out} ser@'a o ponto no qual a condi@,{c}@~ao de parada foi atingida,
e pode n@~ao corresponder a qualquer elemento do vetor @var{t}.

O primeiro argumento, @var{fcn}, @'e uma seq@"u@^encia de caracteres ou um array de c@'elulas de seq@"u@^encia de caracteres ou
expl@'icita ou manipulador de fun@,{c}@~ao, que nomeia a fun@,{c}@~ao para chamar para calcular
o vetor de residuais para o conjunto de equa@,{c}@~oes.  Deve ter a forma

@example
@var{res} = f (@var{x}, @var{xdot}, @var{t})
@end example

@noindent
no qual @var{x}, @var{xdot}, e @var{res} s@~ao vetores, e @var{t} @'e um
escalar.

Se @var{fcn} @'e um array de seq@"u@^encia de caracteres de dois elementos, ou um array de c@'elulas de dois elementos,
o primeiro elemento nomeia a fun@,{c}@~ao @math{f} descrita acima, e o
segundo elemento nomeia a fun@,{c}@~ao para calcular o jacobiano modificado

@tex
$$
J = {\partial f \over \partial x}
  + c {\partial f \over \partial \dot{x}}
$$
@end tex
@ifinfo

@example
      df       df
jac = -- + c ------
      dx     d xdot
@end example

@end ifinfo

A fun@value{cedilha}@~ao Jacobiana modificada deve ter a forma

@example

@var{jac} = j (@var{x}, @var{xdot}, @var{t}, @var{c})

@end example

O segundo argumento opcional nomeia uma fun@value{cedilha}@~ao que define as
fun@value{cedilha}@~oes de restri@,{c}@~ao cujas ra@'izes s@~ao esperadas durante a integra@,{c}@~ao.
Essa fun@value{cedilha}@~ao deve ter a forma

@example
@var{g_out} = g (@var{x}, @var{t})
@end example

e retorna um vetor de valores da fun@value{cedilha}@~ao de restri@,{c}@~ao.
Se o valor de qualquer das fun@value{cedilha}@~oes de restri@,{c}@~ao muda de sinal, @sc{Dasrt}
tentar@'a parar a integra@,{c}@~ao no ponto de mudan@,{c}a de sinal.

Se o nome da fun@value{cedilha}@~ao restri@,{c}@~ao for omitido, @code{dasrt} resolve
o mesmo problema como @code{daspk} ou como @code{dassl}.

Note que pelo motivo de erros num@'ericos nas fun@value{cedilha}@~oes de restri@,{c}@~ao
devido a perda de algarismos significativos e erros de integra@,{c}@~ao, @sc{Dasrt} pode retornar falsas
ra@'izes, ou retornar a mesma ra@'iz em dois ou mais valores aproximadamente iguais a
@var{T}.  Se tais falsas ra@'izes forem suspeitadas, o usu@'ario pode considerar
menores toler@^ancias de erro ou maiores precis@~oes na avalia@,{c}@~ao das
fun@value{cedilha}@~oes de restri@,{c}@~ao.

Se uma ra@'iz de alguma fun@value{cedilha}@~ao de restri@,{c}@~ao define o fim do problema,
a entrada para @sc{Dasrt} pode nem ao menos permitir integra@,{c@~ao para um
ponto um pouco anterior a aquela ra@'iz, desse modo @sc{Dasrt} pode localizar a ra@'iz
atrav@'es de interpola@,{c}@~ao.

O terceiro e o quarto argumentos para @code{dasrt} especificam a condi@,{c}@~ao
inicial dos estados e suas derivadas, e o quarto argumento
especifica um vetor de tempos de sa@'ida no qual a solu@value{cedilha}@~ao @'e desejada,
incluindo o tempo correspondendo @`a condi@,{c}@~ao inicial.

Escolher estados inciais e derivadas n@~ao @'e estritamente requerido para
ser consistente.  Na pr@'atica, todavia, @sc{Dassl} n@~ao @'e muito boa em
determinar uma escolha consistente para voc@^e, ent@~ao isso fica melhor se voc@^e garantir que
o resultado do valor inicial na fun@value{cedilha}@~ao avalie para zero.

O sexto argumento @'e opcional, e pode ser usado para especificar um conjunto de
tempos limite para o resolvedor DAE.  Isso @'e @'util para
evitar dificuldades com singularidade e pontos onde existe uma
descontinuidade na derivada.

Ap@'os um c@'alculo conclu@'ido com sucesso, o valor de @var{istate} ser@'a
maior que zero (consistente com a vers@~ao Fortran de @sc{Dassl}).

Se o c@'alculo falhar, o valor de @var{istate} ser@'a
menor que zero e @var{msg} conter@'a informa@value{cedilha}@~ao adicional.

Voc@^e pode usar a fun@value{cedilha}@~ao @code{dasrt_options} para escolher par@^ametros
opcionais para @code{dasrt}.
@seealso{daspk, dasrt, lsode}
@end deftypefn
