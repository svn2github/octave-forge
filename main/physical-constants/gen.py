#! /usr/bin/python
##
## (C) 2007 Muthiah Annamalai
##
## Code is released under GNU GPL.
## should have received a copy of the GNU General Public License
## along with Octave; see the file COPYING.  If not, write to the Free
## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
## 02110-1301, USA.
##
##
## This is the code generator that works on the NIST file.
## 
##
import string
import time
import sys
from curses.ascii import *

def make_oct_func(name,Description,Val,Units,Uncertainity):
    print "## Copyright (C) 2007 Python Code Generator "
    print "##"
    print "## -- WARNING -- Autogenerated  - DONOT EDIT -"
    print "##"
    print "## This code is released under GPL"
    print """## You should have received a copy of the GNU General Public License
## along with Octave; see the file COPYING.  If not, write to the Free
## Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
## 02110-1301, USA."""
    print ""
    print "## -*- texinfo -*-"
    print "## @deftypefn {Function File} [@var{Val},@var{unit},@var{uncertanity}] {} "+ \
          string.upper(name) + "() "
    
    Description = "Returns the "+Description;
    while len(Description) > 0:
        print "## %s"%(Description[:80]);
        Description=Description[81:];
    print "## . Val="+Val + "  Units="+Units+" Uncertanity="+Uncertainity+". "
    print """## @var{Val} is actual value of the constant.
## @var{Unit} is a Units string.
## @var{uncertanity} is +/- value to constant."""    
    print "##"
    print "## Autogenerated on "+str(time.ctime())
    print "## from NIST database at  http://physics.nist.gov/constants "
    print "## @end deftypefn"
    print ""
    print """## Fundamental Physical Constants --- Complete Listing
## From:  http://physics.nist.gov/constants
## Source: Peter J. Mohr and Barry N. Taylor, CODATA Recommended Values of the 
## Fundamental Physical Constants: 2002, published in Rev. Mod. Phys.
## vol. 77(1) 1-107 (2005).
## Taken from: physics.nist.gov/cuu/Constants/Table/allascii.txt
##
    """
    print "function [Val,Unit,Uncertanity]=%s()"%(string.upper(name))
    print "\t Val = %s; "%(Val)
    print "\t Units = \"%s\";"%(Units)
    print "\t Uncertanity = %s;"%(Uncertainity)
    print "endfunction"
    print "%"
    print "%%!assert(%s,%s,eps)"%(string.upper(name),Val)
    print "%"
    
    

if __name__ == "__main__":
    x=file("nist-consts.txt");
    x=x.readlines();

    replace_dict={',':'_',
                  '/':'_per_',
                  '-':'_',
                  ' ':'_',
                  '.':'',
                  '_over_':'_by_',
                  '_relationship':''};
    uncert_dict={'(exact)':'0.0'};
    val_dict={' ':'',
              '.':''}
    
    PATH="./" #default path.
    ostd=sys.stdout;
    if len(sys.argv) > 1:
        PATH=sys.argv[1]+"/";

##print "1+1; ## avoids Octave thinking this is a separate script"
    for l in x:
    ## serves like a comment.
        Description=l[0:55].strip();

    ## function name
        name=Description;

    ## discard anything that dont have alphabets in beginning.
        idx=0;
        while  not isalpha(name[idx]):
            idx=idx+1;
        name=name[idx:]
            
    ## value 
        Val=l[55:77];
            
    ## Uncertanity field
        Uncertainity=l[77:77+22].strip().replace(" ","")
            
    ## create units.
        Units=l[99:-1].strip()
        
    ## replace names.
        for k,v in replace_dict.items():
            name=name.replace(k,v);
        if name.find("(") >= 0:
            name=name.split('(')[0]

    ## replace uncertanity values
        for k,v in val_dict.items():
            Val=Val.replace(k,v)

    ## replace uncertanity values
        for k,v in uncert_dict.items():
            Uncertainity=Uncertainity.replace(k,v)
        
        sys.stdout=open(PATH + string.upper(name)+".m","w");
    ## call function
    ##print "[%s],[%s],[%s],[%s]"%(name, Val, Uncertainity, Units)
        make_oct_func(name,Description,Val,Units,Uncertainity)
        sys.stdout.close()
        sys.stdout=ostd
        print string.upper(name)


##python ./gen.py > constants.m && octave -q constants.m
