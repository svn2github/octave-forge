@c -*- texinfo -*-

@c Copyright (C) 2008, 2009, 2010, 2011, 2012 Moreno Marzolla
@c
@c This file is part of the queueing toolbox, a Queueing Networks
@c analysis package for GNU Octave.
@c
@c The queueing toolbox is free software; you can redistribute it
@c and/or modify it under the terms of the GNU General Public License
@c as published by the Free Software Foundation; either version 3 of
@c the License, or (at your option) any later version.
@c
@c The queueing toolbox is distributed in the hope that it will be
@c useful, but WITHOUT ANY WARRANTY; without even the implied warranty
@c of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with the queueing toolbox; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@node Queueing Networks
@chapter Queueing Networks

@menu
* Introduction to QNs::                 A brief introduction to Queueing Networks.
* Generic Algorithms::                  High-level functions for QN analysis
* Algorithms for Product-Form QNs::     Functions to analyze product-form QNs
* Algorithms for non Product-form QNs:: Functions to analyze non product-form QNs
* Bounds on performance::               Functions to compute performance bounds
* Utility functions::                   Utility functions to compute miscellaneous quantities
@end menu

@cindex queueing networks

@c
@c INTRODUCTION
@c 
@node Introduction to QNs
@section Introduction to QNs

Queueing Networks (QN) are a very simple yet powerful modeling tool
which is used to analyze many kind of systems. In its simplest form, a
QN is made of @math{K} service centers. Each service center @math{i}
has a queue, which is connected to @math{m_i} (generally identical)
@emph{servers}. Customers (or requests) arrive at the service center,
and join the queue if there is a slot available. Then, requests are
served according to a (de)queueing policy. After service completes,
the requests leave the service center.

The service centers for which @math{m_i = \infty} are called
@emph{delay centers} or @emph{infinite servers}. If a service center
has infinite servers, of course each new request will find one server
available, so there will never be queueing.

Requests join the queue according to a @emph{queueing policy}, such as:

@table @strong

@item FCFS
First-Come-First-Served

@item LCFS-PR
Last-Come-First-Served, Preemptive Resume

@item PS
Processor Sharing

@item IS
Infinite Server, there is an infinite number of identical servers so
that each request always finds a server available, and there is no
queueing

@end table

A population of @emph{requests} or @emph{customers} arrives to the
system system, requesting service to the service centers.  The request
population may be @emph{open} or @emph{closed}. In open systems there
is an infinite population of requests. New customers arrive from
outside the system, and eventually leave the system. In closed systems
there is a fixed population of request which continuously interacts
with the system.

There might be a single class of requests, meaning that all requests
behave in the same way (e.g., they spend the same average time on each
particular server), or there might be multiple classes of requests.

@subsection Single class models

In single class models, all requests are indistinguishable and belong to
the same class. This means that every request has the same average
service time, and all requests move through the system with the same
routing probabilities.

@noindent @strong{Model Inputs}

@table @math

@item \lambda_i
External arrival rate to service center @math{i}.

@item \lambda
Overall external arrival rate to the whole system: @math{\lambda =
\sum_i \lambda_i}.

@item S_i
Average service time. @math{S_i} is the average service time on service
center @math{i}. In other words, @math{S_i} is the average time from the
instant in which a request is extracted from the queue and starts being
service, and the instant at which service finishes and the request moves
to another queue (or exits the system).

@item P_{i, j}
Routing probability matrix. @math{{\bf P} = P_{i, j}} is a @math{K
\times K} matrix such that @math{P_{i, j}} is the probability that a
request completing service at server @math{i} will move directly to
server @math{j}, The probability that a request leaves the system
after service at service center @math{i} is @math{1-\sum_{j=1}^K P_{i,
j}}.

@item V_i
Average number of visits. @math{V_i} is the average number of visits to
the service center @math{i}. This quantity will be described shortly.

@end table

@noindent @strong{Model Outputs}

@table @math

@item U_i
Service center utilization. @math{U_i} is the utilization of service
center @math{i}. The utilization is defined as the fraction of time in
which the resource is busy (i.e., the server is processing requests).

@item R_i
Average response time. @math{R_i} is the average response time of
service center @math{i}. The average response time is defined as the
average time between the arrival of a customer in the queue, and the
completion of service.

@item Q_i
Average number of customers. @math{Q_i} is the average number of
requests in service center @math{i}. This includes both the requests in
the queue, and the request being served.

@item X_i
Throughput. @math{X_i} is the throughput of service center @math{i}.
The throughput is defined as the ratio of job completions (i.e., average
number of jobs completed over a fixed interval of time).

@end table

@noindent Given these output parameters, additional performance measures can
be computed as follows:

@table @math

@item X
System throughput, @math{X = X_1 / V_1}

@item R
System response time, @math{R = \sum_{k=1}^K R_k V_k}

@item Q
Average number of requests in the system, @math{Q = N-XZ}

@end table

For open, single-class models, the scalar @math{\lambda} denotes the
external arrival rate of requests to the system. The average number of
visits satisfy the following equation:

@iftex
@tex
$$ V_j = P_{0, j} + \sum_{i=1}^K V_i P_{i, j} $$
@end tex
@end iftex
@ifnottex
@example
@group
                  K
                 ___
                \
V_j = P_(0, j) + >   V_i P_(i, j)
                /___
                 i=1
@end group
@end example
@end ifnottex

@noindent where @math{P_{0, j}} is the probability that an external 
arrival goes to service center @math{j}. If @math{\lambda_j} is the
external arrival rate to service center @math{j}, and @math{\lambda =
\sum_j \lambda_j} is the overall external arrival rate, then
@math{P_{0, j} = \lambda_j / \lambda}.

For closed models, the visit ratios satisfy the following equation:

@iftex
@tex
$$\eqalign{V_1 & = 1 \cr
           V_j & = \sum_{i=1}^K V_i P_{i, j}} $$
@end tex
@end iftex
@ifnottex
@example

V_1 = 1

        K
       ___
      \
V_j =  >   V_i P_(i, j)
      /___
       i=1

@end example
@end ifnottex

@subsection Multiple class models

In multiple class QN models, we assume that there exist @math{C}
different classes of requests. Each request from class @math{c} spends
on average time @math{S_{c, k}} in service at service center
@math{k}. For open models, we denote with @math{{\bf \lambda} =
\lambda_{ck}} the arrival rates, where @math{\lambda_{c, k}} is the
external arrival rate of class @math{c} customers at service center
@math{k}. For closed models, we denote with @math{{\bf N} = (N_1, N_2,
\ldots, N_C)} the population vector, where @math{N_c} is the number of
class @math{c} requests in the system.

The transition probability matrix for these kind of networks will be a
@math{C \times K \times C \times K} matrix @math{{\bf P} = P_{r, i, s, j}}
such that @math{P_{r, i, s, j}} is the probability that a class
@math{r} request which completes service at center @math{i} will join
server @math{j} as a class @math{s} request.

Model input and outputs can be adjusted by adding additional indexes
for the customer classes.

@noindent @strong{Model Inputs}

@table @math

@item \lambda_{c, i}
External arrival rate of class-@math{c} requests to service center @math{i}

@item \lambda
Overall external arrival rate to the whole system: @math{\lambda = \sum_c \sum_i \lambda_{c, i}}

@item S_{c, i}
Average service time. @math{S_{c, i}} is the average service time on
service center @math{i} for class @math{c} requests.

@item P_{r, i, s, j}
Routing probability matrix. @math{{\bf P} = P_{r, i, s, j}} is a @math{C
\times K \times C \times K} matrix such that @math{P_{r, i, s, j}} is
the probability that a class @math{r} request which completes service
at server @math{i} will move to server @math{j} as a class @math{s}
request.

@item V_{c, i}
Average number of visits. @math{V_{c, i}} is the average number of visits
of class @math{c} requests to the service center @math{i}.

@end table

@noindent @strong{Model Outputs}

@table @math

@item U_{c, i}
Utilization of service center @math{i} by class @math{c} requests. The
utilization is defined as the fraction of time in which the resource is
busy (i.e., the server is processing requests).

@item R_{c, i}
Average response time experienced by class @math{c} requests on service
center @math{i}. The average response time is defined as the average
time between the arrival of a customer in the queue, and the completion
of service.

@item Q_{c, i}
Average number of class @math{c} requests on service center
@math{i}. This includes both the requests in the queue, and the request
being served.

@item X_{c, i}
Throughput of service center @math{i} for class @math{c} requests.  The
throughput is defined as the rate of completion of class @math{c}
requests.

@end table

@noindent It is possible to define aggregate performance measures as follows:

@table @math

@item U_i
Utilization of service center @math{i}:
@iftex
@tex
$U_i = \sum_{c=1}^C U_{c, i}$
@end tex
@end iftex
@ifnottex
@code{Ui = sum(U,1);}
@end ifnottex

@item R_c
System response time for class @math{c} requests:
@iftex
@tex
$R_c = \sum_{i=1}^K R_{c, i} V_{c, i}$
@end tex
@end iftex
@ifnottex
@code{Rc = sum( V.*R, 1 );}
@end ifnottex

@item Q_c
Average number of class @math{c} requests in the system:
@iftex
@tex
$Q_c = \sum_{i=1}^K Q_{c, i}$
@end tex
@end iftex
@ifnottex
@code{Qc = sum( Q, 2 );}
@end ifnottex

@item X_c
Class @math{c} throughput:
@iftex
@tex
$X_c = X_{c, 1} / V_{c, 1}$
@end tex
@end iftex
@ifnottex
@code{Xc = X(:,1) ./ V(:,1);}
@end ifnottex

@end table

We can define the visit ratios @math{V_{s, j}} for class @math{s}
customers at service center @math{j} as follows:

@iftex
@tex
$$ \eqalign{ V_{s, j} & = \sum_{r=1}^C \sum_{i=1}^K V_{r, i} P_{r, i, s, j} \cr
             V_{s, 1} & = 1} $$
@end tex
@end iftex
@ifnottex
@group
V_sj = sum_r sum_i V_ri P_risj, for all s,j
@end group
@end ifnottex

@noindent while for open networks:

@iftex
@tex
$$V_{s, j} = P_{0, s, j} + \sum_{r=1}^C \sum_{i=1}^K V_{r, i} P_{r, i, s, j}$$
@end tex
@end iftex
@ifnottex
@group
V_sj = P_0sj + sum_r sum_i V_ri P_risj, for all s,j
@end group
@end ifnottex

@noindent where @math{P_{0, s, j}} is the probability that an external 
arrival goes to service center @math{j} as a class-@math{s} request.
If @math{\lambda_{s, j}} is the external arrival rate of class
@math{s} requests to service center @math{j}, and @math{\lambda =
\sum_s \sum_j \lambda_{s, j}} is the overall external arrival rate to
the whole system, then @math{P_{0, s, j} = \lambda_{s, j} / \lambda}.

@c
@c
@c
@node Generic Algorithms
@section Generic Algorithms

The @code{queueing} package provides a couple of high-level functions
for defining and solving QN models. These functions can be used to
define a open or closed QN model (with single or multiple job
classes), with arbitrary configuration and queueing disciplines. At
the moment only product-form networks can be solved, @xref{Algorithms for Product-Form QNs}.

The network is defined by two parameters. The first one is the list of
nodes, encoded as an Octave @emph{cell array}. The second parameter is
the visit ration @var{V}, which can be either a vector (for
single-class models) or a two-dimensional matrix (for multiple-class
models).

Individual nodes in the network are structures build using the
@code{qnmknode} function.

@DOCSTRING(qnmknode)

After the network has been defined, it is possible to solve it using
the @code{qnsolve} function. Note that this function is somewhat less
efficient than those described in later sections, but
generally easier to use.

@DOCSTRING(qnsolve)

@noindent @strong{EXAMPLE}

Let us consider a closed, multiclass network with @math{C=2} classes
and @math{K=3} service center. Let the population be @math{M=(2, 1)}
(class 1 has 2 requests, and class 2 has 1 request). The nodes are as
follows:

@itemize

@item Node 1 is a @math{M/M/1}--FCFS node, with load-dependent service
times. Service times are class-independent, and are defined by the
matrix @code{[0.2 0.1 0.1; 0.2 0.1 0.1]}. Thus, @code{@var{S}(1,2) =
0.2} means that service time for class 1 customers where there are 2
requests in 0.2. Note that service times are class-independent;

@item Node 2 is a @math{-/G/1}--PS node, with service times 
@math{S_{1, 2} = 0.4} for class 1, and @math{S_{2, 2} = 0.6} for class 2
requests;

@item Node 3 is a @math{-/G/\infty} node (delay center), with service
times @math{S_{1, 3}=1} and @math{S_{2, 3}=2} for class 1 and 2
respectively.

@end itemize

After defining the per-class visit count @var{V} such that
@code{@var{V}(c,k)} is the visit count of class @math{c} requests to
service center @math{k}.  We can define and solve the model as
follows:

@example
@verbatiminclude @value{top_srcdir}/examples/demo_1_qnsolve.m
@end example


@c
@c
@c
@node Algorithms for Product-Form QNs
@section Algorithms for Product-Form QNs

Product-form queueing networks fulfill the following assumptions:

@itemize

@item The network can consist of open and closed job classes.

@item The following queueing disciplines are allowed: FCFS, PS, LCFS-PR and IS.

@item Service times for FCFS nodes must be exponentially distributed and
class-independent. Service centers at PS, LCFS-PR and IS nodes can
have any kind of service time distribution with a rational Laplace
transform.  Furthermore, for PS, LCFS-PR and IS nodes, different
classes of customers can have different service times.

@item The service rate of an FCFS node is only allowed to depend on the
number of jobs at this node; in a PS, LCFS-PR and IS node the service
rate for a particular job class can also depend on the number of jobs
of that class at the node.

@item In open networks two kinds of arrival processes are allowed: i) the
arrival process is Poisson, with arrival rate @math{\lambda} which can
depend on the number of jobs in the network. ii) the arrival process
consists of @math{U} independent Poisson arrival streams where the
@math{U} job sources are assigned to the @math{U} chains; the arrival
rate can be load dependent.

@end itemize

@c
@c Jackson Networks
@c

@subsection Jackson Networks

Jackson networks satisfy the following conditions:

@itemize

@item 
There is only one job class in the network; the overall number of jobs
in the system is unlimited.

@item 
There are @math{N} service centers in the network. Each service center
may have Poisson arrivals from outside the system. A job can leave
the system from any node.

@item 
Arrival rates as well as routing probabilities are independent from
the number of nodes in the network.

@item 
External arrivals and service times at the service centers are
exponentially distributed, and in general can be load-dependent.

@item
Service discipline at each node is FCFS

@end itemize

We define the @emph{joint probability vector} @math{\pi(k_1, k_2,
\ldots, k_N)} as the steady-state probability that there are @math{k_i}
requests at service center @math{i}, for all @math{i=1, 2, \ldots, N}.
Jackson networks have the property that the joint probability is the
product of the marginal probabilities @math{\pi_i}:

@iftex
@tex
$$ \pi(k_1, k_2, \ldots, k_N) = \prod_{i=1}^N \pi_i(k_i) $$
@end tex
@end iftex
@ifnottex
@example
@var{joint_prob} = prod( @var{pi} )
@end example
@end ifnottex

@noindent where @math{\pi_i(k_i)} is the steady-state probability
that there are @math{k_i} requests at service center @math{i}.

@DOCSTRING(qnjackson)

@noindent @strong{REFERENCES}

This implementation is based on G. Bolch, S. Greiner, H. de Meer and
K. Trivedi, @cite{Queueing Networks and Markov Chains: Modeling and
Performance Evaluation with Computer Science Applications}, Wiley,
1998, pp. 284--287.

@auindex Bolch, G.
@auindex Greiner, S.
@auindex de Meer, H.
@auindex Trivedi, K.

@subsection The Convolution Algorithm

According to the BCMP theorem, the state probability of a closed
single class queueing network with @math{K} nodes and @math{N} requests
can be expressed as:

@iftex
@tex
$$ \pi(k_1, k_2, \ldots, k_K) = {1 \over G(N)} \prod_{i=1}^N F_i(k_i) $$
@end tex
@end iftex
@ifnottex
@example
@group
k = [k1, k2, @dots{} kn]; @r{population vector}
p = 1/G(N+1) \prod F(i,k);
@end group
@end example
@end ifnottex

Here @math{\pi(k_1, k_2, \ldots, k_K)} is the joint probability of
having @math{k_i} requests at node @math{i}, for all @math{i=1, 2,
\ldots, K}.

The @emph{convolution algorithms} computes the normalization constants
@math{{\bf G} = \left(G(0), G(1), \ldots, G(N)\right)} for single-class, closed networks
with @math{N} requests.  The normalization constants are returned as
vector @code{@var{G}=[@var{G}(1), @var{G}(2), @dots{} @var{G}(N+1)]} where
@code{@var{G}(i+1)} is the value of @math{G(i)} (remember that Octave
uses 1-base vectors). The normalization constant can be used to
compute all performance measures of interest (utilization, average
response time and so on).

@code{queueing} implements the convolution algorithm, in the function
@code{qnconvolution} and @code{qnconvolutionld}. The first one
supports single-station nodes, multiple-station nodes and IS nodes.
The second one supports networks with general load-dependent service
centers.

@c
@c The Convolution Algorithm
@c

@DOCSTRING(qnconvolution)

@noindent @strong{EXAMPLE}

The normalization constant @math{G} can be used to compute the
steady-state probabilities for a closed single class product-form
Queueing Network with @math{K} nodes. Let @code{@var{k}=[@math{k_1,
k_2, @dots{}, k_K}]} be a valid population vector. Then, the
steady-state probability @code{@var{p}(i)} to have @code{@var{k}(i)}
requests at service center @math{i} can be computed as:

@iftex
@tex
$$
p_i(k_i) = {(V_i S_i)^{k_i} \over G(K)} \left(G(K-k_i) - V_i S_i G(K-k_i-1)\right), \quad i=1, 2, \ldots, K
$$
@end tex
@end iftex

@example
@verbatiminclude @value{top_srcdir}/examples/demo_1_qnconvolution.m
@print{} k(1)=1 prob=0.17975
@print{} k(2)=2 prob=0.48404
@print{} k(3)=0 prob=0.52779
@end example

@noindent @strong{NOTE}

For a network with @math{K} service centers and @math{N} requests,
this implementation of the convolution algorithm has time and space
complexity @math{O(NK)}.

@noindent @strong{REFERENCES}

Jeffrey P. Buzen, @cite{Computational Algorithms for Closed Queueing
Networks with Exponential Servers}, Communications of the ACM, volume
16, number 9, september 1973,
pp. 527--531. @url{http://doi.acm.org/10.1145/362342.362345}

@auindex Buzen, J. P.

This implementation is based on G. Bolch, S. Greiner, H. de Meer and
K. Trivedi, @cite{Queueing Networks and Markov Chains: Modeling and
Performance Evaluation with Computer Science Applications}, Wiley,
1998, pp. 313--317.

@auindex Bolch, G.
@auindex Greiner, S.
@auindex de Meer, H.
@auindex Trivedi, K.

@c
@c Convolution for load-dependent service centers
@c
@DOCSTRING(qnconvolutionld)

@noindent @strong{REFERENCES}

Herb Schwetman, @cite{Some Computational Aspects of Queueing Network
Models}, Technical Report CSD-TR-354, Department of Computer Sciences,
Purdue University, feb, 1981 (revised).
@url{http://www.cs.purdue.edu/research/technical_reports/1980/TR%2080-354.pdf}

@auindex Schwetman, H.

M. Reiser, H. Kobayashi, @cite{On The Convolution Algorithm for
Separable Queueing Networks}, In Proceedings of the 1976 ACM
SIGMETRICS Conference on Computer Performance Modeling Measurement and
Evaluation (Cambridge, Massachusetts, United States, March 29--31,
1976). SIGMETRICS '76. ACM, New York, NY,
pp. 109--117. @url{http://doi.acm.org/10.1145/800200.806187}

@auindex Reiser, M.
@auindex Kobayashi, H.

This implementation is based on G. Bolch, S. Greiner, H. de Meer and
K. Trivedi, @cite{Queueing Networks and Markov Chains: Modeling and
Performance Evaluation with Computer Science Applications}, Wiley,
1998, pp. 313--317. Function @code{qnconvolutionld} is slightly
different from the version described in Bolch et al. because it
supports general load-dependent centers (while the version in the book
does not). The modification is in the definition of function
@code{F()} in @code{qnconvolutionld} which has been made similar to
function @math{f_i} defined in Schwetman, @code{Some Computational
Aspects of Queueing Network Models}.

@auindex Bolch, G.
@auindex Greiner, S.
@auindex de Meer, H.
@auindex Trivedi, K.


@subsection Open networks

@c
@c Open networks with single class
@c
@DOCSTRING(qnopensingle)

From the results computed by this function, it is possible to derive
other quantities of interest as follows:

@itemize

@item
@strong{System Response Time}: The overall system response time
can be computed as
@iftex
@tex 
$R_s = \sum_{i=1}^K V_i R_i$
@end tex
@end iftex
@ifnottex
@code{R_s = dot(V,R);}
@end ifnottex

@item
@strong{Average number of requests}: The average number of requests
in the system can be computed as:
@iftex
@tex 
$Q_s = \sum_{i=1}^K Q(i)$
@end tex
@end iftex
@ifnottex
@code{Q_s = sum(Q)}
@end ifnottex

@end itemize

@noindent @strong{EXAMPLE}

@example
@verbatiminclude @value{top_srcdir}/examples/demo_1_qnopensingle.m
@print{} R_s =  1.4062
@print{} N =  4.2186
@end example

@noindent @strong{REFERENCES}

G. Bolch, S. Greiner, H. de Meer and K. Trivedi, @cite{Queueing
Networks and Markov Chains: Modeling and Performance Evaluation with
Computer Science Applications}, Wiley, 1998.

@auindex Bolch, G.
@auindex Greiner, S.
@auindex de Meer, H.
@auindex Trivedi, K.


@c
@c Open network with multiple classes
@c
@DOCSTRING(qnopenmulti)

@noindent @strong{REFERENCES}

Edward D. Lazowska, John Zahorjan, G. Scott Graham, and Kenneth C.
Sevcik, @cite{Quantitative System Performance: Computer System
Analysis Using Queueing Network Models}, Prentice Hall,
1984. @url{http://www.cs.washington.edu/homes/lazowska/qsp/}. In
particular, see section 7.4.1 ("Open Model Solution Techniques").

@auindex Lazowska, E. D. 
@auindex Zahorjan, J. 
@auindex Graham, G. S.
@auindex Sevcik, K. C.


@subsection Closed Networks

@c
@c MVA for single class, closed networks
@c

@DOCSTRING(qnclosedsinglemva)

From the results provided by this function, it is possible to derive 
other quantities of interest as follows:

@noindent @strong{EXAMPLE}

@example
@verbatiminclude @value{top_srcdir}/examples/demo_1_qnclosedsinglemva.m
@end example


@noindent @strong{REFERENCES}

M. Reiser and S. S. Lavenberg, @cite{Mean-Value Analysis of Closed
Multichain Queuing Networks}, Journal of the ACM, vol. 27, n. 2, April
1980, pp. 313--322. @url{http://doi.acm.org/10.1145/322186.322195}

@auindex Reiser, M.
@auindex Lavenberg, S. S.

This implementation is described in R. Jain , @cite{The Art of Computer
Systems Performance Analysis}, Wiley, 1991, p. 577.  Multi-server nodes
@c and the computation of @math{G(N)}, 
are treated according to G. Bolch, S. Greiner, H. de Meer and
K. Trivedi, @cite{Queueing Networks and Markov Chains: Modeling and
Performance Evaluation with Computer Science Applications}, Wiley,
1998, Section 8.2.1, "Single Class Queueing Networks".

@auindex Jain, R.
@auindex Bolch, G.
@auindex Greiner, S.
@auindex de Meer, H.
@auindex Trivedi, K.

@c
@c MVA for single class, closed networks with load dependent servers
@c
@DOCSTRING(qnclosedsinglemvald)

@noindent @strong{REFERENCES}

M. Reiser and S. S. Lavenberg, @cite{Mean-Value Analysis of Closed
Multichain Queuing Networks}, Journal of the ACM, vol. 27, n. 2,
April 1980, pp. 313--322. @url{http://doi.acm.org/10.1145/322186.322195}

This implementation is described in G. Bolch, S. Greiner, H. de Meer
and K. Trivedi, @cite{Queueing Networks and Markov Chains: Modeling
and Performance Evaluation with Computer Science Applications}, Wiley,
1998, Section 8.2.4.1, ``Networks with Load-Deèpendent Service: Closed
Networks''.

@auindex Bolch, G.
@auindex Greiner, S.
@auindex de Meer, H.
@auindex Trivedi, K.

@c
@c CMVA for single class, closed networks with a single load dependent servers
@c
@DOCSTRING(qncmva)

@noindent @strong{REFERENCES}

G. Casale. @cite{A note on stable flow-equivalent aggregation in
closed networks}. Queueing Syst. Theory Appl., 60:193–202, December
2008.

@auindex Casale, G.

@c
@c Approximate MVA for single class, closed networks
@c

@DOCSTRING(qnclosedsinglemvaapprox)

@noindent @strong{REFERENCES}

This implementation is based on Edward D. Lazowska, John Zahorjan,
G. Scott Graham, and Kenneth C. Sevcik, @cite{Quantitative System
Performance: Computer System Analysis Using Queueing Network Models},
Prentice Hall,
1984. @url{http://www.cs.washington.edu/homes/lazowska/qsp/}. In
particular, see section 6.4.2.2 ("Approximate Solution Techniques").

@auindex Lazowska, E. D.
@auindex Zahorjan, J.
@auindex Graham, G. S.
@auindex Sevcik, K. C.


@c
@c MVA for multiple class, closed networks
@c
@DOCSTRING(qnclosedmultimva)

@noindent @strong{NOTE}

Given a network with @math{K} service centers, @math{C} job classes and
population vector @math{{\bf N}=(N_1, N_2, \ldots, N_C)}, the MVA
algorithm requires space @math{O(C \prod_i (N_i + 1))}. The time
complexity is @math{O(CK\prod_i (N_i + 1))}. This implementation is
slightly more space-efficient (see details in the code). While the space
requirement can be mitigated by using some optimizations, the time
complexity can not. If you need to analyze large closed networks you
should consider the @command{qnclosedmultimvaapprox} function, which
implements the approximate MVA algorithm. Note however that
@command{qnclosedmultimvaapprox} will only provide approximate results.


@noindent @strong{REFERENCES}

M. Reiser and S. S. Lavenberg, @cite{Mean-Value Analysis of Closed
Multichain Queuing Networks}, Journal of the ACM, vol. 27, n. 2, April
1980, pp. 313--322. @url{http://doi.acm.org/10.1145/322186.322195}

@auindex Reiser, M.
@auindex Lavenberg, S. S.

This implementation is based on G. Bolch, S. Greiner, H. de Meer and
K. Trivedi, @cite{Queueing Networks and Markov Chains: Modeling and
Performance Evaluation with Computer Science Applications}, Wiley,
1998 and Edward D. Lazowska, John Zahorjan, G. Scott Graham, and
Kenneth C. Sevcik, @cite{Quantitative System Performance: Computer
System Analysis Using Queueing Network Models}, Prentice Hall,
1984. @url{http://www.cs.washington.edu/homes/lazowska/qsp/}. In
particular, see section 7.4.2.1 ("Exact Solution Techniques").

@auindex Bolch, G.
@auindex Greiner, S.
@auindex de Meer, H.
@auindex Trivedi, K.
@auindex Lazowska, E. D.
@auindex Zahorjan, J.
@auindex Graham, G. S.
@auindex Sevcik, K. C.

@c
@c Approximate MVA, with Bard-Schweitzer approximation
@c
@DOCSTRING(qnclosedmultimvaapprox)

@noindent @strong{REFERENCES}

Y. Bard, @cite{Some Extensions to Multiclass Queueing Network Analysis},
proc. 4th Int. Symp. on Modelling and Performance Evaluation of
Computer Systems, feb. 1979, pp. 51--62.

@auindex Bard, Y.

P. Schweitzer, @cite{Approximate Analysis of Multiclass Closed
Networks of Queues}, Proc. Int. Conf. on Stochastic Control and
Optimization, jun 1979, pp. 25--29.

@auindex Schweitzer, P.

This implementation is based on Edward D. Lazowska, John Zahorjan, G.
Scott Graham, and Kenneth C. Sevcik, @cite{Quantitative System
Performance: Computer System Analysis Using Queueing Network Models},
Prentice Hall,
1984. @url{http://www.cs.washington.edu/homes/lazowska/qsp/}.  In
particular, see section 7.4.2.2 ("Approximate Solution
Techniques"). This implementation is slightly different from the one
described above, as it computes the average response times @math{R}
instead of the residence times.

@auindex Lazowska, E. D.
@auindex Zahorjan, J.
@auindex Graham, G. S.
@auindex Sevcik, K. C.

@subsection Mixed Networks

@c
@c MVA for mixed networks
@c
@DOCSTRING(qnmix)

@noindent @strong{REFERENCES}

Edward D. Lazowska, John Zahorjan, G. Scott Graham, and Kenneth C.
Sevcik, @cite{Quantitative System Performance: Computer System
Analysis Using Queueing Network Models}, Prentice Hall,
1984. @url{http://www.cs.washington.edu/homes/lazowska/qsp/}. In
particular, see section 7.4.3 ("Mixed Model Solution Techniques").
Note that in this function we compute the mean response time @math{R}
instead of the mean residence time as in the reference.

@auindex Lazowska, E. D. 
@auindex Zahorjan, J. 
@auindex Graham, G. S.
@auindex Sevcik, K. C.

Herb Schwetman, @cite{Implementing the Mean Value Algorithm for the
Solution of Queueing Network Models}, Technical Report CSD-TR-355,
Department of Computer Sciences, Purdue University, feb 15, 1982,
available at
@url{http://www.cs.purdue.edu/research/technical_reports/1980/TR%2080-355.pdf}

@auindex Schwetman, H.


@node Algorithms for non Product-form QNs
@section Algorithms for non Product-Form QNs

@c
@c MVABLO algorithm for approximate analysis of closed, single class
@c QN with blocking
@c
@DOCSTRING(qnmvablo)

@noindent @strong{REFERENCES}

Ian F. Akyildiz, @cite{Mean Value Analysis for Blocking Queueing
Networks}, IEEE Transactions on Software Engineering, vol. 14, n. 2,
april 1988, pp. 418--428.  @url{http://dx.doi.org/10.1109/32.4663}

@auindex Akyildiz, I. F.

@DOCSTRING(qnmarkov)

@c
@c
@c
@node Bounds on performance
@section Bounds on performance

@c
@DOCSTRING(qnopenab)

@noindent @strong{REFERENCES}

Edward D. Lazowska, John Zahorjan, G.  Scott Graham, and Kenneth
C. Sevcik, @cite{Quantitative System Performance: Computer System
Analysis Using Queueing Network Models}, Prentice Hall,
1984. @url{http://www.cs.washington.edu/homes/lazowska/qsp/}. In
particular, see section 5.2 ("Asymptotic Bounds").

@auindex Lazowska, E. D.
@auindex Zahorjan, J.
@auindex Graham, G. S.
@auindex Sevcik, K. C.

@c
@DOCSTRING(qnclosedab)

@noindent @strong{REFERENCES}

@noindent Edward D. Lazowska, John Zahorjan, G.  Scott Graham, and Kenneth
C. Sevcik, @cite{Quantitative System Performance: Computer System
Analysis Using Queueing Network Models}, Prentice Hall,
1984. @url{http://www.cs.washington.edu/homes/lazowska/qsp/}. In
particular, see section 5.2 ("Asymptotic Bounds").

@auindex Lazowska, E. D.
@auindex Zahorjan, J.
@auindex Graham, G. S.
@auindex Sevcik, K. C.


@c
@DOCSTRING(qnopenbsb)

@noindent @strong{REFERENCES}

Edward D. Lazowska, John Zahorjan, G.  Scott Graham, and Kenneth
C. Sevcik, @cite{Quantitative System Performance: Computer System
Analysis Using Queueing Network Models}, Prentice Hall,
1984. @url{http://www.cs.washington.edu/homes/lazowska/qsp/}. In
particular, see section 5.4 ("Balanced Systems Bounds").

@auindex Lazowska, E. D.
@auindex Zahorjan, J.
@auindex Graham, G. S.
@auindex Sevcik, K. C.

@c
@DOCSTRING(qnclosedbsb)

@c
@DOCSTRING(qnclosedpb)

@noindent @strong{REFERENCES}

The original paper describing PB Bounds is C. H. Hsieh and S. Lam,
@cite{Two classes of performance bounds for closed queueing networks},
PEVA, vol. 7, n. 1, pp. 3--30, 1987

This function implements the non-iterative variant described in G.
Casale, R. R. Muntz, G. Serazzi, @cite{Geometric Bounds: a
Non-Iterative Analysis Technique for Closed Queueing Networks}, IEEE
Transactions on Computers, 57(6):780-794, June 2008.

@auindex Hsieh, C. H 
@auindex Lam, S.
@auindex Casale, G.
@auindex Muntz, R. R.
@auindex Serazzi, G.

@c
@DOCSTRING(qnclosedgb)

@noindent @strong{REFERENCES}

G. Casale, R. R. Muntz, G. Serazzi,
@cite{Geometric Bounds: a Non-Iterative Analysis Technique for Closed
Queueing Networks}, IEEE Transactions on Computers, 57(6):780-794,
June 2008. @url{http://doi.ieeecomputersociety.org/10.1109/TC.2008.37}

@auindex Casale, G.
@auindex Muntz, R. R.
@auindex Serazzi, G.
  
In this implementation we set @math{X^+} and @math{X^-} as the upper
and lower Asymptotic Bounds as computed by the @code{qnclosedab}
function, respectively.

@node Utility functions
@section Utility functions

@subsection Open or closed networks 

@DOCSTRING(qnclosed)

@noindent @strong{EXAMPLE}

@example
@verbatiminclude @value{top_srcdir}/examples/demo_1_qnclosed.m
@end example

@DOCSTRING(qnopen)

@c
@c Compute the visit counts
@c

@subsection Computation of the visit counts

For single-class networks the average number of visits satisfy the
following equation:

@iftex
@tex
$$V_j = P_{0, j} + \sum_{i=1}^K V_i P_{i, j}$$
@end tex
@end iftex
@ifnottex
@example
V == P0 + V*P;
@end example
@end ifnottex

@noindent where @math{P_{0, j}} is the probability that an external 
arrival goes to service center @math{j}. If @math{\lambda_j} is the
external arrival rate to service center @math{j}, and @math{\lambda =
\sum_j \lambda_j} is the overall external arrival rate, then
@math{P_{0, j} = \lambda_j / \lambda}. 

For closed networks, the visit ratios satisfy the following equation:

@iftex
@tex
$$\eqalign{ V_j & = \sum_{i=1}^K V_i P_{i, j} \cr
            V_1 & = 1 }$$
@end tex
@end iftex
@ifnottex
@example
V(1) == 1 && V == V*P;
@end example
@end ifnottex

The definitions above can be extended to multiple class networks as
follows. We define the visit ratios @math{V_{s, j}} for class @math{s}
customers at service center @math{j} as follows:

@iftex
@tex
$$\eqalign{ V_{s, j} & = \sum_{r=1}^C \sum_{i=1}^K V_{r, i} P_{r, i, s, j} \cr
            V_{s, 1} & = 1 }$$
@end tex
@end iftex
@ifnottex
@group
V_sj = sum_r sum_i V_ri P_risj, for all s,j
V_s1 = 1, for all s
@end group
@end ifnottex

@noindent while for open networks:

@iftex
@tex
$$V_{s, j} = P_{0, s, j} + \sum_{r=1}^C \sum_{i=1}^K V_{r, i} P_{r, i, s, j}$$
@end tex
@end iftex
@ifnottex
@group
V_sj = P_0sj + sum_r sum_i V_ri P_risj, for all s,j
@end group
@end ifnottex

@noindent where @math{P_{0, s, j}} is the probability that an external 
arrival goes to service center @math{j} as a class-@math{s} request.
If @math{\lambda_{s, j}} is the external arrival rate of class @math{s}
requests to service center @math{j}, and @math{\lambda = \sum_s \sum_j
\lambda_{s, j}} is the overall external arrival rate to the whole system,
then @math{P_{0, s, j} = \lambda_{s, j} / \lambda}.

@DOCSTRING(qnvisits)

@noindent @strong{EXAMPLE}

@example
@verbatiminclude @value{top_srcdir}/examples/demo_1_qnvisits.m
@end example

@subsection Other utility functions

@c
@DOCSTRING(population_mix)

@noindent @strong{REFERENCES}

Herb Schwetman, @cite{Implementing the Mean Value Algorithm for the
Solution of Queueing Network Models}, Technical Report CSD-TR-355,
Department of Computer Sciences, Purdue University, feb 15, 1982,
available at
@url{http://www.cs.purdue.edu/research/technical_reports/1980/TR
80-355.pdf}

Note that the slightly different problem of generating all tuples
@math{k_1, k_2, \ldots, k_N} such that @math{\sum_i k_i = k} and
@math{k_i} are nonnegative integers, for some fixed integer @math{k
@geq{} 0} has been described in S. Santini, @cite{Computing the
Indices for a Complex Summation}, unpublished report, available at
@url{http://arantxa.ii.uam.es/~ssantini/writing/notes/s668_summation.pdf}

@auindex Schwetman, H.
@auindex Santini, S.

@c
@DOCSTRING(qnmvapop)

@noindent @strong{REFERENCES}

Zahorjan, J. and Wong, E. @cite{The solution of separable queueing
network models using mean value analysis}. SIGMETRICS
Perform. Eval. Rev. 10, 3 (Sep. 1981), 80-85. DOI
@url{http://doi.acm.org/10.1145/1010629.805477}

@auindex Zahorjan, J.
@auindex Wong, E.

