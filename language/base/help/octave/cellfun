 -*- texinfo -*-
@deftypefn {Lodable Function} {} cellfun (@var{name}, @var{c})
@deftypefnx {Lodable Function} {} cellfun ("size", @var{c}, @var{k})
@deftypefnx {Lodable Function} {} cellfun ("isclass", @var{c}, @var{class})
@deftypefnx {Lodable Function} {} cellfun (@var{func}, @var{c})
@deftypefnx {Lodable Function} {} cellfun (@var{func}, @var{c}, @var{d})
@deftypefnx {Lodable Function} {[@var{a}, @var{b}]} = cellfun (@dots{})
@deftypefnx {Lodable Function} {} cellfun (@dots{}, 'ErrorHandler',@var{errfunc})
@deftypefnx {Lodable Function} {} cellfun (@dots{}, 'UniformOutput',@var{val})

Evaluate the function named @var{name} on the elements of the cell array
@var{c}.  Elements in @var{c} are passed on to the named function
individually.  The function @var{name} can be one of the functions

@table @code
@item isempty
Return 1 for empty elements.
@item islogical
Return 1 for logical elements.
@item isreal
Return 1 for real elements.
@item length
Return a vector of the lengths of cell elements.
@item ndims
Return the number of dimensions of each element.
@item prodofsize
Return the product of dimensions of each element.
@item size
Return the size along the @var{k}-th dimension.
@item isclass
Return 1 for elements of @var{class}.
@end table

Additionally, @code{cellfun} accepts an arbitrary function @var{func}
in the form of an inline function, function handle, or the name of a
function (in a character string). In the case of a character string
argument, the function must accept a single argument named @var{x}, and
it must return a string value. The function can take one or more arguments,
with the inputs args given by @var{c}, @var{d}, etc. Equally the function
can return one or more output arguments. For example

@example
@group
cellfun (@@atan2, @{1, 0@}, @{0, 1@})
@result{}ans = [1.57080   0.00000]
@end group
@end example

Note that the default output argument is an array of the same size as the
input arguments.

If the param 'UniformOutput' is set to true (the default), then the function
must return either a single element which will be concatenated into the
return value. If 'UniformOutput is false, the outputs are concatenated in
a cell array. For example

@example
@group
cellfun ("tolower(x)", @{"Foo", "Bar", "FooBar"@},'UniformOutput',false)
@result{} ans = @{"foo", "bar", "foobar"@}
@end group
@end example

Given the parameter 'ErrorHandler', then @var{errfunc} defines a function to
call in case @var{func} generates an error. The form of the function is

@example
function [@dots{}] = errfunc (@var{s}, @dots{})
@end example

where there is an additional input argument to @var{errfunc} relative to
@var{func}, given by @var{s}. This is a structure with the elements
'identifier', 'message' and 'index', giving respectively the error
identifier, the error message, and the index into the input arguments
of the element that caused the error. For example

@example
@group
function y = foo (s, x), y = NaN; endfunction
cellfun (@@factorial, @{-1,2@},'ErrorHandler',@@foo)
@result{} ans = [NaN 2]
@end group
@end example

@seealso{isempty, islogical, isreal, length, ndims, numel, size, isclass}
@end deftypefn
