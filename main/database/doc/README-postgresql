Octave postgresql interface


Functions:


pq_connect: connect to a postgresql database,

pq_exec_params: execute an SQL command with optional parameters and
                return result,

pq_update_types: used if defined types change during connection time,

pq_lo_import: import large object from client side,

pq_lo_export: export large object to client side,

pq_lo_unlink: delete large object,

pq_close: disconnect from database.


Features:


- number of connections not limited,

- mapping of postgresql types to Octave types in data exchange in both
  directions,

- arbitrarily deeply nested composite- and array-types,

- binary data transfer,

- reads postgresql system catalogs to get type information.


State:


Alpha, but can already be useful. Not all base types implemented
yet. All commands should work with pq_exec_params, copy from stdin and
copy to stdout are implemented from/to files at client side. The whole
framework including conversion of composite and array types with the
resulting possible recursion, enum types, and a number of base types
are implemented. Large object import, export, and unlink works.

Please report bugs. If you want to implement a new type-converter for
a base type yourself, you can do it in converters.cc and tell me
(package maintainer) about it. See converters.h for the meaning of
fields in the oct_pq_conv_t structure. Presently only the binary
converters are needed, the string converters can be stubs returning an
error value (1).
