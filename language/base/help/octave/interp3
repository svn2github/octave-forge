-*- texinfo -*-
@deftypefn {Function File} {@var{vi} =} interp3 (@var{x}, @var{y},@var{z}, @var{v}, @var{xi}, @var{yi}, @var{zi})
@deftypefnx {Function File} {@var{vi} =} interp3 (@var{v}, @var{xi}, @var{yi}, @var{zi})
@deftypefnx {Function File} {@var{vi} =} interp3 (@var{v}, @var{m})
@deftypefnx {Function File} {@var{vi} =} interp3 (@var{v})
@deftypefnx {Function File} {@var{vi} =} interp3 (@dots{}, @var{method})
@deftypefnx {Function File} {@var{vi} =} interp3 (@dots{}, @var{method}, @var{extrapval})

Perform 3-dimensional interpolation. Each element of then 3-dimensional 
array @var{v} represents a value at a location given by the parameters 
@var{x}, @var{y}, and @var{z}. The parameters @var{x}, @var{x}, and 
@var{z} are either 3-dimensional arrays of the same size as the array 
@var{v} in the 'meshgrid' format or vectors. The parameters @var{xi}, etc 
respect a similar format to @var{x}, etc, and they represent the points 
at which the array @var{vi} is interpolated.

If @var{x}, @var{y}, @var{z} are omitted, they are assumed to be 
@code{x = 1 : size (@var{v}, 2)}, @code{y = 1 : size (@var{v}, 1)} and
@code{z = 1 : size (@var{v}, 3)}. If @var{m} is specified, then
the interpolation adds a point half way between each of the interpolation 
points. This process is performed @var{m} times. If only @var{v} is 
specified, then @var{m} is assumed to be @code{1}.

Method is one of:

@table @asis
@item 'nearest'
Return the nearest neighbour.
@item 'linear'
Linear interpolation from nearest neighbours.
@item 'cubic'
Cubic interpolation from four nearest neighbours (not implemented yet).
@item 'spline'
Cubic spline interpolation--smooth first and second derivatives
throughout the curve.
@end table

The default method is 'linear'.

If @var{extrap} is the string 'extrap', then extrapolate values beyond
the endpoints.  If @var{extrap} is a number, replace values beyond the
endpoints with that number.  If @var{extrap} is missing, assume NA.
@seealso{interp1, interp2, spline, meshgrid}
@end deftypefn
