@deftypefun {void} {mexFixMsgTxt} (const char * @var{vmsg})
@var{vmsg}:  The string that has to be displayed

Displays the string @code{vmsg} in the octave window as "FIXME: ..." and
continues.
@end deftypefun

@deftypefun {void} {mexUsgMsgTxt} (const char * @var{vmsg})
@var{vmsg}:  The string that has to be displayed

Displays the string @code{vmsg} in the octave window as "usage: ..." and
stops computation because of an empty error message.
@end deftypefun

@deftypefun {bool} {mxIsEqual} (const mxArray * @var{vone}, const mxArray * @var{vtwo})
@var{vone}:  The first mxArray variable

@var{vtwo}:  The second mxArray variable

Compares the two mxArrays @code{vone} and @code{vtwo} and returns a boolean
value that is either @var{true} if both mxArrays are the same or @var{false}
if the two mxArrays are different.

@strong{Return value:}  The constant @var{true} or @var{false}.
@end deftypefun

@deftypefun {bool} {mxIsVector} (const mxArray * @var{vmat})
@var{vmat}:  The numerical mxArray

Returns a boolean value that is either @var{true} if @code{vmat} is a vector
or @var{false} if @code{vmat} is no vector.

@strong{Return value:}  The constant @var{true} or @var{false}.
@end deftypefun

@deftypefun {bool} {mxIsColumnVector} (const mxArray * @var{vmat})
@var{vmat}:  The numerical mxArray

Returns a boolean value that is either @var{true} if @code{vmat} is a column
vector or @var{false} if @code{vmat} is no column vector.

@strong{Return value:}  The constant @var{true} or @var{false}.
@end deftypefun

@deftypefun {bool} {mxIsRowVector} (const mxArray * @var{vmat})
@var{vmat}:  The numerical mxArray

Returns a boolean value that is either @var{true} if @code{vmat} is a row
vector or @var{false} if @code{vmat} is no row vector.

@strong{Return value:}  The constant @var{true} or @var{false}.
@end deftypefun

@deftypefun {bool} {mxIsMatrix} (const mxArray * @var{vmat})
@var{vmat}:  The numerical mxArray

Returns a boolean value that is either @var{true} if @code{vmat} is a
numerical matrix or @var{false} if @code{vmat} is no matrix.

@strong{Return value:}  The constant @var{true} or @var{false}.
@end deftypefun

@deftypefun {mxArray *} {mxGetMatrixRow} (mxArray * @var{vmat}, unsigned int @var{vind})
@var{vmat}:  The numerical mxArray

Returns a newly allocated numerical mxArray with one row of
elements from the matrix or vector @code{vmat}.

@strong{Return value:}  An newly allocated mxArray.
@end deftypefun

@deftypefun {mxArray *} {mxGetMatrixColumn} (mxArray * @var{vmat}, unsigned int @var{vind})
@var{vmat}:  The numerical mxArray

Returns a newly allocated numerical mxArray with one column of
elements from the matrix or vector @code{vmat}.

@strong{Return value:}  An newly allocated mxArray.
@end deftypefun

@deftypefun {mxArray *} {mxTransposeMatrix} (mxArray * @var{vmat})
@var{vmat}:  The numerical mxArray

Returns a newly allocated numerical mxArray matrix that is the
non-conjugate transposed matrix of @code{vmat}.

@strong{Return value:}  An newly allocated mxArray.
@end deftypefun

