/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.34
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIG_name_d      "mysql"
#define SWIG_name        mysql

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <octave/oct.h>
#include <octave/parse.h>
#include <octave/ov-fcn-handle.h>
#include <octave/Cell.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13





SWIGRUNTIME bool SWIG_check_num_args(const char *func_name, int num_args, int max_args, int min_args, int varargs) {
  if (num_args > max_args && !varargs)
    error("function %s takes at most %i arguments", func_name, max_args);
  else if (num_args < min_args)
    error("function %s requires at least %i arguments", func_name, max_args);
  else
    return true;
  return false;
}

SWIGRUNTIME octave_value_list *SWIG_Octave_AppendOutput(octave_value_list *ovl, const octave_value &ov) {
  ovl->append(ov);
  return ovl;
}

SWIGRUNTIME octave_value SWIG_ErrorType(int code) {
  switch (code) {
  case SWIG_MemoryError:
    return "SWIG_MemoryError";
  case SWIG_IOError:
    return "SWIG_IOError";
  case SWIG_RuntimeError:
    return "SWIG_RuntimeError";
  case SWIG_IndexError:
    return "SWIG_IndexError";
  case SWIG_TypeError:
    return "SWIG_TypeError";
  case SWIG_DivisionByZero:
    return "SWIG_DivisionByZero";
  case SWIG_OverflowError:
    return "SWIG_OverflowError";
  case SWIG_SyntaxError:
    return "SWIG_SyntaxError";
  case SWIG_ValueError:
    return "SWIG_ValueError";
  case SWIG_SystemError:
    return "SWIG_SystemError";
  case SWIG_AttributeError:
    return "SWIG_AttributeError";
  }
  return "SWIG unknown error";
}

SWIGRUNTIME octave_value SWIG_Error(int code, const char *msg) {
  octave_value type(SWIG_ErrorType(code));
  std::string r = msg;
  r += " (" + type.string_value() + ")";
  error(r.c_str());
  return octave_value(r);
}

#define SWIG_fail                                       goto fail

#define SWIG_Octave_ConvertPtr(obj, pptr, type, flags)  SWIG_Octave_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Octave_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Octave_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Octave_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Octave_NewPointerObj(ptr, type, flags)
#define swig_owntype                                    int

#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Octave_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Octave_NewPackedObj(ptr, sz, type)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Octave_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Octave_NewPackedObj(ptr, sz, type)

#define SWIG_GetModule(clientdata) SWIG_Octave_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) SWIG_Octave_SetModule(clientdata,pointer);
#define SWIG_MODULE_CLIENTDATA_TYPE void*

#define Octave_Error_Occurred() 0
#define SWIG_Octave_AddErrorMsg(msg) {;}

// For backward compatibility only
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      0

SWIGRUNTIME swig_module_info *SWIG_Octave_GetModule(void *clientdata) {
  octave_value tmp = get_global_value("__SWIG_MODULE__", true);
  if (!tmp.is_defined() || !tmp.is_uint64_type())
    return 0;
  unsigned long r = tmp.uint64_scalar_value().value();
  assert(sizeof(r) == sizeof(swig_module_info *));
  return (swig_module_info *) r;
}

SWIGRUNTIME void SWIG_Octave_SetModule(void *clientdata, swig_module_info *pointer) {
  unsigned long r = (unsigned long) pointer;
  assert(sizeof(r) == sizeof(swig_module_info *));
  const char *module_var = "__SWIG_MODULE__";
  link_to_global_variable(curr_sym_tab->lookup(module_var, true));
  set_global_value(module_var, octave_uint64(r));
}

// Runtime API implementation

#include <map>
#include <vector>
#include <string>
#include <ext/hash_map>

namespace {

  typedef octave_value_list(*octave_func) (const octave_value_list &, int);
  class octave_swig_type;

  namespace Swig {
    class Director;

    void swig_register_director(octave_swig_type *self, void *ptr, Director *d);
    void swig_director_destroyed(octave_swig_type *self, Director *d);
    void swig_director_set_self(Director *d, octave_swig_type *self);

    octave_base_value *swig_value_ref(octave_swig_type *ost);
    octave_swig_type *swig_value_deref(const octave_value &ov);
    octave_swig_type *swig_value_deref(const octave_base_value &ov);

    struct hash_voidptr {
      int operator() (void *p) const {
	return (int) p;
      }
    };
    typedef __gnu_cxx::hash_map < void *, Director *, hash_voidptr > rtdir_map;

    using namespace __gnu_cxx;
    SWIGINTERN rtdir_map &get_rtdir_map() {
      static swig_module_info *module = 0;
      if (!module)
	module = SWIG_GetModule(0);
      assert(module);
      if (!module->clientdata)
	module->clientdata = new rtdir_map;
      return *(rtdir_map *) module->clientdata;
    }

    SWIGINTERNINLINE void set_rtdir(void *vptr, Director *d) {
      get_rtdir_map()[vptr] = d;
    }

    SWIGINTERNINLINE void erase_rtdir(void *vptr) {
      get_rtdir_map().erase(vptr);
    }

    SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
      rtdir_map::const_iterator pos = get_rtdir_map().find(vptr);
      Director *rtdir = (pos != get_rtdir_map().end())? pos->second : 0;
      return rtdir;
    }
  }

  struct swig_octave_member {
    const char *name;
    octave_func method;
    octave_func get_method;
    octave_func set_method;
    int flags;			// 1 static, 2 global
    const char *doc;
    bool is_static() const {
      return flags &1;
    } bool is_global() const {
      return flags &2;
    }
  };

  struct swig_octave_class {
    const char *name;
    swig_type_info **type;
    int director;
    octave_func constructor;
    octave_func destructor;
    const swig_octave_member *members;
    const char **base_names;
    const swig_type_info **base;
  };

  // octave_swig_type plays the role of both the shadow class and the class 
  // representation within Octave, since there is no support for classes.
  //
  // These should really be decoupled, with the class support added to Octave
  // and the shadow class given by an m-file script. That would dramatically 
  // reduce the runtime complexity, and be more in line w/ other modules.

  class octave_swig_type:public octave_base_value {
    struct cpp_ptr {
      void *ptr;
      bool destroyed;
      cpp_ptr(void *_ptr):ptr(_ptr), destroyed(false) {
      }};
    typedef std::pair < const swig_type_info *, cpp_ptr > type_ptr_pair;

    swig_module_info *module;

    const swig_type_info *construct_type;	// type of special type object
    std::vector < type_ptr_pair > types;	// our c++ base classes
    int own;			// whether we call c++ destructors when we die

    typedef std::pair < const swig_octave_member *, octave_value > member_value_pair;
    typedef std::map < std::string, member_value_pair > member_map;
    member_map members;

    const swig_octave_member *find_member(const swig_type_info *type, const std::string &name) {
      if (!type->clientdata)
	return 0;
      swig_octave_class *c = (swig_octave_class *) type->clientdata;
      const swig_octave_member *m;
      for (m = c->members; m->name; ++m)
	if (m->name == name)
	  return m;
      for (int j = 0; c->base_names[j]; ++j) {
	if (!c->base[j]) {
	  if (!module)
	    module = SWIG_GetModule(0);
	  assert(module);
	  c->base[j] = SWIG_MangledTypeQueryModule(module, module, c->base_names[j]);
	}
	if (!c->base[j])
	  return 0;
	if ((m = find_member(c->base[j], name)))
	  return m;
      }
      return 0;
    }

    member_value_pair *find_member(const std::string &name, bool insert_if_not_found) {
      member_map::iterator it = members.find(name);
      if (it != members.end())
	return &it->second;
      const swig_octave_member *m;
      for (unsigned int j = 0; j < types.size(); ++j)
	if ((m = find_member(types[j].first, name)))
	  return &members.insert(std::make_pair(name, std::make_pair(m, octave_value()))).first->second;
      if (!insert_if_not_found)
	return 0;
      return &members[name];
    }

    const swig_type_info *find_base(const std::string &name, const swig_type_info *base) {
      if (!base) {
	for (unsigned int j = 0; j < types.size(); ++j) {
	  assert(types[j].first->clientdata);
	  swig_octave_class *cj = (swig_octave_class *) types[j].first->clientdata;
	  if (cj->name == name)
	    return types[j].first;
	}
	return 0;
      }
      assert(base->clientdata);
      swig_octave_class *c = (swig_octave_class *) base->clientdata;
      for (int j = 0; c->base_names[j]; ++j) {
	if (!c->base[j]) {
	  if (!module)
	    module = SWIG_GetModule(0);
	  assert(module);
	  c->base[j] = SWIG_MangledTypeQueryModule(module, module, c->base_names[j]);
	}
	if (!c->base[j])
	  return 0;
	assert(c->base[j]->clientdata);
	swig_octave_class *cj = (swig_octave_class *) c->base[j]->clientdata;
	if (cj->name == name)
	  return c->base[j];
      }
      return 0;
    }

    octave_value_list member_invoke(member_value_pair *m, const octave_value_list &args, int nargout) {
      if (m->second.is_defined())
	return m->second.subsref("(", std::list < octave_value_list > (1, args), nargout);
      else if (m->first && m->first->method)
	return m->first->method(args, nargout);
      error("member not defined or not invocable");
      return octave_value_list();
    }

    bool dispatch_unary_op(const std::string &symbol, octave_value &ret) {
      member_value_pair *m = find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(as_value());
      octave_value_list argout(member_invoke(m, args, 1));
      if (argout.length() < 1)
	return false;
      ret = argout(0);
      return true;
    }

    bool dispatch_binary_op(const std::string &symbol, const octave_base_value &rhs, octave_value &ret) {
      member_value_pair *m = find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(as_value());
      args.append(make_value_hack(rhs));
      octave_value_list argout(member_invoke(m, args, 1));
      if (argout.length() < 1)
	return false;
      ret = argout(0);
      return true;
    }

    bool dispatch_index_op(const std::string &symbol, const octave_value_list &rhs, octave_value_list &ret) {
      member_value_pair *m = find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(as_value());
      args.append(rhs);
      octave_value_list argout(member_invoke(m, args, 1));
      if (argout.length() >= 1)
	ret = argout(0);
      return true;
    }

    octave_value_list member_deref(member_value_pair *m, const octave_value_list &args) {
      if (m->second.is_defined())
	return m->second;
      else if (m->first) {
	if (m->first->get_method)
	  return m->first->get_method(args, 1);
	else if (m->first->method)
	  return octave_value(new octave_builtin(m->first->method));
      }
      error("undefined member");
      return octave_value_list();
    }

    static octave_value make_value_hack(const octave_base_value &x) {
      ((octave_swig_type &) x).count++;
      return octave_value((octave_base_value *) &x);
    }

    octave_swig_type(const octave_swig_type &x);
    octave_swig_type &operator=(const octave_swig_type &rhs);
  public:

    octave_swig_type(void *_ptr = 0, const swig_type_info *_type = 0, int _own = 0)
      :	module(0), construct_type(_ptr ? 0 : _type), own(_own) {
      if (_type || _ptr)
	types.push_back(std::make_pair(_type, _ptr));
      if (_ptr) {
	Swig::Director *d = Swig::get_rtdir(_ptr);
	if (d)
	  Swig::swig_director_set_self(d, this);
      }
    }

    ~octave_swig_type() {
      if (own) {
	++count;
	for (unsigned int j = 0; j < types.size(); ++j) {
	  if (!types[j].first || !types[j].first->clientdata)
	    continue;
	  swig_octave_class *c = (swig_octave_class *) types[j].first->clientdata;
	  if (c->destructor && !types[j].second.destroyed && types[j].second.ptr) {
	    c->destructor(as_value(), 0);
	  }
	}
      }
      for (unsigned int j = 0; j < types.size(); ++j)
	Swig::erase_rtdir(types[j].second.ptr);
    }

    octave_value as_value() {
      ++count;
      return Swig::swig_value_ref(this);
    }

    void incref() {
      ++count;
    }

    void decref() {
      if (!--count)
	delete this;
    }

    long swig_this() const {
      if (!types.size())
	return (long) this;
      return (long) types[0].second.ptr;
    }

    std::string swig_type_name() const {
      // * need some way to manually name subclasses.
      // * eg optional first arg to subclass(), or named_subclass()
      std::string ret;
      for (unsigned int j = 0; j < types.size(); ++j) {
	if (j)
	  ret += "_";
	if (types[j].first->clientdata) {
	  swig_octave_class *c = (swig_octave_class *) types[j].first->clientdata;
	  ret += c->name;
	} else
	  ret += types[j].first->name;
      }
      return ret;
    }

    void merge(octave_swig_type &rhs) {
      rhs.own = 0;
      for (unsigned int j = 0; j < rhs.types.size(); ++j) {
	assert(!rhs.types[j].second.destroyed);
	Swig::Director *d = Swig::get_rtdir(rhs.types[j].second.ptr);
	if (d)
	  Swig::swig_director_set_self(d, this);
      }
      types.insert(types.end(), rhs.types.begin(), rhs.types.end());
      members.insert(rhs.members.begin(), rhs.members.end());
      rhs.types.clear();
      rhs.members.clear();
    }

    void install_global() {
      for (member_map::const_iterator it = members.begin(); it != members.end(); ++it) {
	if (it->second.first && it->second.first->method)
	  install_builtin_function(it->second.first->method, it->first,
				   /*it->second.first->doc?it->second.first->doc:*/std::string());
	else if (it->second.second.is_defined()) {
	  link_to_global_variable(curr_sym_tab->lookup(it->first, true));
	  set_global_value(it->first, it->second.second);
	}
      }
    }

    void *cast(swig_type_info *type, int *_own, int flags) {
      if (_own)
	*_own = own;
      if (flags &SWIG_POINTER_DISOWN)
	own = 0;
      if (!type && types.size())
	return types[0].second.ptr;
      for (unsigned int j = 0; j < types.size(); ++j)
	if (type == types[j].first)
	  return types[j].second.ptr;
      for (unsigned int j = 0; j < types.size(); ++j) {
	swig_cast_info *tc = SWIG_TypeCheck(types[j].first->name, type);
	if (!tc)
	  continue;
	int newmemory = 0;
	void *vptr = SWIG_TypeCast(tc, types[j].second.ptr, &newmemory);
	assert(!newmemory);	// newmemory handling not yet implemented
	return vptr;
      }
      return 0;
    }

    bool is_owned() const {
      return own;
    }

    void director_destroyed(Swig::Director *d) {
      bool found = false;
      for (unsigned int j = 0; j < types.size(); ++j) {
	Swig::Director *dj = Swig::get_rtdir(types[j].second.ptr);
	if (dj == d) {
	  types[j].second.destroyed = true;
	  found = true;
	}
      }
      assert(found);
    }

    void assign(const std::string &name, const octave_value &ov) {
      members[name] = std::make_pair((const swig_octave_member *) 0, ov);
    }

    void assign(const std::string &name, const swig_octave_member *m) {
      members[name] = std::make_pair(m, octave_value());
    }

    octave_base_value *clone() const {
      // pass-by-value is probably not desired, and is harder;
      // requires calling copy constructors of contained types etc.
      assert(0);
      *(int *) 0 = 0;
      return 0;
    }

    octave_base_value *empty_clone() const {
      return new octave_swig_type();
    }

    bool is_defined() const {
      return true;
    }

    virtual bool is_map() const {
      return true;
    }

    virtual octave_value subsref(const std::string &ops, const std::list < octave_value_list > &idx) {
      octave_value_list ovl = subsref(ops, idx, 1);
      return ovl.length()? ovl(0) : octave_value();
    }

    virtual octave_value_list subsref(const std::string &ops, const std::list < octave_value_list > &idx, int nargout) {
      assert(ops.size() > 0);
      assert(ops.size() == idx.size());

      std::list < octave_value_list >::const_iterator idx_it = idx.begin();
      int skip = 0;
      octave_value_list sub_ovl;

      // constructor invocation
      if (ops[skip] == '(' && construct_type) {
	assert(construct_type->clientdata);
	swig_octave_class *c = (swig_octave_class *) construct_type->clientdata;
	if (!c->constructor) {
	  error("cannot create instance");
	  return octave_value_list();
	}
	octave_value_list args;
	if (c->director)
	  args.append(Swig::swig_value_ref(new octave_swig_type(this, 0, 0)));
	args.append(*idx_it++);
	++skip;
	sub_ovl = c->constructor(args, nargout);
      }
      // member dereference or invocation
      else if (ops[skip] == '.') {
	std::string subname;
	const swig_type_info *base = 0;	// eg, a.base.base_cpp_mem
	for (;;) {
	  octave_value_list subname_ovl(*idx_it++);
	  ++skip;
	  assert(subname_ovl.length() == 1 && subname_ovl(0).is_string());
	  subname = subname_ovl(0).string_value();

	  const swig_type_info *next_base = find_base(subname, base);
	  if (!next_base || skip >= (int) ops.size() || ops[skip] != '.')
	    break;
	  base = next_base;
	}

	member_value_pair tmp, *m = &tmp;
	if (!base || !(m->first = find_member(base, subname)))
	  m = find_member(subname, false);
	if (!m) {
	  error("member not found");
	  return octave_value_list();
	}

	octave_value_list args;
	if (!m->first || (!m->first->is_static() && !m->first->is_global()))
	  args.append(as_value());
	if (skip < (int) ops.size() && ops[skip] == '(' && ((m->first && m->first->method) || m->second.is_function() || m->second.is_function_handle())) {
	  args.append(*idx_it++);
	  ++skip;
	  sub_ovl = member_invoke(m, args, nargout);
	} else {
	  sub_ovl = member_deref(m, args);
	}
      }
      // index operator
      else {
	if (ops[skip] == '(' || ops[skip] == '{') {
	  const char *op_name = ops[skip] == '(' ? "__paren" : "__brace";
	  octave_value_list args;
	  args.append(*idx_it++);
	  ++skip;
	  if (!dispatch_index_op(op_name, args, sub_ovl)) {
	    error("error evaluating index operator");
	    return octave_value_list();
	  }
	} else {
	  error("unsupported subsref");
	  return octave_value_list();
	}
      }

      if (skip >= (int) ops.size())
	return sub_ovl;
      if (sub_ovl.length() < 1) {
	error("bad subs ref");
	return octave_value_list();
      }
      return sub_ovl(0).next_subsref(nargout, ops, idx, skip);
    }

    octave_value subsasgn(const std::string &ops, const std::list < octave_value_list > &idx, const octave_value &rhs) {
      assert(ops.size() > 0);
      assert(ops.size() == idx.size());

      std::list < octave_value_list >::const_iterator idx_it = idx.begin();
      int skip = 0;

      if (ops.size() > 1) {
	std::list < octave_value_list >::const_iterator last = idx.end();
	--last;
	std::list < octave_value_list > next_idx(idx.begin(), last);
	octave_value next_ov = subsref(ops.substr(0, ops.size() - 1), next_idx);
	next_ov.subsasgn(ops.substr(ops.size() - 1), std::list < octave_value_list > (1, *last), rhs);
      }

      else if (ops[skip] == '(' || ops[skip] == '{') {
	const char *op_name = ops[skip] == '(' ? "__paren_asgn" : "__brace_asgn";
	member_value_pair *m = find_member(op_name, false);
	if (m) {
	  octave_value_list args;
	  args.append(as_value());
	  args.append(*idx_it);
	  args.append(rhs);
	  member_invoke(m, args, 1);
	} else
	  error("%s member not found", op_name);
      }

      else if (ops[skip] == '.') {
	octave_value_list subname_ovl(*idx_it++);
	++skip;
	assert(subname_ovl.length() == 1 &&subname_ovl(0).is_string());
	std::string subname = subname_ovl(0).string_value();

	member_value_pair *m = find_member(subname, true);
	if (!m->first || !m->first->set_method) {
	  m->first = 0;
	  m->second = rhs;
	} else if (m->first->set_method) {
	  octave_value_list args;
	  if (!m->first->is_static() && !m->first->is_global())
	    args.append(as_value());
	  args.append(rhs);
	  m->first->set_method(args, 1);
	} else
	  error("member not assignable");
      } else
	error("unsupported subsasgn");

      return as_value();
    }

    virtual bool is_string() const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      return !!nc_this->find_member("__str", false);
    }

    virtual std::string string_value(bool force = false) const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      member_value_pair *m = nc_this->find_member("__str", false);
      if (!m) {
	error("__str method not defined");
	return std::string();
      }
      octave_value_list outarg = nc_this->member_invoke(m, octave_value_list(nc_this->as_value()), 1);
      if (outarg.length() < 1 || !outarg(0).is_string()) {
	error("__str method did not return a string");
	return std::string();
      }
      return outarg(0).string_value();
    }

    virtual octave_value convert_to_str(bool pad = false, bool force = false, char type = '"') const {
      return string_value();
    }

    virtual octave_value convert_to_str_internal(bool pad, bool force, char type) const {
      return string_value();
    }

    static bool dispatch_global_op(const std::string &symbol, const octave_value_list &args, octave_value &ret) {
      // we assume that "op_"-prefixed functions are installed in global namespace
      // (rather than any module namespace).

      octave_value fcn = get_global_value(symbol, true);
      if (!fcn.is_function() && !fcn.is_function_handle())
	return false;
      ret = fcn.subsref("(", std::list < octave_value_list > (1, args));
      return true;
    }

    static octave_value dispatch_unary_op(const octave_base_value &x, const char *op_name) {
      octave_swig_type *ost = Swig::swig_value_deref(x);
      assert(ost);

      octave_value ret;
      if (ost->dispatch_unary_op(std::string("__") + op_name, ret))
	return ret;
      std::string symbol = "op_" + ost->swig_type_name() + "_" + op_name;
      octave_value_list args;
      args.append(make_value_hack(x));
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      error("could not dispatch unary operator");
      return octave_value();
    }

    static octave_value dispatch_binary_op(const octave_base_value &lhs, const octave_base_value &rhs, const char *op_name) {
      octave_swig_type *lhs_ost = Swig::swig_value_deref(lhs);
      octave_swig_type *rhs_ost = Swig::swig_value_deref(rhs);

      octave_value ret;
      if (lhs_ost && lhs_ost->dispatch_binary_op(std::string("__") + op_name, rhs, ret))
	return ret;

      std::string symbol;
      octave_value_list args;
      args.append(make_value_hack(lhs));
      args.append(make_value_hack(rhs));

      symbol = "op_";
      symbol += lhs_ost ? lhs_ost->swig_type_name() : lhs.type_name();
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += rhs_ost ? rhs_ost->swig_type_name() : rhs.type_name();
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      symbol = "op_";
      symbol += lhs_ost ? lhs_ost->swig_type_name() : lhs.type_name();
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += "any";
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      symbol = "op_";
      symbol += "any";
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += rhs_ost ? rhs_ost->swig_type_name() : rhs.type_name();
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      error("could not dispatch binary operator");
      return octave_value();
    }

    void print(std::ostream &os, bool pr_as_read_syntax = false) const {
      if (is_string()) {
	os << string_value();
	return;
      }

      os << "{" << std::endl;
      for (unsigned int j = 0; j < types.size(); ++j) {
	if (types[j].first->clientdata) {
	  const swig_octave_class *c = (const swig_octave_class *) types[j].first->clientdata;
	  os << "  " << c->name << ", ptr = " << types[j].second.ptr << std::endl;
	} else {
	  os << "  " << types[j].first->name << ", ptr = " << types[j].second.ptr << std::endl;
	}
      }
      for (member_map::const_iterator it = members.begin(); it != members.end(); ++it) {
	if (it->second.first) {
	  const char *objtype = it->second.first->method ? "method" : "variable";
	  const char *modifier = (it->second.first->flags &1) ? "static" : (it->second.first->flags &2) ? "global" : "";
	  os << it->second.first->name << " (c++ " << modifier << " " << objtype << ")" << std::endl;
	  assert(it->second.first->name == it->first);
	} else {
	  os << it->first << " (octave value)" << std::endl;
	}
      }
      os << "}" << std::endl;
    }
  };

  // Octave tries hard to preserve pass-by-value semantics. Eg, assignments
  // will call clone() via make_unique() if there is more than one outstanding 
  // reference to the lhs, and forces the clone's reference count to 1 
  // (so you can't just increment your own count and return this).
  //
  // One way to fix this (without modifying Octave) is to add a level of
  // indirection such that clone copies ref-counted pointer and we keep 
  // pass-by-ref semantics (which are more natural/expected for C++ bindings).
  //
  // Supporting both pass-by-{ref,value} and toggling via %feature/option 
  // might be nice.

  class octave_swig_ref:public octave_base_value {
    octave_swig_type *ptr;
  public:
    octave_swig_ref(octave_swig_type *_ptr = 0)
      :ptr(_ptr) { }

    ~octave_swig_ref()
      { if (ptr) ptr->decref(); }

    octave_swig_type *get_ptr() const
      { return ptr; }

    octave_base_value *clone() const
      { if (ptr) ptr->incref(); return new octave_swig_ref(ptr); }

    octave_base_value *empty_clone() const
      { return new octave_swig_ref(0); }

    bool is_defined() const
      { return ptr->is_defined(); }

    virtual bool is_map() const 
      { return ptr->is_map(); }

    virtual octave_value subsref(const std::string &ops, const std::list < octave_value_list > &idx) 
      { return ptr->subsref(ops, idx); }

    virtual octave_value_list subsref(const std::string &ops, const std::list < octave_value_list > &idx, int nargout)
      { return ptr->subsref(ops, idx, nargout); }

    octave_value subsasgn(const std::string &ops, const std::list < octave_value_list > &idx, const octave_value &rhs)
      { return ptr->subsasgn(ops, idx, rhs); }

    virtual bool is_string() const 
      { return ptr->is_string(); }

    virtual std::string string_value(bool force = false) const 
      { return ptr->string_value(force); }

    virtual octave_value convert_to_str(bool pad = false, bool force = false, char type = '"') const
      { return ptr->convert_to_str(pad, force, type); }

    virtual octave_value convert_to_str_internal(bool pad, bool force, char type) const
      { return ptr->convert_to_str_internal(pad, force, type); }

    void print(std::ostream &os, bool pr_as_read_syntax = false) const
      { return ptr->print(os, pr_as_read_syntax); }

  private:
    DECLARE_OCTAVE_ALLOCATOR;
    DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA;
  };
  DEFINE_OCTAVE_ALLOCATOR(octave_swig_ref);
  DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_swig_ref, "swig_ref", "swig_ref");

  class octave_swig_packed:public octave_base_value {
    swig_type_info *type;
    std::vector < char > buf;
  public:

    octave_swig_packed(swig_type_info *_type = 0, const char *_buf = 0, size_t _buf_len = 0)
      :	type(_type), buf(_buf, _buf + _buf_len) {
    }

    bool copy(swig_type_info *outtype, char *ptr, size_t sz) {
      if (outtype && outtype != type)
	return false;
      assert(sz <= buf.size());
      std::copy(&buf[0], &buf[sz], ptr);
      return true;
    }

    octave_base_value *clone() const {
      return new octave_swig_packed(*this);
    }

    octave_base_value *empty_clone() const {
      return new octave_swig_packed();
    }

    bool is_defined() const {
      return true;
    }

    void print(std::ostream &os, bool pr_as_read_syntax = false) const {
      os << "swig packed type: name = " << type->name << ", len = " << buf.size() << std::endl;
    }
  private:
    DECLARE_OCTAVE_ALLOCATOR;
    DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA;
  };
  DEFINE_OCTAVE_ALLOCATOR(octave_swig_packed);
  DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_swig_packed, "swig_packed", "swig_packed");

  static octave_value_list octave_set_immutable(const octave_value_list &args, int nargout) {
    error("attempt to set immutable member variable");
    return octave_value_list();
  }

  struct octave_value_ref {
    const octave_value_list &ovl;
    int j;

    octave_value_ref(const octave_value_list &_ovl, int _j)
      :ovl(_ovl), j(_j) { }

    operator  octave_value() const {
      return ovl(j);
    }

    octave_value operator*() const {
      return ovl(j);
    }
  };

  octave_value_list swig_subclass(const octave_value_list &args, int nargout) {
    octave_swig_type *top = new octave_swig_type;
    for (int j = 0; j < args.length(); ++j) {
      if (args(j).type_id() == octave_swig_ref::static_type_id()) {
	octave_swig_ref *osr = static_cast < octave_swig_ref *>(args(j).internal_rep());
	octave_swig_type *ost = osr->get_ptr();
	if (!ost->is_owned()) {
	  error("cannot subclass object not constructed on octave side");
	  return octave_value_list();
	}
	top->merge(*ost);
      } else if (args(j).is_function_handle()) {
	top->assign(args(j).fcn_handle_value()->fcn_name(), args(j));
      } else if (args(j).is_string()) {
	if (j + 1 >= args.length()) {
	  error("member assignments must be of string,value form");
	  return octave_value_list();
	}
	top->assign(args(j).string_value(), args(j + 1));
	++j;
      } else {
	error("invalid arguments to subclass");
	return octave_value_list();
      }
    }
    return octave_value(Swig::swig_value_ref(top));
  }

  octave_value_list swig_type(const octave_value_list &args, int nargout) {
    if (args.length() != 1) {
      error("swig_typeinfo must be called with only a single object");
      return octave_value_list();
    }
    octave_swig_type *ost = Swig::swig_value_deref(args(0));
    if (!ost) {
      error("object is not a swig_ref");
      return octave_value_list();
    }
    return octave_value(ost->swig_type_name());
  }

  octave_value_list swig_typequery(const octave_value_list &args, int nargout) {
    if (args.length() != 1 || !args(0).is_string()) {
      error("swig_typeinfo must be called with single string argument");
      return octave_value_list();
    }
    swig_module_info *module = SWIG_GetModule(0);
    swig_type_info *type = SWIG_TypeQueryModule(module, module, args(0).string_value().c_str());
    if (!type)
      return octave_value("<unknown>");
    return octave_value(type->name);
  }

  octave_value_list swig_this(const octave_value_list &args, int nargout) {
    if (args.length() != 1) {
      error("swig_typeinfo must be called with only a single object");
      return octave_value_list();
    }
    octave_swig_type *ost = Swig::swig_value_deref(args(0));
    if (!ost) {
      error("object is not a swig_ref");
      return octave_value_list();
    }
    return octave_value(octave_uint64((unsigned long long) ost->swig_this()));
  }


#define SWIG_DIRECTORS

  struct Director;
  class octave_swig_type;

  namespace Swig {
    class Director {
      octave_swig_type *self;
      bool disowned;

      Director(const Director &x);
      Director &operator=(const Director &rhs);
    public:

      Director(void *vptr):self(0), disowned(false) {
	set_rtdir(vptr, this);
      }

      ~Director() {
	swig_director_destroyed(self, this);
	if (disowned)
	  self->decref();
      }

      void swig_set_self(octave_swig_type *new_self) {
	assert(!disowned);
	self = new_self;
      }

      octave_swig_type *swig_get_self() const {
	return self;
      }

      void swig_disown() {
	if (disowned)
	  return;
	disowned = true;
	self->incref();
      }
    };

    struct DirectorTypeMismatchException {
      static void raise(const char *msg) {
	// ... todo
	throw(DirectorTypeMismatchException());
      }

      static void raise(const octave_value &ov, const char *msg) {
	// ... todo
	raise(msg);
      }
    };
    struct DirectorPureVirtualException {
      static void raise(const char *msg) {
	// ... todo
	throw(DirectorPureVirtualException());
      }

      static void raise(const octave_value &ov, const char *msg) {
	// ... todo
	raise(msg);
      }
    };

  }

  void swig_acquire_ownership(void *vptr) {
    //  assert(0);
    // ... todo
  }

  void swig_acquire_ownership_array(void *vptr) {
    //  assert(0);
    // ... todo
  }

  void swig_acquire_ownership_obj(void *vptr, int own) {
    //  assert(0);
    // ... todo
  }

  namespace Swig {
    void swig_director_destroyed(octave_swig_type *self, Director *d) {
      self->director_destroyed(d);
    }

    void swig_director_set_self(Director *d, octave_swig_type *self) {
      d->swig_set_self(self);
    }

    octave_base_value *swig_value_ref(octave_swig_type *ost) {
      return new octave_swig_ref(ost);
    }

    octave_swig_type *swig_value_deref(const octave_value &ov) {
      return swig_value_deref(*ov.internal_rep());
    }

    octave_swig_type *swig_value_deref(const octave_base_value &ov) {
      if (ov.type_id() != octave_swig_ref::static_type_id())
	return 0;
      const octave_swig_ref *osr = static_cast < const octave_swig_ref *>(&ov);
      return osr->get_ptr();
    }

  }

  SWIGRUNTIME octave_value SWIG_Octave_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
    int own = (flags &SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;

    Swig::Director *d = Swig::get_rtdir(ptr);
    if (d && d->swig_get_self())
      return d->swig_get_self()->as_value();
    return Swig::swig_value_ref(new octave_swig_type(ptr, type, own));
  }

  SWIGRUNTIME int SWIG_Octave_ConvertPtrAndOwn(const octave_value &ov, void **ptr, swig_type_info *type, int flags, int *own) {
    if (!ov.is_defined()) {
      if (ptr)
	*ptr = 0;
      return SWIG_OK;
    }
    if (ov.type_id() != octave_swig_ref::static_type_id())
      return SWIG_TypeError;
    octave_swig_ref *osr = static_cast < octave_swig_ref *>(ov.internal_rep());
    octave_swig_type *ost = osr->get_ptr();
    void *vptr = ost->cast(type, own, flags);
    if (!vptr)
      return SWIG_TypeError;
    if (ptr)
      *ptr = vptr;
    return SWIG_OK;
  }

  SWIGRUNTIMEINLINE octave_value SWIG_Octave_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
    return new octave_swig_packed(type, (char *) ptr, sz);
  }

  SWIGRUNTIME int SWIG_Octave_ConvertPacked(const octave_value &ov, void *ptr, size_t sz, swig_type_info *type) {
    if (!ov.is_defined())
      return SWIG_TypeError;
    if (ov.type_id() != octave_swig_packed::static_type_id())
      return SWIG_TypeError;
    octave_swig_packed *ost = static_cast < octave_swig_packed *>(ov.internal_rep());
    return ost->copy(type, (char *) ptr, sz) ? SWIG_OK : SWIG_TypeError;
  }

  void SWIG_Octave_SetConstant(octave_swig_type *module_ns, const std::string &name, const octave_value &ov) {
    module_ns->assign(name, ov);
  }


#define swig_unary_op(name) \
octave_value swig_unary_op_##name(const octave_base_value &x) { \
  return octave_swig_type::dispatch_unary_op(x,#name); \
}
#define swig_binary_op(name) \
octave_value swig_binary_op_##name(const octave_base_value&lhs,const octave_base_value &rhs) { \
  return octave_swig_type::dispatch_binary_op(lhs,rhs,#name); \
}
#define swigreg_unary_op(name) \
if (!octave_value_typeinfo::lookup_unary_op(octave_value::op_##name,tid)) \
octave_value_typeinfo::register_unary_op(octave_value::op_##name,tid,swig_unary_op_##name);
#define swigreg_binary_op(name) \
if (!octave_value_typeinfo::lookup_binary_op(octave_value::op_##name,tid1,tid2)) \
octave_value_typeinfo::register_binary_op(octave_value::op_##name,tid1,tid2,swig_binary_op_##name);

  swig_unary_op(not);
  swig_unary_op(uplus);
  swig_unary_op(uminus);
  swig_unary_op(transpose);
  swig_unary_op(hermitian);
  swig_unary_op(incr);
  swig_unary_op(decr);

  swig_binary_op(add);
  swig_binary_op(sub);
  swig_binary_op(mul);
  swig_binary_op(div);
  swig_binary_op(pow);
  swig_binary_op(ldiv);
  swig_binary_op(lshift);
  swig_binary_op(rshift);
  swig_binary_op(lt);
  swig_binary_op(le);
  swig_binary_op(eq);
  swig_binary_op(ge);
  swig_binary_op(gt);
  swig_binary_op(ne);
  swig_binary_op(el_mul);
  swig_binary_op(el_div);
  swig_binary_op(el_pow);
  swig_binary_op(el_ldiv);
  swig_binary_op(el_and);
  swig_binary_op(el_or);

  void swig_install_unary_ops(int tid) {
    swigreg_unary_op(not);
    swigreg_unary_op(uplus);
    swigreg_unary_op(uminus);
    swigreg_unary_op(transpose);
    swigreg_unary_op(hermitian);
    swigreg_unary_op(incr);
    swigreg_unary_op(decr);
  }
  void swig_install_binary_ops(int tid1, int tid2) {
    swigreg_binary_op(add);
    swigreg_binary_op(sub);
    swigreg_binary_op(mul);
    swigreg_binary_op(div);
    swigreg_binary_op(pow);
    swigreg_binary_op(ldiv);
    swigreg_binary_op(lshift);
    swigreg_binary_op(rshift);
    swigreg_binary_op(lt);
    swigreg_binary_op(le);
    swigreg_binary_op(eq);
    swigreg_binary_op(ge);
    swigreg_binary_op(gt);
    swigreg_binary_op(ne);
    swigreg_binary_op(el_mul);
    swigreg_binary_op(el_div);
    swigreg_binary_op(el_pow);
    swigreg_binary_op(el_ldiv);
    swigreg_binary_op(el_and);
    swigreg_binary_op(el_or);
  }
  void swig_install_ops(int tid) {
    // here we assume that tid are conseq integers increasing from zero, and 
    // that our tid is the last one. might be better to have explicit string 
    // list of types we should bind to, and use lookup_type to resolve their tid.

    swig_install_unary_ops(tid);
    swig_install_binary_ops(tid, tid);
    for (int j = 0; j < tid; ++j) {
      swig_install_binary_ops(j, tid);
      swig_install_binary_ops(tid, j);
    }
  }

}



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_LIST swig_types[0]
#define SWIGTYPE_p_MEM_ROOT swig_types[1]
#define SWIGTYPE_p_MYSQL_FIELD_OFFSET swig_types[2]
#define SWIGTYPE_p_MYSQL_ROW swig_types[3]
#define SWIGTYPE_p_MYSQL_ROW_OFFSET swig_types[4]
#define SWIGTYPE_p_NET swig_types[5]
#define SWIGTYPE_p_char swig_types[6]
#define SWIGTYPE_p_character_set swig_types[7]
#define SWIGTYPE_p_charset_info_st swig_types[8]
#define SWIGTYPE_p_embedded_query_result swig_types[9]
#define SWIGTYPE_p_f_p_MYSQL__p_st_mysql_field swig_types[10]
#define SWIGTYPE_p_f_p_MYSQL__p_st_mysql_res swig_types[11]
#define SWIGTYPE_p_f_p_MYSQL_p_MYSQL_FIELD_unsigned_int__p_st_mysql_data swig_types[12]
#define SWIGTYPE_p_f_p_NET_p_st_mysql_bind__void swig_types[13]
#define SWIGTYPE_p_f_p_p_void_p_q_const__char_p_void__int swig_types[14]
#define SWIGTYPE_p_f_p_st_mysql__my_bool swig_types[15]
#define SWIGTYPE_p_f_p_st_mysql__p_char swig_types[16]
#define SWIGTYPE_p_f_p_st_mysql__void swig_types[17]
#define SWIGTYPE_p_f_p_st_mysql_bind_p_st_mysql_field_p_p_unsigned_char__void swig_types[18]
#define SWIGTYPE_p_f_p_st_mysql_enum_enum_server_command_p_q_const__char_unsigned_long_p_q_const__char_unsigned_long_my_bool_p_st_mysql_stmt__my_bool swig_types[19]
#define SWIGTYPE_p_f_p_st_mysql_p_char_p_q_const__char__int swig_types[20]
#define SWIGTYPE_p_f_p_st_mysql_p_p_char__int swig_types[21]
#define SWIGTYPE_p_f_p_st_mysql_p_st_mysql_stmt__my_bool swig_types[22]
#define SWIGTYPE_p_f_p_st_mysql_stmt__int swig_types[23]
#define SWIGTYPE_p_f_p_st_mysql_stmt_p_p_unsigned_char__int swig_types[24]
#define SWIGTYPE_p_f_p_unsigned_long_MYSQL_ROW_unsigned_int__void swig_types[25]
#define SWIGTYPE_p_f_p_void__void swig_types[26]
#define SWIGTYPE_p_f_p_void_p_char_p_unsigned_long__p_char swig_types[27]
#define SWIGTYPE_p_f_p_void_p_char_unsigned_int__int swig_types[28]
#define SWIGTYPE_p_generic_db swig_types[29]
#define SWIGTYPE_p_gptr swig_types[30]
#define SWIGTYPE_p_my_bool swig_types[31]
#define SWIGTYPE_p_mysql_db swig_types[32]
#define SWIGTYPE_p_p_char swig_types[33]
#define SWIGTYPE_p_st_dynamic_array swig_types[34]
#define SWIGTYPE_p_st_mysql swig_types[35]
#define SWIGTYPE_p_st_mysql_bind swig_types[36]
#define SWIGTYPE_p_st_mysql_data swig_types[37]
#define SWIGTYPE_p_st_mysql_field swig_types[38]
#define SWIGTYPE_p_st_mysql_manager swig_types[39]
#define SWIGTYPE_p_st_mysql_methods swig_types[40]
#define SWIGTYPE_p_st_mysql_options swig_types[41]
#define SWIGTYPE_p_st_mysql_parameters swig_types[42]
#define SWIGTYPE_p_st_mysql_res swig_types[43]
#define SWIGTYPE_p_st_mysql_rows swig_types[44]
#define SWIGTYPE_p_st_mysql_stmt swig_types[45]
#define SWIGTYPE_p_unsigned_char swig_types[46]
#define SWIGTYPE_p_unsigned_long swig_types[47]
#define SWIGTYPE_p_unsigned_long_long swig_types[48]
#define SWIGTYPE_p_void swig_types[49]
static swig_type_info *swig_types[51];
static swig_module_info swig_module = {swig_types, 50, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#define SWIGVERSION 0x010334 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>


#include <mysql/mysql.h>
#include "generic_db.h"
#undef max_allowed_packet
#undef net_buffer_length


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  SWIGINTERN int SWIG_AsVal_long (const octave_value& ov, long* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (ov.is_double_type()||ov.is_single_type()) {
	double v=ov.double_value();
	if (v!=floor(v))
	  return SWIG_TypeError;
      }
      if (val)
	*val = ov.long_value();
      return SWIG_OK;
    }


SWIGINTERN int
SWIG_AsVal_int (octave_value obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (int)(v);
    }
  }  
  return res;
}

SWIGINTERN char const *MYSQL_ROW___paren(MYSQL_ROW const *self,int i){
    return (*self)[i];
  }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE octave_value
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return std::string(carray,carray+size);
}


SWIGINTERNINLINE octave_value 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


  SWIGINTERNINLINE octave_value SWIG_From_long    (long value)
    {    
      return octave_value(value);
    }


SWIGINTERNINLINE octave_value
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(const octave_value& ov, char** cptr, size_t* psize, int *alloc)
{
  if (!ov.is_string())
    return SWIG_TypeError;
  
  std::string str=ov.string_value();
  size_t len=str.size();
  char* cstr=(char*)str.c_str();
  if (alloc) {
    *cptr = (char*)(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
    *alloc = SWIG_NEWOBJ;
  } else if (cptr)
    *cptr = cstr;
  if (psize)
    *psize = len + 1;
  return SWIG_OK;
}





  SWIGINTERN int SWIG_AsVal_unsigned_SS_long (const octave_value& ov, unsigned long* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (ov.is_double_type()||ov.is_single_type()) {
	double v=ov.double_value();
	if (v<0)
	  return SWIG_OverflowError;  
	if (v!=floor(v))
	  return SWIG_TypeError;
      }
      if (ov.is_int8_type()||ov.is_int16_type()||
	  ov.is_int32_type()) {
	long v=ov.long_value();
	if (v<0)
	  return SWIG_OverflowError;  
      }
      if (ov.is_int64_type()) {
	long long v=ov.int64_scalar_value().value();
	if (v<0)
	  return SWIG_OverflowError;  
      }
      if (val)
	*val = ov.ulong_value();
      return SWIG_OK;
    }


  SWIGINTERNINLINE octave_value SWIG_From_unsigned_SS_long    (unsigned long value)
    {    
      return octave_value(value);
    }


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (octave_value obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned int)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE octave_value
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


  SWIGINTERN int SWIG_AsVal_unsigned_SS_long_SS_long (const octave_value& ov, unsigned long long* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (ov.is_double_type()||ov.is_single_type()) {
	double v=ov.double_value();
	if (v<0)
	  return SWIG_OverflowError;  
	if (v!=floor(v))
	  return SWIG_TypeError;
      }
      if (ov.is_int8_type()||ov.is_int16_type()||
	  ov.is_int32_type()) {
	long v=ov.long_value();
	if (v<0)
	  return SWIG_OverflowError;  
      }
      if (ov.is_int64_type()) {
	long long v=ov.int64_scalar_value().value();
	if (v<0)
	  return SWIG_OverflowError;  
      }
      if (val) {
	if (ov.is_int64_type())
	  *val = ov.int64_scalar_value().value();
	else if (ov.is_uint64_type())
	  *val = ov.uint64_scalar_value().value();
	else
	  *val = ov.long_value();
      }
      return SWIG_OK;
    }


  SWIGINTERNINLINE octave_value SWIG_From_unsigned_SS_long_SS_long    (unsigned long long value)
    {    
      return octave_uint64(value);
    }


SWIGINTERN int
SWIG_AsCharArray(octave_value obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (octave_value obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned char)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE octave_value
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


  struct mysql_db : generic_db {
    MYSQL* db;
    mysql_db(const char* host,
	     const char* user,
	     const char* password,
	     const char* db_name) {
      db=mysql_init(0);
      if (!db) {
	error("failed to create MYSQL structure");
	return;
      }
      if (!mysql_real_connect(db,"localhost","root","secret","testdb",0,0,0)) {
	error("connect to database failed: error %i: %s",
	      mysql_errno(db),mysql_error(db));
	return;
      }
    }
    ~mysql_db() {
      if (db)
	mysql_close(db);
    }
    virtual Cell sql(const char* query) {
      if (!db) {
	error("invalid state");
	return Cell();
      }

      if (mysql_query(db,query)) {
	error("query failed: error %i: %s",
	      mysql_errno(db),mysql_error(db));
	return Cell();
      }

      MYSQL_RES* res=mysql_store_result(db);
      if (!res)
	return Cell();

      unsigned int nc=mysql_field_count(db);
      unsigned int nr=(unsigned int)(mysql_num_rows(res));

      std::vector<MYSQL_FIELD*> fields(nc);
      for (unsigned int j=0;j<nc;++j)
	fields[j]=mysql_fetch_field_direct(res,j);

      Cell c(nr,nc);
      octave_value ov;
      for (unsigned int j=0;j<nr;++j) {
	MYSQL_ROW row=mysql_fetch_row(res);
	for (unsigned int k=0;k<nc;++k) {
	  switch (fields[k]->type) {
	  case MYSQL_TYPE_DECIMAL:
	  case MYSQL_TYPE_SHORT:
	  case MYSQL_TYPE_TINY:
	  case MYSQL_TYPE_LONG:
	  case MYSQL_TYPE_INT24:
	    ov=octave_value(atol(row[k]));
	    break;
	  case MYSQL_TYPE_FLOAT:
	  case MYSQL_TYPE_DOUBLE:
	    ov=octave_value(atof(row[k]));
	    break;
	  case MYSQL_TYPE_LONGLONG:
	    ov=octave_value(octave_int64(atoll(row[k])));
	    break;
	  case MYSQL_TYPE_NULL:
	    ov=SWIG_NewPointerObj(0,SWIGTYPE_p_void,0);
	    break;
	  default:
	    ov=octave_value(std::string(row[k]));
	  }
	  c(j,k)=ov;
	}
      }

      mysql_free_result(res);
      return c;
    }
  };

static octave_value_list _wrap_MYSQL_ROW___paren (const octave_value_list& args, int nargout) {
  MYSQL_ROW *arg1 = (MYSQL_ROW *) 0 ;
  int arg2 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_ROW___paren",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_MYSQL_ROW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_ROW___paren" "', argument " "1"" of type '" "MYSQL_ROW const *""'"); 
  }
  arg1 = (MYSQL_ROW *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_ROW___paren" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (char *)MYSQL_ROW___paren((MYSQL_ROW const *)arg1,arg2);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_MYSQL_ROW (const octave_value_list& args, int nargout) {
  MYSQL_ROW *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_MYSQL_ROW",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (MYSQL_ROW *)new MYSQL_ROW();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MYSQL_ROW, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_MYSQL_ROW (const octave_value_list& args, int nargout) {
  MYSQL_ROW *arg1 = (MYSQL_ROW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_MYSQL_ROW",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_MYSQL_ROW, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MYSQL_ROW" "', argument " "1"" of type '" "MYSQL_ROW *""'"); 
  }
  arg1 = (MYSQL_ROW *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_MYSQL_ROW_members[] = {
{"__paren",_wrap_MYSQL_ROW___paren,0,0,0,0},
{0,0,0,0}
};
static const char *swig_MYSQL_ROW_base_names[] = {0};
static const swig_type_info *swig_MYSQL_ROW_base[] = {0};
static swig_octave_class _wrap_class_MYSQL_ROW = {"MYSQL_ROW", &SWIGTYPE_p_MYSQL_ROW,0,_wrap_new_MYSQL_ROW,_wrap_delete_MYSQL_ROW,swig_MYSQL_ROW_members,swig_MYSQL_ROW_base_names,swig_MYSQL_ROW_base };

static octave_value_list _wrap_MYSQL_FIELD_name_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_name_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_name_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_FIELD_name_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->name) delete[] arg1->name;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->name = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->name = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_name_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_name_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_name_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (char *) ((arg1)->name);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_org_name_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_org_name_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_org_name_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_FIELD_org_name_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->org_name) delete[] arg1->org_name;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->org_name = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->org_name = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_org_name_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_org_name_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_org_name_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (char *) ((arg1)->org_name);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_table_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_table_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_table_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_FIELD_table_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->table) delete[] arg1->table;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->table = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->table = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_table_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_table_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_table_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (char *) ((arg1)->table);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_org_table_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_org_table_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_org_table_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_FIELD_org_table_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->org_table) delete[] arg1->org_table;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->org_table = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->org_table = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_org_table_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_org_table_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_org_table_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (char *) ((arg1)->org_table);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_db_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_db_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_db_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_FIELD_db_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->db) delete[] arg1->db;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->db = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->db = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_db_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_db_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_db_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (char *) ((arg1)->db);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_catalog_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_catalog_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_catalog_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_FIELD_catalog_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->catalog) delete[] arg1->catalog;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->catalog = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->catalog = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_catalog_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_catalog_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_catalog_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (char *) ((arg1)->catalog);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_def_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_def_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_def_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_FIELD_def_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->def) delete[] arg1->def;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->def = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->def = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_def_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_def_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_def_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (char *) ((arg1)->def);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_length_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_length_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_FIELD_length_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_length_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_length_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (unsigned long) ((arg1)->length);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_max_length_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_max_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_max_length_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_FIELD_max_length_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->max_length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_max_length_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_max_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_max_length_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (unsigned long) ((arg1)->max_length);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_name_length_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_name_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_name_length_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_FIELD_name_length_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->name_length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_name_length_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_name_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_name_length_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (unsigned int) ((arg1)->name_length);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_org_name_length_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_org_name_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_org_name_length_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_FIELD_org_name_length_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->org_name_length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_org_name_length_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_org_name_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_org_name_length_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (unsigned int) ((arg1)->org_name_length);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_table_length_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_table_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_table_length_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_FIELD_table_length_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->table_length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_table_length_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_table_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_table_length_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (unsigned int) ((arg1)->table_length);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_org_table_length_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_org_table_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_org_table_length_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_FIELD_org_table_length_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->org_table_length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_org_table_length_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_org_table_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_org_table_length_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (unsigned int) ((arg1)->org_table_length);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_db_length_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_db_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_db_length_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_FIELD_db_length_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->db_length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_db_length_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_db_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_db_length_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (unsigned int) ((arg1)->db_length);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_catalog_length_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_catalog_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_catalog_length_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_FIELD_catalog_length_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->catalog_length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_catalog_length_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_catalog_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_catalog_length_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (unsigned int) ((arg1)->catalog_length);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_def_length_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_def_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_def_length_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_FIELD_def_length_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->def_length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_def_length_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_def_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_def_length_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (unsigned int) ((arg1)->def_length);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_flags_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_flags_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_flags_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_FIELD_flags_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->flags = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_flags_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_flags_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_flags_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (unsigned int) ((arg1)->flags);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_decimals_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_decimals_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_decimals_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_FIELD_decimals_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->decimals = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_decimals_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_decimals_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_decimals_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (unsigned int) ((arg1)->decimals);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_charsetnr_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_charsetnr_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_charsetnr_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_FIELD_charsetnr_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->charsetnr = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_charsetnr_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_charsetnr_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_charsetnr_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (unsigned int) ((arg1)->charsetnr);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_type_set (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  enum enum_field_types arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_type_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_type_set" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_FIELD_type_set" "', argument " "2"" of type '" "enum enum_field_types""'");
  } 
  arg2 = (enum enum_field_types)(val2);
  if (arg1) (arg1)->type = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_FIELD_type_get (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  enum enum_field_types result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_FIELD_type_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_FIELD_type_get" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  result = (enum enum_field_types) ((arg1)->type);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_MYSQL_FIELD (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_MYSQL_FIELD",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (MYSQL_FIELD *)new MYSQL_FIELD();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_field, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_MYSQL_FIELD (const octave_value_list& args, int nargout) {
  MYSQL_FIELD *arg1 = (MYSQL_FIELD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_MYSQL_FIELD",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_field, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MYSQL_FIELD" "', argument " "1"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg1 = (MYSQL_FIELD *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_MYSQL_FIELD_members[] = {
{"name",0,_wrap_MYSQL_FIELD_name_get,_wrap_MYSQL_FIELD_name_set,0,0},
{"org_name",0,_wrap_MYSQL_FIELD_org_name_get,_wrap_MYSQL_FIELD_org_name_set,0,0},
{"table",0,_wrap_MYSQL_FIELD_table_get,_wrap_MYSQL_FIELD_table_set,0,0},
{"org_table",0,_wrap_MYSQL_FIELD_org_table_get,_wrap_MYSQL_FIELD_org_table_set,0,0},
{"db",0,_wrap_MYSQL_FIELD_db_get,_wrap_MYSQL_FIELD_db_set,0,0},
{"catalog",0,_wrap_MYSQL_FIELD_catalog_get,_wrap_MYSQL_FIELD_catalog_set,0,0},
{"def",0,_wrap_MYSQL_FIELD_def_get,_wrap_MYSQL_FIELD_def_set,0,0},
{"length",0,_wrap_MYSQL_FIELD_length_get,_wrap_MYSQL_FIELD_length_set,0,0},
{"max_length",0,_wrap_MYSQL_FIELD_max_length_get,_wrap_MYSQL_FIELD_max_length_set,0,0},
{"name_length",0,_wrap_MYSQL_FIELD_name_length_get,_wrap_MYSQL_FIELD_name_length_set,0,0},
{"org_name_length",0,_wrap_MYSQL_FIELD_org_name_length_get,_wrap_MYSQL_FIELD_org_name_length_set,0,0},
{"table_length",0,_wrap_MYSQL_FIELD_table_length_get,_wrap_MYSQL_FIELD_table_length_set,0,0},
{"org_table_length",0,_wrap_MYSQL_FIELD_org_table_length_get,_wrap_MYSQL_FIELD_org_table_length_set,0,0},
{"db_length",0,_wrap_MYSQL_FIELD_db_length_get,_wrap_MYSQL_FIELD_db_length_set,0,0},
{"catalog_length",0,_wrap_MYSQL_FIELD_catalog_length_get,_wrap_MYSQL_FIELD_catalog_length_set,0,0},
{"def_length",0,_wrap_MYSQL_FIELD_def_length_get,_wrap_MYSQL_FIELD_def_length_set,0,0},
{"flags",0,_wrap_MYSQL_FIELD_flags_get,_wrap_MYSQL_FIELD_flags_set,0,0},
{"decimals",0,_wrap_MYSQL_FIELD_decimals_get,_wrap_MYSQL_FIELD_decimals_set,0,0},
{"charsetnr",0,_wrap_MYSQL_FIELD_charsetnr_get,_wrap_MYSQL_FIELD_charsetnr_set,0,0},
{"type",0,_wrap_MYSQL_FIELD_type_get,_wrap_MYSQL_FIELD_type_set,0,0},
{0,0,0,0}
};
static const char *swig_MYSQL_FIELD_base_names[] = {0};
static const swig_type_info *swig_MYSQL_FIELD_base[] = {0};
static swig_octave_class _wrap_class_MYSQL_FIELD = {"MYSQL_FIELD", &SWIGTYPE_p_st_mysql_field,0,_wrap_new_MYSQL_FIELD,_wrap_delete_MYSQL_FIELD,swig_MYSQL_FIELD_members,swig_MYSQL_FIELD_base_names,swig_MYSQL_FIELD_base };

static octave_value_list _wrap_MYSQL_ROWS_next_set (const octave_value_list& args, int nargout) {
  MYSQL_ROWS *arg1 = (MYSQL_ROWS *) 0 ;
  st_mysql_rows *arg2 = (st_mysql_rows *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_ROWS_next_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_rows, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_ROWS_next_set" "', argument " "1"" of type '" "MYSQL_ROWS *""'"); 
  }
  arg1 = (MYSQL_ROWS *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_rows, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_ROWS_next_set" "', argument " "2"" of type '" "st_mysql_rows *""'"); 
  }
  arg2 = (st_mysql_rows *)(argp2);
  if (arg1) (arg1)->next = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_ROWS_next_get (const octave_value_list& args, int nargout) {
  MYSQL_ROWS *arg1 = (MYSQL_ROWS *) 0 ;
  st_mysql_rows *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_ROWS_next_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_rows, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_ROWS_next_get" "', argument " "1"" of type '" "MYSQL_ROWS *""'"); 
  }
  arg1 = (MYSQL_ROWS *)(argp1);
  result = (st_mysql_rows *) ((arg1)->next);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_rows, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_ROWS_data_set (const octave_value_list& args, int nargout) {
  MYSQL_ROWS *arg1 = (MYSQL_ROWS *) 0 ;
  MYSQL_ROW *arg2 = (MYSQL_ROW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_ROWS_data_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_rows, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_ROWS_data_set" "', argument " "1"" of type '" "MYSQL_ROWS *""'"); 
  }
  arg1 = (MYSQL_ROWS *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_MYSQL_ROW, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_ROWS_data_set" "', argument " "2"" of type '" "MYSQL_ROW *""'"); 
  }
  arg2 = (MYSQL_ROW *)(argp2);
  if (arg1) (arg1)->data = *arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_ROWS_data_get (const octave_value_list& args, int nargout) {
  MYSQL_ROWS *arg1 = (MYSQL_ROWS *) 0 ;
  MYSQL_ROW *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_ROWS_data_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_rows, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_ROWS_data_get" "', argument " "1"" of type '" "MYSQL_ROWS *""'"); 
  }
  arg1 = (MYSQL_ROWS *)(argp1);
  result = (MYSQL_ROW *)& ((arg1)->data);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MYSQL_ROW, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_ROWS_length_set (const octave_value_list& args, int nargout) {
  MYSQL_ROWS *arg1 = (MYSQL_ROWS *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_ROWS_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_rows, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_ROWS_length_set" "', argument " "1"" of type '" "MYSQL_ROWS *""'"); 
  }
  arg1 = (MYSQL_ROWS *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_ROWS_length_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_ROWS_length_get (const octave_value_list& args, int nargout) {
  MYSQL_ROWS *arg1 = (MYSQL_ROWS *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_ROWS_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_rows, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_ROWS_length_get" "', argument " "1"" of type '" "MYSQL_ROWS *""'"); 
  }
  arg1 = (MYSQL_ROWS *)(argp1);
  result = (unsigned long) ((arg1)->length);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_MYSQL_ROWS (const octave_value_list& args, int nargout) {
  MYSQL_ROWS *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_MYSQL_ROWS",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (MYSQL_ROWS *)new MYSQL_ROWS();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_rows, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_MYSQL_ROWS (const octave_value_list& args, int nargout) {
  MYSQL_ROWS *arg1 = (MYSQL_ROWS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_MYSQL_ROWS",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_rows, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MYSQL_ROWS" "', argument " "1"" of type '" "MYSQL_ROWS *""'"); 
  }
  arg1 = (MYSQL_ROWS *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_MYSQL_ROWS_members[] = {
{"next",0,_wrap_MYSQL_ROWS_next_get,_wrap_MYSQL_ROWS_next_set,0,0},
{"data",0,_wrap_MYSQL_ROWS_data_get,_wrap_MYSQL_ROWS_data_set,0,0},
{"length",0,_wrap_MYSQL_ROWS_length_get,_wrap_MYSQL_ROWS_length_set,0,0},
{0,0,0,0}
};
static const char *swig_MYSQL_ROWS_base_names[] = {0};
static const swig_type_info *swig_MYSQL_ROWS_base[] = {0};
static swig_octave_class _wrap_class_MYSQL_ROWS = {"MYSQL_ROWS", &SWIGTYPE_p_st_mysql_rows,0,_wrap_new_MYSQL_ROWS,_wrap_delete_MYSQL_ROWS,swig_MYSQL_ROWS_members,swig_MYSQL_ROWS_base_names,swig_MYSQL_ROWS_base };

static octave_value_list _wrap_MYSQL_DATA_rows_set (const octave_value_list& args, int nargout) {
  MYSQL_DATA *arg1 = (MYSQL_DATA *) 0 ;
  my_ulonglong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_DATA_rows_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_DATA_rows_set" "', argument " "1"" of type '" "MYSQL_DATA *""'"); 
  }
  arg1 = (MYSQL_DATA *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_DATA_rows_set" "', argument " "2"" of type '" "my_ulonglong""'");
  } 
  arg2 = (my_ulonglong)(val2);
  if (arg1) (arg1)->rows = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_DATA_rows_get (const octave_value_list& args, int nargout) {
  MYSQL_DATA *arg1 = (MYSQL_DATA *) 0 ;
  my_ulonglong result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_DATA_rows_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_DATA_rows_get" "', argument " "1"" of type '" "MYSQL_DATA *""'"); 
  }
  arg1 = (MYSQL_DATA *)(argp1);
  result = (my_ulonglong) ((arg1)->rows);
  _outv = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_DATA_fields_set (const octave_value_list& args, int nargout) {
  MYSQL_DATA *arg1 = (MYSQL_DATA *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_DATA_fields_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_DATA_fields_set" "', argument " "1"" of type '" "MYSQL_DATA *""'"); 
  }
  arg1 = (MYSQL_DATA *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_DATA_fields_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->fields = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_DATA_fields_get (const octave_value_list& args, int nargout) {
  MYSQL_DATA *arg1 = (MYSQL_DATA *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_DATA_fields_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_DATA_fields_get" "', argument " "1"" of type '" "MYSQL_DATA *""'"); 
  }
  arg1 = (MYSQL_DATA *)(argp1);
  result = (unsigned int) ((arg1)->fields);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_DATA_data_set (const octave_value_list& args, int nargout) {
  MYSQL_DATA *arg1 = (MYSQL_DATA *) 0 ;
  MYSQL_ROWS *arg2 = (MYSQL_ROWS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_DATA_data_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_DATA_data_set" "', argument " "1"" of type '" "MYSQL_DATA *""'"); 
  }
  arg1 = (MYSQL_DATA *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_rows, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_DATA_data_set" "', argument " "2"" of type '" "MYSQL_ROWS *""'"); 
  }
  arg2 = (MYSQL_ROWS *)(argp2);
  if (arg1) (arg1)->data = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_DATA_data_get (const octave_value_list& args, int nargout) {
  MYSQL_DATA *arg1 = (MYSQL_DATA *) 0 ;
  MYSQL_ROWS *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_DATA_data_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_DATA_data_get" "', argument " "1"" of type '" "MYSQL_DATA *""'"); 
  }
  arg1 = (MYSQL_DATA *)(argp1);
  result = (MYSQL_ROWS *) ((arg1)->data);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_rows, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_DATA_alloc_set (const octave_value_list& args, int nargout) {
  MYSQL_DATA *arg1 = (MYSQL_DATA *) 0 ;
  MEM_ROOT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_DATA_alloc_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_DATA_alloc_set" "', argument " "1"" of type '" "MYSQL_DATA *""'"); 
  }
  arg1 = (MYSQL_DATA *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_MEM_ROOT,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_DATA_alloc_set" "', argument " "2"" of type '" "MEM_ROOT""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_DATA_alloc_set" "', argument " "2"" of type '" "MEM_ROOT""'");
    } else {
      arg2 = *((MEM_ROOT *)(argp2));
    }
  }
  if (arg1) (arg1)->alloc = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_DATA_alloc_get (const octave_value_list& args, int nargout) {
  MYSQL_DATA *arg1 = (MYSQL_DATA *) 0 ;
  MEM_ROOT result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_DATA_alloc_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_DATA_alloc_get" "', argument " "1"" of type '" "MYSQL_DATA *""'"); 
  }
  arg1 = (MYSQL_DATA *)(argp1);
  result =  ((arg1)->alloc);
  _outv = SWIG_NewPointerObj((new MEM_ROOT((const MEM_ROOT&)(result))), SWIGTYPE_p_MEM_ROOT, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_DATA_embedded_info_set (const octave_value_list& args, int nargout) {
  MYSQL_DATA *arg1 = (MYSQL_DATA *) 0 ;
  embedded_query_result *arg2 = (embedded_query_result *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_DATA_embedded_info_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_DATA_embedded_info_set" "', argument " "1"" of type '" "MYSQL_DATA *""'"); 
  }
  arg1 = (MYSQL_DATA *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_embedded_query_result, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_DATA_embedded_info_set" "', argument " "2"" of type '" "embedded_query_result *""'"); 
  }
  arg2 = (embedded_query_result *)(argp2);
  if (arg1) (arg1)->embedded_info = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_DATA_embedded_info_get (const octave_value_list& args, int nargout) {
  MYSQL_DATA *arg1 = (MYSQL_DATA *) 0 ;
  embedded_query_result *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_DATA_embedded_info_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_DATA_embedded_info_get" "', argument " "1"" of type '" "MYSQL_DATA *""'"); 
  }
  arg1 = (MYSQL_DATA *)(argp1);
  result = (embedded_query_result *) ((arg1)->embedded_info);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_embedded_query_result, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_MYSQL_DATA (const octave_value_list& args, int nargout) {
  MYSQL_DATA *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_MYSQL_DATA",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (MYSQL_DATA *)new MYSQL_DATA();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_data, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_MYSQL_DATA (const octave_value_list& args, int nargout) {
  MYSQL_DATA *arg1 = (MYSQL_DATA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_MYSQL_DATA",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_data, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MYSQL_DATA" "', argument " "1"" of type '" "MYSQL_DATA *""'"); 
  }
  arg1 = (MYSQL_DATA *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_MYSQL_DATA_members[] = {
{"rows",0,_wrap_MYSQL_DATA_rows_get,_wrap_MYSQL_DATA_rows_set,0,0},
{"fields",0,_wrap_MYSQL_DATA_fields_get,_wrap_MYSQL_DATA_fields_set,0,0},
{"data",0,_wrap_MYSQL_DATA_data_get,_wrap_MYSQL_DATA_data_set,0,0},
{"alloc",0,_wrap_MYSQL_DATA_alloc_get,_wrap_MYSQL_DATA_alloc_set,0,0},
{"embedded_info",0,_wrap_MYSQL_DATA_embedded_info_get,_wrap_MYSQL_DATA_embedded_info_set,0,0},
{0,0,0,0}
};
static const char *swig_MYSQL_DATA_base_names[] = {0};
static const swig_type_info *swig_MYSQL_DATA_base[] = {0};
static swig_octave_class _wrap_class_MYSQL_DATA = {"MYSQL_DATA", &SWIGTYPE_p_st_mysql_data,0,_wrap_new_MYSQL_DATA,_wrap_delete_MYSQL_DATA,swig_MYSQL_DATA_members,swig_MYSQL_DATA_base_names,swig_MYSQL_DATA_base };

static octave_value_list _wrap_st_mysql_options_connect_timeout_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_connect_timeout_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_connect_timeout_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "st_mysql_options_connect_timeout_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->connect_timeout = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_connect_timeout_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_connect_timeout_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_connect_timeout_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (unsigned int) ((arg1)->connect_timeout);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_read_timeout_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_read_timeout_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_read_timeout_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "st_mysql_options_read_timeout_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->read_timeout = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_read_timeout_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_read_timeout_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_read_timeout_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (unsigned int) ((arg1)->read_timeout);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_write_timeout_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_write_timeout_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_write_timeout_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "st_mysql_options_write_timeout_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->write_timeout = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_write_timeout_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_write_timeout_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_write_timeout_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (unsigned int) ((arg1)->write_timeout);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_port_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_port_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_port_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "st_mysql_options_port_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->port = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_port_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_port_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_port_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (unsigned int) ((arg1)->port);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_protocol_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_protocol_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_protocol_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "st_mysql_options_protocol_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->protocol = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_protocol_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_protocol_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_protocol_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (unsigned int) ((arg1)->protocol);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_client_flag_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_client_flag_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_client_flag_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "st_mysql_options_client_flag_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->client_flag = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_client_flag_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_client_flag_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_client_flag_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (unsigned long) ((arg1)->client_flag);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_host_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_host_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_host_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_host_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->host) delete[] arg1->host;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->host = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->host = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_host_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_host_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_host_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->host);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_user_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_user_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_user_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_user_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->user) delete[] arg1->user;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->user = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->user = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_user_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_user_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_user_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->user);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_password_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_password_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_password_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_password_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->password) delete[] arg1->password;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->password = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->password = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_password_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_password_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_password_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->password);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_unix_socket_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_unix_socket_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_unix_socket_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_unix_socket_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->unix_socket) delete[] arg1->unix_socket;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->unix_socket = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->unix_socket = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_unix_socket_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_unix_socket_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_unix_socket_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->unix_socket);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_db_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_db_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_db_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_db_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->db) delete[] arg1->db;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->db = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->db = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_db_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_db_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_db_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->db);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_init_commands_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  st_dynamic_array *arg2 = (st_dynamic_array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_init_commands_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_init_commands_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_dynamic_array, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_init_commands_set" "', argument " "2"" of type '" "st_dynamic_array *""'"); 
  }
  arg2 = (st_dynamic_array *)(argp2);
  if (arg1) (arg1)->init_commands = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_init_commands_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  st_dynamic_array *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_init_commands_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_init_commands_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (st_dynamic_array *) ((arg1)->init_commands);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_dynamic_array, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_my_cnf_file_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_my_cnf_file_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_my_cnf_file_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_my_cnf_file_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->my_cnf_file) delete[] arg1->my_cnf_file;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->my_cnf_file = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->my_cnf_file = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_my_cnf_file_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_my_cnf_file_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_my_cnf_file_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->my_cnf_file);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_my_cnf_group_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_my_cnf_group_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_my_cnf_group_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_my_cnf_group_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->my_cnf_group) delete[] arg1->my_cnf_group;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->my_cnf_group = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->my_cnf_group = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_my_cnf_group_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_my_cnf_group_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_my_cnf_group_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->my_cnf_group);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_charset_dir_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_charset_dir_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_charset_dir_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_charset_dir_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->charset_dir) delete[] arg1->charset_dir;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->charset_dir = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->charset_dir = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_charset_dir_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_charset_dir_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_charset_dir_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->charset_dir);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_charset_name_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_charset_name_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_charset_name_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_charset_name_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->charset_name) delete[] arg1->charset_name;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->charset_name = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->charset_name = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_charset_name_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_charset_name_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_charset_name_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->charset_name);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_ssl_key_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_ssl_key_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_ssl_key_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_ssl_key_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->ssl_key) delete[] arg1->ssl_key;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->ssl_key = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->ssl_key = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_ssl_key_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_ssl_key_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_ssl_key_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->ssl_key);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_ssl_cert_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_ssl_cert_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_ssl_cert_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_ssl_cert_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->ssl_cert) delete[] arg1->ssl_cert;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->ssl_cert = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->ssl_cert = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_ssl_cert_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_ssl_cert_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_ssl_cert_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->ssl_cert);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_ssl_ca_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_ssl_ca_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_ssl_ca_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_ssl_ca_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->ssl_ca) delete[] arg1->ssl_ca;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->ssl_ca = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->ssl_ca = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_ssl_ca_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_ssl_ca_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_ssl_ca_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->ssl_ca);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_ssl_capath_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_ssl_capath_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_ssl_capath_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_ssl_capath_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->ssl_capath) delete[] arg1->ssl_capath;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->ssl_capath = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->ssl_capath = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_ssl_capath_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_ssl_capath_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_ssl_capath_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->ssl_capath);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_ssl_cipher_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_ssl_cipher_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_ssl_cipher_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_ssl_cipher_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->ssl_cipher) delete[] arg1->ssl_cipher;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->ssl_cipher = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->ssl_cipher = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_ssl_cipher_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_ssl_cipher_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_ssl_cipher_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->ssl_cipher);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_shared_memory_base_name_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_shared_memory_base_name_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_shared_memory_base_name_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_shared_memory_base_name_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->shared_memory_base_name) delete[] arg1->shared_memory_base_name;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->shared_memory_base_name = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->shared_memory_base_name = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_shared_memory_base_name_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_shared_memory_base_name_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_shared_memory_base_name_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->shared_memory_base_name);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_max_allowed_packet_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_max_allowed_packet_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_max_allowed_packet_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "st_mysql_options_max_allowed_packet_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->max_allowed_packet = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_max_allowed_packet_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_max_allowed_packet_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_max_allowed_packet_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (unsigned long) ((arg1)->max_allowed_packet);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_use_ssl_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_use_ssl_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_use_ssl_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_use_ssl_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "st_mysql_options_use_ssl_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->use_ssl = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_use_ssl_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_use_ssl_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_use_ssl_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result =  ((arg1)->use_ssl);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_compress_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_compress_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_compress_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_compress_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "st_mysql_options_compress_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->compress = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_compress_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_compress_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_compress_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result =  ((arg1)->compress);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_named_pipe_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_named_pipe_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_named_pipe_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_named_pipe_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "st_mysql_options_named_pipe_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->named_pipe = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_named_pipe_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_named_pipe_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_named_pipe_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result =  ((arg1)->named_pipe);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_rpl_probe_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_rpl_probe_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_rpl_probe_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_rpl_probe_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "st_mysql_options_rpl_probe_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->rpl_probe = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_rpl_probe_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_rpl_probe_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_rpl_probe_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result =  ((arg1)->rpl_probe);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_rpl_parse_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_rpl_parse_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_rpl_parse_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_rpl_parse_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "st_mysql_options_rpl_parse_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->rpl_parse = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_rpl_parse_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_rpl_parse_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_rpl_parse_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result =  ((arg1)->rpl_parse);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_no_master_reads_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_no_master_reads_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_no_master_reads_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_no_master_reads_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "st_mysql_options_no_master_reads_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->no_master_reads = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_no_master_reads_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_no_master_reads_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_no_master_reads_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result =  ((arg1)->no_master_reads);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_separate_thread_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_separate_thread_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_separate_thread_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_separate_thread_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "st_mysql_options_separate_thread_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->separate_thread = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_separate_thread_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_separate_thread_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_separate_thread_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result =  ((arg1)->separate_thread);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_methods_to_use_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  enum mysql_option arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_methods_to_use_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_methods_to_use_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "st_mysql_options_methods_to_use_set" "', argument " "2"" of type '" "enum mysql_option""'");
  } 
  arg2 = (enum mysql_option)(val2);
  if (arg1) (arg1)->methods_to_use = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_methods_to_use_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  enum mysql_option result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_methods_to_use_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_methods_to_use_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (enum mysql_option) ((arg1)->methods_to_use);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_client_ip_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_client_ip_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_client_ip_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_client_ip_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->client_ip) delete[] arg1->client_ip;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->client_ip = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->client_ip = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_client_ip_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_client_ip_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_client_ip_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (char *) ((arg1)->client_ip);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_secure_auth_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_secure_auth_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_secure_auth_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_secure_auth_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "st_mysql_options_secure_auth_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->secure_auth = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_secure_auth_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_secure_auth_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_secure_auth_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result =  ((arg1)->secure_auth);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_report_data_truncation_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_report_data_truncation_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_report_data_truncation_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_report_data_truncation_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "st_mysql_options_report_data_truncation_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->report_data_truncation = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_report_data_truncation_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_report_data_truncation_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_report_data_truncation_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result =  ((arg1)->report_data_truncation);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_local_infile_init_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  int (*arg2)(void **,char const *,void *) = (int (*)(void **,char const *,void *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_local_infile_init_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_local_infile_init_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_p_void_p_q_const__char_p_void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "st_mysql_options_local_infile_init_set" "', argument " "2"" of type '" "int (*)(void **,char const *,void *)""'"); 
    }
  }
  if (arg1) (arg1)->local_infile_init = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_local_infile_init_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  int (*result)(void **,char const *,void *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_local_infile_init_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_local_infile_init_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (int (*)(void **,char const *,void *)) ((arg1)->local_infile_init);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_p_void_p_q_const__char_p_void__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_local_infile_read_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  int (*arg2)(void *,char *,unsigned int) = (int (*)(void *,char *,unsigned int)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_local_infile_read_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_local_infile_read_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_void_p_char_unsigned_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "st_mysql_options_local_infile_read_set" "', argument " "2"" of type '" "int (*)(void *,char *,unsigned int)""'"); 
    }
  }
  if (arg1) (arg1)->local_infile_read = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_local_infile_read_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  int (*result)(void *,char *,unsigned int) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_local_infile_read_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_local_infile_read_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (int (*)(void *,char *,unsigned int)) ((arg1)->local_infile_read);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_void_p_char_unsigned_int__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_local_infile_end_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  void (*arg2)(void *) = (void (*)(void *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_local_infile_end_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_local_infile_end_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "st_mysql_options_local_infile_end_set" "', argument " "2"" of type '" "void (*)(void *)""'"); 
    }
  }
  if (arg1) (arg1)->local_infile_end = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_local_infile_end_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  void (*result)(void *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_local_infile_end_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_local_infile_end_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (void (*)(void *)) ((arg1)->local_infile_end);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_void__void);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_local_infile_error_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  int (*arg2)(void *,char *,unsigned int) = (int (*)(void *,char *,unsigned int)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_local_infile_error_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_local_infile_error_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_void_p_char_unsigned_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "st_mysql_options_local_infile_error_set" "', argument " "2"" of type '" "int (*)(void *,char *,unsigned int)""'"); 
    }
  }
  if (arg1) (arg1)->local_infile_error = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_local_infile_error_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  int (*result)(void *,char *,unsigned int) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_local_infile_error_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_local_infile_error_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (int (*)(void *,char *,unsigned int)) ((arg1)->local_infile_error);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_void_p_char_unsigned_int__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_local_infile_userdata_set (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_local_infile_userdata_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_local_infile_userdata_set" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "st_mysql_options_local_infile_userdata_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->local_infile_userdata = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_st_mysql_options_local_infile_userdata_get (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("st_mysql_options_local_infile_userdata_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "st_mysql_options_local_infile_userdata_get" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  result = (void *) ((arg1)->local_infile_userdata);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_st_mysql_options (const octave_value_list& args, int nargout) {
  st_mysql_options *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_st_mysql_options",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (st_mysql_options *)new st_mysql_options();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_options, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_st_mysql_options (const octave_value_list& args, int nargout) {
  st_mysql_options *arg1 = (st_mysql_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_st_mysql_options",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_options, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_st_mysql_options" "', argument " "1"" of type '" "st_mysql_options *""'"); 
  }
  arg1 = (st_mysql_options *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_st_mysql_options_members[] = {
{"connect_timeout",0,_wrap_st_mysql_options_connect_timeout_get,_wrap_st_mysql_options_connect_timeout_set,0,0},
{"read_timeout",0,_wrap_st_mysql_options_read_timeout_get,_wrap_st_mysql_options_read_timeout_set,0,0},
{"write_timeout",0,_wrap_st_mysql_options_write_timeout_get,_wrap_st_mysql_options_write_timeout_set,0,0},
{"port",0,_wrap_st_mysql_options_port_get,_wrap_st_mysql_options_port_set,0,0},
{"protocol",0,_wrap_st_mysql_options_protocol_get,_wrap_st_mysql_options_protocol_set,0,0},
{"client_flag",0,_wrap_st_mysql_options_client_flag_get,_wrap_st_mysql_options_client_flag_set,0,0},
{"host",0,_wrap_st_mysql_options_host_get,_wrap_st_mysql_options_host_set,0,0},
{"user",0,_wrap_st_mysql_options_user_get,_wrap_st_mysql_options_user_set,0,0},
{"password",0,_wrap_st_mysql_options_password_get,_wrap_st_mysql_options_password_set,0,0},
{"unix_socket",0,_wrap_st_mysql_options_unix_socket_get,_wrap_st_mysql_options_unix_socket_set,0,0},
{"db",0,_wrap_st_mysql_options_db_get,_wrap_st_mysql_options_db_set,0,0},
{"init_commands",0,_wrap_st_mysql_options_init_commands_get,_wrap_st_mysql_options_init_commands_set,0,0},
{"my_cnf_file",0,_wrap_st_mysql_options_my_cnf_file_get,_wrap_st_mysql_options_my_cnf_file_set,0,0},
{"my_cnf_group",0,_wrap_st_mysql_options_my_cnf_group_get,_wrap_st_mysql_options_my_cnf_group_set,0,0},
{"charset_dir",0,_wrap_st_mysql_options_charset_dir_get,_wrap_st_mysql_options_charset_dir_set,0,0},
{"charset_name",0,_wrap_st_mysql_options_charset_name_get,_wrap_st_mysql_options_charset_name_set,0,0},
{"ssl_key",0,_wrap_st_mysql_options_ssl_key_get,_wrap_st_mysql_options_ssl_key_set,0,0},
{"ssl_cert",0,_wrap_st_mysql_options_ssl_cert_get,_wrap_st_mysql_options_ssl_cert_set,0,0},
{"ssl_ca",0,_wrap_st_mysql_options_ssl_ca_get,_wrap_st_mysql_options_ssl_ca_set,0,0},
{"ssl_capath",0,_wrap_st_mysql_options_ssl_capath_get,_wrap_st_mysql_options_ssl_capath_set,0,0},
{"ssl_cipher",0,_wrap_st_mysql_options_ssl_cipher_get,_wrap_st_mysql_options_ssl_cipher_set,0,0},
{"shared_memory_base_name",0,_wrap_st_mysql_options_shared_memory_base_name_get,_wrap_st_mysql_options_shared_memory_base_name_set,0,0},
{"max_allowed_packet",0,_wrap_st_mysql_options_max_allowed_packet_get,_wrap_st_mysql_options_max_allowed_packet_set,0,0},
{"use_ssl",0,_wrap_st_mysql_options_use_ssl_get,_wrap_st_mysql_options_use_ssl_set,0,0},
{"compress",0,_wrap_st_mysql_options_compress_get,_wrap_st_mysql_options_compress_set,0,0},
{"named_pipe",0,_wrap_st_mysql_options_named_pipe_get,_wrap_st_mysql_options_named_pipe_set,0,0},
{"rpl_probe",0,_wrap_st_mysql_options_rpl_probe_get,_wrap_st_mysql_options_rpl_probe_set,0,0},
{"rpl_parse",0,_wrap_st_mysql_options_rpl_parse_get,_wrap_st_mysql_options_rpl_parse_set,0,0},
{"no_master_reads",0,_wrap_st_mysql_options_no_master_reads_get,_wrap_st_mysql_options_no_master_reads_set,0,0},
{"separate_thread",0,_wrap_st_mysql_options_separate_thread_get,_wrap_st_mysql_options_separate_thread_set,0,0},
{"methods_to_use",0,_wrap_st_mysql_options_methods_to_use_get,_wrap_st_mysql_options_methods_to_use_set,0,0},
{"client_ip",0,_wrap_st_mysql_options_client_ip_get,_wrap_st_mysql_options_client_ip_set,0,0},
{"secure_auth",0,_wrap_st_mysql_options_secure_auth_get,_wrap_st_mysql_options_secure_auth_set,0,0},
{"report_data_truncation",0,_wrap_st_mysql_options_report_data_truncation_get,_wrap_st_mysql_options_report_data_truncation_set,0,0},
{"local_infile_init",0,_wrap_st_mysql_options_local_infile_init_get,_wrap_st_mysql_options_local_infile_init_set,0,0},
{"local_infile_read",0,_wrap_st_mysql_options_local_infile_read_get,_wrap_st_mysql_options_local_infile_read_set,0,0},
{"local_infile_end",0,_wrap_st_mysql_options_local_infile_end_get,_wrap_st_mysql_options_local_infile_end_set,0,0},
{"local_infile_error",0,_wrap_st_mysql_options_local_infile_error_get,_wrap_st_mysql_options_local_infile_error_set,0,0},
{"local_infile_userdata",0,_wrap_st_mysql_options_local_infile_userdata_get,_wrap_st_mysql_options_local_infile_userdata_set,0,0},
{0,0,0,0}
};
static const char *swig_st_mysql_options_base_names[] = {0};
static const swig_type_info *swig_st_mysql_options_base[] = {0};
static swig_octave_class _wrap_class_st_mysql_options = {"st_mysql_options", &SWIGTYPE_p_st_mysql_options,0,_wrap_new_st_mysql_options,_wrap_delete_st_mysql_options,swig_st_mysql_options_members,swig_st_mysql_options_base_names,swig_st_mysql_options_base };

static octave_value_list _wrap_MY_CHARSET_INFO_number_set (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_number_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_number_set" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MY_CHARSET_INFO_number_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->number = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_number_get (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_number_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_number_get" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  result = (unsigned int) ((arg1)->number);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_state_set (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_state_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_state_set" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MY_CHARSET_INFO_state_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->state = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_state_get (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_state_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_state_get" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  result = (unsigned int) ((arg1)->state);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_csname_set (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_csname_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_csname_set" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MY_CHARSET_INFO_csname_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->csname = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->csname = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_csname_get (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_csname_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_csname_get" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  result = (char *) ((arg1)->csname);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_name_set (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_name_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_name_set" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MY_CHARSET_INFO_name_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->name = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->name = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_name_get (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_name_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_name_get" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  result = (char *) ((arg1)->name);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_comment_set (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_comment_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_comment_set" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MY_CHARSET_INFO_comment_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->comment = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->comment = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_comment_get (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_comment_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_comment_get" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  result = (char *) ((arg1)->comment);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_dir_set (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_dir_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_dir_set" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MY_CHARSET_INFO_dir_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  if (arg2) {
    size_t size = strlen((const char *)((const char *)(arg2))) + 1;
    arg1->dir = (char const *)(char*)(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->dir = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_dir_get (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_dir_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_dir_get" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  result = (char *) ((arg1)->dir);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_mbminlen_set (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_mbminlen_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_mbminlen_set" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MY_CHARSET_INFO_mbminlen_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->mbminlen = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_mbminlen_get (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_mbminlen_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_mbminlen_get" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  result = (unsigned int) ((arg1)->mbminlen);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_mbmaxlen_set (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_mbmaxlen_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_mbmaxlen_set" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MY_CHARSET_INFO_mbmaxlen_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->mbmaxlen = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MY_CHARSET_INFO_mbmaxlen_get (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MY_CHARSET_INFO_mbmaxlen_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MY_CHARSET_INFO_mbmaxlen_get" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  result = (unsigned int) ((arg1)->mbmaxlen);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_MY_CHARSET_INFO (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_MY_CHARSET_INFO",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (MY_CHARSET_INFO *)new MY_CHARSET_INFO();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_character_set, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_MY_CHARSET_INFO (const octave_value_list& args, int nargout) {
  MY_CHARSET_INFO *arg1 = (MY_CHARSET_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_MY_CHARSET_INFO",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_character_set, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MY_CHARSET_INFO" "', argument " "1"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg1 = (MY_CHARSET_INFO *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_MY_CHARSET_INFO_members[] = {
{"number",0,_wrap_MY_CHARSET_INFO_number_get,_wrap_MY_CHARSET_INFO_number_set,0,0},
{"state",0,_wrap_MY_CHARSET_INFO_state_get,_wrap_MY_CHARSET_INFO_state_set,0,0},
{"csname",0,_wrap_MY_CHARSET_INFO_csname_get,_wrap_MY_CHARSET_INFO_csname_set,0,0},
{"name",0,_wrap_MY_CHARSET_INFO_name_get,_wrap_MY_CHARSET_INFO_name_set,0,0},
{"comment",0,_wrap_MY_CHARSET_INFO_comment_get,_wrap_MY_CHARSET_INFO_comment_set,0,0},
{"dir",0,_wrap_MY_CHARSET_INFO_dir_get,_wrap_MY_CHARSET_INFO_dir_set,0,0},
{"mbminlen",0,_wrap_MY_CHARSET_INFO_mbminlen_get,_wrap_MY_CHARSET_INFO_mbminlen_set,0,0},
{"mbmaxlen",0,_wrap_MY_CHARSET_INFO_mbmaxlen_get,_wrap_MY_CHARSET_INFO_mbmaxlen_set,0,0},
{0,0,0,0}
};
static const char *swig_MY_CHARSET_INFO_base_names[] = {0};
static const swig_type_info *swig_MY_CHARSET_INFO_base[] = {0};
static swig_octave_class _wrap_class_MY_CHARSET_INFO = {"MY_CHARSET_INFO", &SWIGTYPE_p_character_set,0,_wrap_new_MY_CHARSET_INFO,_wrap_delete_MY_CHARSET_INFO,swig_MY_CHARSET_INFO_members,swig_MY_CHARSET_INFO_base_names,swig_MY_CHARSET_INFO_base };

static octave_value_list _wrap_MYSQL_net_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  NET arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_net_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_net_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_NET,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_net_set" "', argument " "2"" of type '" "NET""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_net_set" "', argument " "2"" of type '" "NET""'");
    } else {
      arg2 = *((NET *)(argp2));
    }
  }
  if (arg1) (arg1)->net = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_net_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  NET result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_net_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_net_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result =  ((arg1)->net);
  _outv = SWIG_NewPointerObj((new NET((const NET&)(result))), SWIGTYPE_p_NET, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_connector_fd_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  gptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_connector_fd_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_connector_fd_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_gptr,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_connector_fd_set" "', argument " "2"" of type '" "gptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_connector_fd_set" "', argument " "2"" of type '" "gptr""'");
    } else {
      arg2 = *((gptr *)(argp2));
    }
  }
  if (arg1) (arg1)->connector_fd = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_connector_fd_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  gptr result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_connector_fd_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_connector_fd_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result =  ((arg1)->connector_fd);
  _outv = SWIG_NewPointerObj((new gptr((const gptr&)(result))), SWIGTYPE_p_gptr, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_host_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_host_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_host_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_host_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->host) delete[] arg1->host;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->host = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->host = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_host_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_host_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_host_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *) ((arg1)->host);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_user_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_user_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_user_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_user_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->user) delete[] arg1->user;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->user = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->user = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_user_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_user_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_user_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *) ((arg1)->user);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_passwd_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_passwd_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_passwd_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_passwd_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->passwd) delete[] arg1->passwd;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->passwd = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->passwd = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_passwd_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_passwd_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_passwd_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *) ((arg1)->passwd);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_unix_socket_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_unix_socket_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_unix_socket_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_unix_socket_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->unix_socket) delete[] arg1->unix_socket;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->unix_socket = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->unix_socket = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_unix_socket_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_unix_socket_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_unix_socket_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *) ((arg1)->unix_socket);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_server_version_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_server_version_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_server_version_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_server_version_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->server_version) delete[] arg1->server_version;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->server_version = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->server_version = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_server_version_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_server_version_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_server_version_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *) ((arg1)->server_version);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_host_info_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_host_info_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_host_info_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_host_info_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->host_info) delete[] arg1->host_info;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->host_info = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->host_info = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_host_info_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_host_info_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_host_info_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *) ((arg1)->host_info);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_info_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_info_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_info_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_info_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->info) delete[] arg1->info;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->info = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->info = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_info_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_info_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_info_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *) ((arg1)->info);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_db_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_db_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_db_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_db_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->db) delete[] arg1->db;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->db = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->db = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_db_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_db_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_db_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *) ((arg1)->db);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_charset_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  charset_info_st *arg2 = (charset_info_st *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_charset_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_charset_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_charset_info_st, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_charset_set" "', argument " "2"" of type '" "charset_info_st *""'"); 
  }
  arg2 = (charset_info_st *)(argp2);
  if (arg1) (arg1)->charset = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_charset_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  charset_info_st *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_charset_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_charset_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (charset_info_st *) ((arg1)->charset);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_charset_info_st, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_fields_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  MYSQL_FIELD *arg2 = (MYSQL_FIELD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_fields_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_fields_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_field, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_fields_set" "', argument " "2"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg2 = (MYSQL_FIELD *)(argp2);
  if (arg1) (arg1)->fields = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_fields_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  MYSQL_FIELD *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_fields_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_fields_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (MYSQL_FIELD *) ((arg1)->fields);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_field_alloc_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  MEM_ROOT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_field_alloc_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_field_alloc_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_MEM_ROOT,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_field_alloc_set" "', argument " "2"" of type '" "MEM_ROOT""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_field_alloc_set" "', argument " "2"" of type '" "MEM_ROOT""'");
    } else {
      arg2 = *((MEM_ROOT *)(argp2));
    }
  }
  if (arg1) (arg1)->field_alloc = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_field_alloc_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  MEM_ROOT result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_field_alloc_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_field_alloc_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result =  ((arg1)->field_alloc);
  _outv = SWIG_NewPointerObj((new MEM_ROOT((const MEM_ROOT&)(result))), SWIGTYPE_p_MEM_ROOT, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_affected_rows_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_ulonglong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_affected_rows_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_affected_rows_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_affected_rows_set" "', argument " "2"" of type '" "my_ulonglong""'");
  } 
  arg2 = (my_ulonglong)(val2);
  if (arg1) (arg1)->affected_rows = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_affected_rows_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_ulonglong result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_affected_rows_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_affected_rows_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (my_ulonglong) ((arg1)->affected_rows);
  _outv = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_insert_id_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_ulonglong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_insert_id_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_insert_id_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_insert_id_set" "', argument " "2"" of type '" "my_ulonglong""'");
  } 
  arg2 = (my_ulonglong)(val2);
  if (arg1) (arg1)->insert_id = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_insert_id_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_ulonglong result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_insert_id_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_insert_id_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (my_ulonglong) ((arg1)->insert_id);
  _outv = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_extra_info_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_ulonglong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_extra_info_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_extra_info_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_extra_info_set" "', argument " "2"" of type '" "my_ulonglong""'");
  } 
  arg2 = (my_ulonglong)(val2);
  if (arg1) (arg1)->extra_info = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_extra_info_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_ulonglong result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_extra_info_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_extra_info_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (my_ulonglong) ((arg1)->extra_info);
  _outv = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_thread_id_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_thread_id_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_thread_id_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_thread_id_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->thread_id = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_thread_id_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_thread_id_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_thread_id_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned long) ((arg1)->thread_id);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_packet_length_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_packet_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_packet_length_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_packet_length_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->packet_length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_packet_length_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_packet_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_packet_length_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned long) ((arg1)->packet_length);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_port_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_port_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_port_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_port_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->port = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_port_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_port_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_port_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned int) ((arg1)->port);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_client_flag_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_client_flag_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_client_flag_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_client_flag_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->client_flag = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_client_flag_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_client_flag_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_client_flag_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned long) ((arg1)->client_flag);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_server_capabilities_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_server_capabilities_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_server_capabilities_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_server_capabilities_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->server_capabilities = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_server_capabilities_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_server_capabilities_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_server_capabilities_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned long) ((arg1)->server_capabilities);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_protocol_version_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_protocol_version_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_protocol_version_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_protocol_version_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->protocol_version = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_protocol_version_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_protocol_version_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_protocol_version_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned int) ((arg1)->protocol_version);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_field_count_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_field_count_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_field_count_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_field_count_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->field_count = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_field_count_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_field_count_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_field_count_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned int) ((arg1)->field_count);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_server_status_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_server_status_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_server_status_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_server_status_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->server_status = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_server_status_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_server_status_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_server_status_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned int) ((arg1)->server_status);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_server_language_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_server_language_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_server_language_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_server_language_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->server_language = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_server_language_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_server_language_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_server_language_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned int) ((arg1)->server_language);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_warning_count_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_warning_count_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_warning_count_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_warning_count_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->warning_count = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_warning_count_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_warning_count_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_warning_count_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned int) ((arg1)->warning_count);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_options_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  st_mysql_options *arg2 = (st_mysql_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_options_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_options_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_options_set" "', argument " "2"" of type '" "st_mysql_options *""'"); 
  }
  arg2 = (st_mysql_options *)(argp2);
  if (arg1) (arg1)->options = *arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_options_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  st_mysql_options *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_options_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_options_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (st_mysql_options *)& ((arg1)->options);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_options, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_status_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  enum mysql_status arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_status_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_status_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_status_set" "', argument " "2"" of type '" "enum mysql_status""'");
  } 
  arg2 = (enum mysql_status)(val2);
  if (arg1) (arg1)->status = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_status_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  enum mysql_status result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_status_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_status_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (enum mysql_status) ((arg1)->status);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_free_me_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_free_me_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_free_me_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_free_me_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_free_me_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->free_me = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_free_me_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_free_me_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_free_me_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result =  ((arg1)->free_me);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_reconnect_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_reconnect_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_reconnect_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_reconnect_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_reconnect_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->reconnect = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_reconnect_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_reconnect_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_reconnect_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result =  ((arg1)->reconnect);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_scramble_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[SCRAMBLE_LENGTH+1] ;
  int res2 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_scramble_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_scramble_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharArray(args(1), temp2, SCRAMBLE_LENGTH+1);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_scramble_set" "', argument " "2"" of type '" "char [SCRAMBLE_LENGTH+1]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->scramble,arg2,SCRAMBLE_LENGTH+1*sizeof(char));
  else memset(arg1->scramble,0,SCRAMBLE_LENGTH+1*sizeof(char));
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_scramble_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_scramble_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_scramble_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *)(char *) ((arg1)->scramble);
  {
    size_t size = SCRAMBLE_LENGTH+1;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    _outv = SWIG_FromCharPtrAndSize(result, size);
  }
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_rpl_pivot_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_rpl_pivot_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_rpl_pivot_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_rpl_pivot_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_rpl_pivot_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->rpl_pivot = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_rpl_pivot_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_rpl_pivot_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_rpl_pivot_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result =  ((arg1)->rpl_pivot);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_master_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  st_mysql *arg2 = (st_mysql *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_master_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_master_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_master_set" "', argument " "2"" of type '" "st_mysql *""'"); 
  }
  arg2 = (st_mysql *)(argp2);
  if (arg1) (arg1)->master = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_master_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  st_mysql *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_master_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_master_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (st_mysql *) ((arg1)->master);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_next_slave_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  st_mysql *arg2 = (st_mysql *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_next_slave_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_next_slave_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_next_slave_set" "', argument " "2"" of type '" "st_mysql *""'"); 
  }
  arg2 = (st_mysql *)(argp2);
  if (arg1) (arg1)->next_slave = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_next_slave_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  st_mysql *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_next_slave_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_next_slave_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (st_mysql *) ((arg1)->next_slave);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_last_used_slave_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  st_mysql *arg2 = (st_mysql *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_last_used_slave_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_last_used_slave_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_last_used_slave_set" "', argument " "2"" of type '" "st_mysql *""'"); 
  }
  arg2 = (st_mysql *)(argp2);
  if (arg1) (arg1)->last_used_slave = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_last_used_slave_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  st_mysql *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_last_used_slave_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_last_used_slave_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (st_mysql *) ((arg1)->last_used_slave);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_last_used_con_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  st_mysql *arg2 = (st_mysql *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_last_used_con_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_last_used_con_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_last_used_con_set" "', argument " "2"" of type '" "st_mysql *""'"); 
  }
  arg2 = (st_mysql *)(argp2);
  if (arg1) (arg1)->last_used_con = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_last_used_con_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  st_mysql *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_last_used_con_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_last_used_con_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (st_mysql *) ((arg1)->last_used_con);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_stmts_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  LIST *arg2 = (LIST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_stmts_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_stmts_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_LIST, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_stmts_set" "', argument " "2"" of type '" "LIST *""'"); 
  }
  arg2 = (LIST *)(argp2);
  if (arg1) (arg1)->stmts = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_stmts_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  LIST *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_stmts_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_stmts_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (LIST *) ((arg1)->stmts);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LIST, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_methods_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  st_mysql_methods *arg2 = (st_mysql_methods *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_methods_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_methods_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_methods, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_methods_set" "', argument " "2"" of type '" "st_mysql_methods const *""'"); 
  }
  arg2 = (st_mysql_methods *)(argp2);
  if (arg1) (arg1)->methods = (st_mysql_methods const *)arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_methods_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  st_mysql_methods *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_methods_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_methods_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (st_mysql_methods *) ((arg1)->methods);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_thd_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_thd_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_thd_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_thd_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->thd = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_thd_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_thd_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_thd_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (void *) ((arg1)->thd);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_unbuffered_fetch_owner_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool *arg2 = (my_bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_unbuffered_fetch_owner_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_unbuffered_fetch_owner_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_my_bool, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_unbuffered_fetch_owner_set" "', argument " "2"" of type '" "my_bool *""'"); 
  }
  arg2 = (my_bool *)(argp2);
  if (arg1) (arg1)->unbuffered_fetch_owner = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_unbuffered_fetch_owner_get (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_unbuffered_fetch_owner_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_unbuffered_fetch_owner_get" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (my_bool *) ((arg1)->unbuffered_fetch_owner);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_my_bool, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_MYSQL (const octave_value_list& args, int nargout) {
  MYSQL *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_MYSQL",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (MYSQL *)new MYSQL();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_MYSQL (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_MYSQL",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MYSQL" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_MYSQL_members[] = {
{"net",0,_wrap_MYSQL_net_get,_wrap_MYSQL_net_set,0,0},
{"connector_fd",0,_wrap_MYSQL_connector_fd_get,_wrap_MYSQL_connector_fd_set,0,0},
{"host",0,_wrap_MYSQL_host_get,_wrap_MYSQL_host_set,0,0},
{"user",0,_wrap_MYSQL_user_get,_wrap_MYSQL_user_set,0,0},
{"passwd",0,_wrap_MYSQL_passwd_get,_wrap_MYSQL_passwd_set,0,0},
{"unix_socket",0,_wrap_MYSQL_unix_socket_get,_wrap_MYSQL_unix_socket_set,0,0},
{"server_version",0,_wrap_MYSQL_server_version_get,_wrap_MYSQL_server_version_set,0,0},
{"host_info",0,_wrap_MYSQL_host_info_get,_wrap_MYSQL_host_info_set,0,0},
{"info",0,_wrap_MYSQL_info_get,_wrap_MYSQL_info_set,0,0},
{"db",0,_wrap_MYSQL_db_get,_wrap_MYSQL_db_set,0,0},
{"charset",0,_wrap_MYSQL_charset_get,_wrap_MYSQL_charset_set,0,0},
{"fields",0,_wrap_MYSQL_fields_get,_wrap_MYSQL_fields_set,0,0},
{"field_alloc",0,_wrap_MYSQL_field_alloc_get,_wrap_MYSQL_field_alloc_set,0,0},
{"affected_rows",0,_wrap_MYSQL_affected_rows_get,_wrap_MYSQL_affected_rows_set,0,0},
{"insert_id",0,_wrap_MYSQL_insert_id_get,_wrap_MYSQL_insert_id_set,0,0},
{"extra_info",0,_wrap_MYSQL_extra_info_get,_wrap_MYSQL_extra_info_set,0,0},
{"thread_id",0,_wrap_MYSQL_thread_id_get,_wrap_MYSQL_thread_id_set,0,0},
{"packet_length",0,_wrap_MYSQL_packet_length_get,_wrap_MYSQL_packet_length_set,0,0},
{"port",0,_wrap_MYSQL_port_get,_wrap_MYSQL_port_set,0,0},
{"client_flag",0,_wrap_MYSQL_client_flag_get,_wrap_MYSQL_client_flag_set,0,0},
{"server_capabilities",0,_wrap_MYSQL_server_capabilities_get,_wrap_MYSQL_server_capabilities_set,0,0},
{"protocol_version",0,_wrap_MYSQL_protocol_version_get,_wrap_MYSQL_protocol_version_set,0,0},
{"field_count",0,_wrap_MYSQL_field_count_get,_wrap_MYSQL_field_count_set,0,0},
{"server_status",0,_wrap_MYSQL_server_status_get,_wrap_MYSQL_server_status_set,0,0},
{"server_language",0,_wrap_MYSQL_server_language_get,_wrap_MYSQL_server_language_set,0,0},
{"warning_count",0,_wrap_MYSQL_warning_count_get,_wrap_MYSQL_warning_count_set,0,0},
{"options",0,_wrap_MYSQL_options_get,_wrap_MYSQL_options_set,0,0},
{"status",0,_wrap_MYSQL_status_get,_wrap_MYSQL_status_set,0,0},
{"free_me",0,_wrap_MYSQL_free_me_get,_wrap_MYSQL_free_me_set,0,0},
{"reconnect",0,_wrap_MYSQL_reconnect_get,_wrap_MYSQL_reconnect_set,0,0},
{"scramble",0,_wrap_MYSQL_scramble_get,_wrap_MYSQL_scramble_set,0,0},
{"rpl_pivot",0,_wrap_MYSQL_rpl_pivot_get,_wrap_MYSQL_rpl_pivot_set,0,0},
{"master",0,_wrap_MYSQL_master_get,_wrap_MYSQL_master_set,0,0},
{"next_slave",0,_wrap_MYSQL_next_slave_get,_wrap_MYSQL_next_slave_set,0,0},
{"last_used_slave",0,_wrap_MYSQL_last_used_slave_get,_wrap_MYSQL_last_used_slave_set,0,0},
{"last_used_con",0,_wrap_MYSQL_last_used_con_get,_wrap_MYSQL_last_used_con_set,0,0},
{"stmts",0,_wrap_MYSQL_stmts_get,_wrap_MYSQL_stmts_set,0,0},
{"methods",0,_wrap_MYSQL_methods_get,_wrap_MYSQL_methods_set,0,0},
{"thd",0,_wrap_MYSQL_thd_get,_wrap_MYSQL_thd_set,0,0},
{"unbuffered_fetch_owner",0,_wrap_MYSQL_unbuffered_fetch_owner_get,_wrap_MYSQL_unbuffered_fetch_owner_set,0,0},
{0,0,0,0}
};
static const char *swig_MYSQL_base_names[] = {0};
static const swig_type_info *swig_MYSQL_base[] = {0};
static swig_octave_class _wrap_class_MYSQL = {"MYSQL", &SWIGTYPE_p_st_mysql,0,_wrap_new_MYSQL,_wrap_delete_MYSQL,swig_MYSQL_members,swig_MYSQL_base_names,swig_MYSQL_base };

static octave_value_list _wrap_MYSQL_RES_row_count_set (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  my_ulonglong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_row_count_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_row_count_set" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_RES_row_count_set" "', argument " "2"" of type '" "my_ulonglong""'");
  } 
  arg2 = (my_ulonglong)(val2);
  if (arg1) (arg1)->row_count = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_row_count_get (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  my_ulonglong result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_row_count_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_row_count_get" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (my_ulonglong) ((arg1)->row_count);
  _outv = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_fields_set (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_FIELD *arg2 = (MYSQL_FIELD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_fields_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_fields_set" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_field, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_RES_fields_set" "', argument " "2"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg2 = (MYSQL_FIELD *)(argp2);
  if (arg1) (arg1)->fields = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_fields_get (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_FIELD *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_fields_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_fields_get" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (MYSQL_FIELD *) ((arg1)->fields);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_data_set (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_DATA *arg2 = (MYSQL_DATA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_data_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_data_set" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_data, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_RES_data_set" "', argument " "2"" of type '" "MYSQL_DATA *""'"); 
  }
  arg2 = (MYSQL_DATA *)(argp2);
  if (arg1) (arg1)->data = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_data_get (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_DATA *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_data_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_data_get" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (MYSQL_DATA *) ((arg1)->data);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_data, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_data_cursor_set (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_ROWS *arg2 = (MYSQL_ROWS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_data_cursor_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_data_cursor_set" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_rows, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_RES_data_cursor_set" "', argument " "2"" of type '" "MYSQL_ROWS *""'"); 
  }
  arg2 = (MYSQL_ROWS *)(argp2);
  if (arg1) (arg1)->data_cursor = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_data_cursor_get (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_ROWS *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_data_cursor_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_data_cursor_get" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (MYSQL_ROWS *) ((arg1)->data_cursor);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_rows, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_lengths_set (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  unsigned long *arg2 = (unsigned long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_lengths_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_lengths_set" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_unsigned_long, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_RES_lengths_set" "', argument " "2"" of type '" "unsigned long *""'"); 
  }
  arg2 = (unsigned long *)(argp2);
  if (arg1) (arg1)->lengths = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_lengths_get (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  unsigned long *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_lengths_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_lengths_get" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (unsigned long *) ((arg1)->lengths);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_handle_set (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL *arg2 = (MYSQL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_handle_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_handle_set" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_RES_handle_set" "', argument " "2"" of type '" "MYSQL *""'"); 
  }
  arg2 = (MYSQL *)(argp2);
  if (arg1) (arg1)->handle = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_handle_get (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_handle_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_handle_get" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (MYSQL *) ((arg1)->handle);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_field_alloc_set (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MEM_ROOT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_field_alloc_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_field_alloc_set" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_MEM_ROOT,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_RES_field_alloc_set" "', argument " "2"" of type '" "MEM_ROOT""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_RES_field_alloc_set" "', argument " "2"" of type '" "MEM_ROOT""'");
    } else {
      arg2 = *((MEM_ROOT *)(argp2));
    }
  }
  if (arg1) (arg1)->field_alloc = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_field_alloc_get (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MEM_ROOT result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_field_alloc_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_field_alloc_get" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result =  ((arg1)->field_alloc);
  _outv = SWIG_NewPointerObj((new MEM_ROOT((const MEM_ROOT&)(result))), SWIGTYPE_p_MEM_ROOT, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_field_count_set (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_field_count_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_field_count_set" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_RES_field_count_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->field_count = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_field_count_get (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_field_count_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_field_count_get" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (unsigned int) ((arg1)->field_count);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_current_field_set (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_current_field_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_current_field_set" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_RES_current_field_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->current_field = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_current_field_get (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_current_field_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_current_field_get" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (unsigned int) ((arg1)->current_field);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_row_set (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_ROW *arg2 = (MYSQL_ROW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_row_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_row_set" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_MYSQL_ROW, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_RES_row_set" "', argument " "2"" of type '" "MYSQL_ROW *""'"); 
  }
  arg2 = (MYSQL_ROW *)(argp2);
  if (arg1) (arg1)->row = *arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_row_get (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_ROW *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_row_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_row_get" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (MYSQL_ROW *)& ((arg1)->row);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MYSQL_ROW, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_current_row_set (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_ROW *arg2 = (MYSQL_ROW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_current_row_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_current_row_set" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_MYSQL_ROW, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_RES_current_row_set" "', argument " "2"" of type '" "MYSQL_ROW *""'"); 
  }
  arg2 = (MYSQL_ROW *)(argp2);
  if (arg1) (arg1)->current_row = *arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_current_row_get (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_ROW *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_current_row_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_current_row_get" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (MYSQL_ROW *)& ((arg1)->current_row);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MYSQL_ROW, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_eof_set (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_eof_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_eof_set" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_RES_eof_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_RES_eof_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->eof = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_eof_get (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_eof_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_eof_get" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result =  ((arg1)->eof);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_unbuffered_fetch_cancelled_set (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_unbuffered_fetch_cancelled_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_unbuffered_fetch_cancelled_set" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_RES_unbuffered_fetch_cancelled_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_RES_unbuffered_fetch_cancelled_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->unbuffered_fetch_cancelled = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_unbuffered_fetch_cancelled_get (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_unbuffered_fetch_cancelled_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_unbuffered_fetch_cancelled_get" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result =  ((arg1)->unbuffered_fetch_cancelled);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_methods_set (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  st_mysql_methods *arg2 = (st_mysql_methods *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_methods_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_methods_set" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_methods, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_RES_methods_set" "', argument " "2"" of type '" "st_mysql_methods const *""'"); 
  }
  arg2 = (st_mysql_methods *)(argp2);
  if (arg1) (arg1)->methods = (st_mysql_methods const *)arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_RES_methods_get (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  st_mysql_methods *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_RES_methods_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_RES_methods_get" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (st_mysql_methods *) ((arg1)->methods);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_MYSQL_RES (const octave_value_list& args, int nargout) {
  MYSQL_RES *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_MYSQL_RES",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (MYSQL_RES *)new MYSQL_RES();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_res, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_MYSQL_RES (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_MYSQL_RES",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MYSQL_RES" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_MYSQL_RES_members[] = {
{"row_count",0,_wrap_MYSQL_RES_row_count_get,_wrap_MYSQL_RES_row_count_set,0,0},
{"fields",0,_wrap_MYSQL_RES_fields_get,_wrap_MYSQL_RES_fields_set,0,0},
{"data",0,_wrap_MYSQL_RES_data_get,_wrap_MYSQL_RES_data_set,0,0},
{"data_cursor",0,_wrap_MYSQL_RES_data_cursor_get,_wrap_MYSQL_RES_data_cursor_set,0,0},
{"lengths",0,_wrap_MYSQL_RES_lengths_get,_wrap_MYSQL_RES_lengths_set,0,0},
{"handle",0,_wrap_MYSQL_RES_handle_get,_wrap_MYSQL_RES_handle_set,0,0},
{"field_alloc",0,_wrap_MYSQL_RES_field_alloc_get,_wrap_MYSQL_RES_field_alloc_set,0,0},
{"field_count",0,_wrap_MYSQL_RES_field_count_get,_wrap_MYSQL_RES_field_count_set,0,0},
{"current_field",0,_wrap_MYSQL_RES_current_field_get,_wrap_MYSQL_RES_current_field_set,0,0},
{"row",0,_wrap_MYSQL_RES_row_get,_wrap_MYSQL_RES_row_set,0,0},
{"current_row",0,_wrap_MYSQL_RES_current_row_get,_wrap_MYSQL_RES_current_row_set,0,0},
{"eof",0,_wrap_MYSQL_RES_eof_get,_wrap_MYSQL_RES_eof_set,0,0},
{"unbuffered_fetch_cancelled",0,_wrap_MYSQL_RES_unbuffered_fetch_cancelled_get,_wrap_MYSQL_RES_unbuffered_fetch_cancelled_set,0,0},
{"methods",0,_wrap_MYSQL_RES_methods_get,_wrap_MYSQL_RES_methods_set,0,0},
{0,0,0,0}
};
static const char *swig_MYSQL_RES_base_names[] = {0};
static const swig_type_info *swig_MYSQL_RES_base[] = {0};
static swig_octave_class _wrap_class_MYSQL_RES = {"MYSQL_RES", &SWIGTYPE_p_st_mysql_res,0,_wrap_new_MYSQL_RES,_wrap_delete_MYSQL_RES,swig_MYSQL_RES_members,swig_MYSQL_RES_base_names,swig_MYSQL_RES_base };

static octave_value_list _wrap_MYSQL_MANAGER_net_set (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  NET arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_net_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_net_set" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_NET,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_MANAGER_net_set" "', argument " "2"" of type '" "NET""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_MANAGER_net_set" "', argument " "2"" of type '" "NET""'");
    } else {
      arg2 = *((NET *)(argp2));
    }
  }
  if (arg1) (arg1)->net = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_net_get (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  NET result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_net_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_net_get" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result =  ((arg1)->net);
  _outv = SWIG_NewPointerObj((new NET((const NET&)(result))), SWIGTYPE_p_NET, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_host_set (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_host_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_host_set" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_MANAGER_host_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->host) delete[] arg1->host;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->host = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->host = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_host_get (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_host_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_host_get" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result = (char *) ((arg1)->host);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_user_set (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_user_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_user_set" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_MANAGER_user_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->user) delete[] arg1->user;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->user = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->user = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_user_get (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_user_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_user_get" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result = (char *) ((arg1)->user);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_passwd_set (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_passwd_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_passwd_set" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_MANAGER_passwd_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->passwd) delete[] arg1->passwd;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->passwd = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->passwd = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_passwd_get (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_passwd_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_passwd_get" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result = (char *) ((arg1)->passwd);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_port_set (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_port_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_port_set" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_MANAGER_port_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->port = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_port_get (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_port_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_port_get" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result = (unsigned int) ((arg1)->port);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_free_me_set (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_free_me_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_free_me_set" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_MANAGER_free_me_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_MANAGER_free_me_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->free_me = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_free_me_get (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_free_me_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_free_me_get" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result =  ((arg1)->free_me);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_eof_set (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_eof_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_eof_set" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_MANAGER_eof_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_MANAGER_eof_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->eof = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_eof_get (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_eof_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_eof_get" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result =  ((arg1)->eof);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_cmd_status_set (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_cmd_status_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_cmd_status_set" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_MANAGER_cmd_status_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->cmd_status = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_cmd_status_get (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_cmd_status_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_cmd_status_get" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result = (int) ((arg1)->cmd_status);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_last_errno_set (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_last_errno_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_last_errno_set" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_MANAGER_last_errno_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->last_errno = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_last_errno_get (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_last_errno_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_last_errno_get" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result = (int) ((arg1)->last_errno);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_net_buf_set (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_net_buf_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_net_buf_set" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_MANAGER_net_buf_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->net_buf) delete[] arg1->net_buf;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->net_buf = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->net_buf = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_net_buf_get (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_net_buf_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_net_buf_get" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result = (char *) ((arg1)->net_buf);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_net_buf_pos_set (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_net_buf_pos_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_net_buf_pos_set" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_MANAGER_net_buf_pos_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->net_buf_pos) delete[] arg1->net_buf_pos;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->net_buf_pos = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->net_buf_pos = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_net_buf_pos_get (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_net_buf_pos_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_net_buf_pos_get" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result = (char *) ((arg1)->net_buf_pos);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_net_data_end_set (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_net_data_end_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_net_data_end_set" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_MANAGER_net_data_end_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->net_data_end) delete[] arg1->net_data_end;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->net_data_end = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->net_data_end = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_net_data_end_get (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_net_data_end_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_net_data_end_get" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result = (char *) ((arg1)->net_data_end);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_net_buf_size_set (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_net_buf_size_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_net_buf_size_set" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_MANAGER_net_buf_size_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->net_buf_size = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_net_buf_size_get (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_net_buf_size_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_net_buf_size_get" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result = (int) ((arg1)->net_buf_size);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_last_error_set (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[256] ;
  int res2 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_last_error_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_last_error_set" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  res2 = SWIG_AsCharArray(args(1), temp2, 256);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_MANAGER_last_error_set" "', argument " "2"" of type '" "char [256]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->last_error,arg2,256*sizeof(char));
  else memset(arg1->last_error,0,256*sizeof(char));
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_MANAGER_last_error_get (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_MANAGER_last_error_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_MANAGER_last_error_get" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result = (char *)(char *) ((arg1)->last_error);
  {
    size_t size = 256;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    _outv = SWIG_FromCharPtrAndSize(result, size);
  }
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_MYSQL_MANAGER (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_MYSQL_MANAGER",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (MYSQL_MANAGER *)new MYSQL_MANAGER();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_manager, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_MYSQL_MANAGER (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_MYSQL_MANAGER",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MYSQL_MANAGER" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_MYSQL_MANAGER_members[] = {
{"net",0,_wrap_MYSQL_MANAGER_net_get,_wrap_MYSQL_MANAGER_net_set,0,0},
{"host",0,_wrap_MYSQL_MANAGER_host_get,_wrap_MYSQL_MANAGER_host_set,0,0},
{"user",0,_wrap_MYSQL_MANAGER_user_get,_wrap_MYSQL_MANAGER_user_set,0,0},
{"passwd",0,_wrap_MYSQL_MANAGER_passwd_get,_wrap_MYSQL_MANAGER_passwd_set,0,0},
{"port",0,_wrap_MYSQL_MANAGER_port_get,_wrap_MYSQL_MANAGER_port_set,0,0},
{"free_me",0,_wrap_MYSQL_MANAGER_free_me_get,_wrap_MYSQL_MANAGER_free_me_set,0,0},
{"eof",0,_wrap_MYSQL_MANAGER_eof_get,_wrap_MYSQL_MANAGER_eof_set,0,0},
{"cmd_status",0,_wrap_MYSQL_MANAGER_cmd_status_get,_wrap_MYSQL_MANAGER_cmd_status_set,0,0},
{"last_errno",0,_wrap_MYSQL_MANAGER_last_errno_get,_wrap_MYSQL_MANAGER_last_errno_set,0,0},
{"net_buf",0,_wrap_MYSQL_MANAGER_net_buf_get,_wrap_MYSQL_MANAGER_net_buf_set,0,0},
{"net_buf_pos",0,_wrap_MYSQL_MANAGER_net_buf_pos_get,_wrap_MYSQL_MANAGER_net_buf_pos_set,0,0},
{"net_data_end",0,_wrap_MYSQL_MANAGER_net_data_end_get,_wrap_MYSQL_MANAGER_net_data_end_set,0,0},
{"net_buf_size",0,_wrap_MYSQL_MANAGER_net_buf_size_get,_wrap_MYSQL_MANAGER_net_buf_size_set,0,0},
{"last_error",0,_wrap_MYSQL_MANAGER_last_error_get,_wrap_MYSQL_MANAGER_last_error_set,0,0},
{0,0,0,0}
};
static const char *swig_MYSQL_MANAGER_base_names[] = {0};
static const swig_type_info *swig_MYSQL_MANAGER_base[] = {0};
static swig_octave_class _wrap_class_MYSQL_MANAGER = {"MYSQL_MANAGER", &SWIGTYPE_p_st_mysql_manager,0,_wrap_new_MYSQL_MANAGER,_wrap_delete_MYSQL_MANAGER,swig_MYSQL_MANAGER_members,swig_MYSQL_MANAGER_base_names,swig_MYSQL_MANAGER_base };

static octave_value_list _wrap_MYSQL_PARAMETERS_p_max_allowed_packet_set (const octave_value_list& args, int nargout) {
  MYSQL_PARAMETERS *arg1 = (MYSQL_PARAMETERS *) 0 ;
  unsigned long *arg2 = (unsigned long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_PARAMETERS_p_max_allowed_packet_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_parameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_PARAMETERS_p_max_allowed_packet_set" "', argument " "1"" of type '" "MYSQL_PARAMETERS *""'"); 
  }
  arg1 = (MYSQL_PARAMETERS *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_unsigned_long, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_PARAMETERS_p_max_allowed_packet_set" "', argument " "2"" of type '" "unsigned long *""'"); 
  }
  arg2 = (unsigned long *)(argp2);
  if (arg1) (arg1)->p_max_allowed_packet = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_PARAMETERS_p_max_allowed_packet_get (const octave_value_list& args, int nargout) {
  MYSQL_PARAMETERS *arg1 = (MYSQL_PARAMETERS *) 0 ;
  unsigned long *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_PARAMETERS_p_max_allowed_packet_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_parameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_PARAMETERS_p_max_allowed_packet_get" "', argument " "1"" of type '" "MYSQL_PARAMETERS *""'"); 
  }
  arg1 = (MYSQL_PARAMETERS *)(argp1);
  result = (unsigned long *) ((arg1)->p_max_allowed_packet);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_PARAMETERS_p_net_buffer_length_set (const octave_value_list& args, int nargout) {
  MYSQL_PARAMETERS *arg1 = (MYSQL_PARAMETERS *) 0 ;
  unsigned long *arg2 = (unsigned long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_PARAMETERS_p_net_buffer_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_parameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_PARAMETERS_p_net_buffer_length_set" "', argument " "1"" of type '" "MYSQL_PARAMETERS *""'"); 
  }
  arg1 = (MYSQL_PARAMETERS *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_unsigned_long, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_PARAMETERS_p_net_buffer_length_set" "', argument " "2"" of type '" "unsigned long *""'"); 
  }
  arg2 = (unsigned long *)(argp2);
  if (arg1) (arg1)->p_net_buffer_length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_PARAMETERS_p_net_buffer_length_get (const octave_value_list& args, int nargout) {
  MYSQL_PARAMETERS *arg1 = (MYSQL_PARAMETERS *) 0 ;
  unsigned long *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_PARAMETERS_p_net_buffer_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_parameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_PARAMETERS_p_net_buffer_length_get" "', argument " "1"" of type '" "MYSQL_PARAMETERS *""'"); 
  }
  arg1 = (MYSQL_PARAMETERS *)(argp1);
  result = (unsigned long *) ((arg1)->p_net_buffer_length);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_MYSQL_PARAMETERS (const octave_value_list& args, int nargout) {
  MYSQL_PARAMETERS *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_MYSQL_PARAMETERS",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (MYSQL_PARAMETERS *)new MYSQL_PARAMETERS();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_parameters, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_MYSQL_PARAMETERS (const octave_value_list& args, int nargout) {
  MYSQL_PARAMETERS *arg1 = (MYSQL_PARAMETERS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_MYSQL_PARAMETERS",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_parameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MYSQL_PARAMETERS" "', argument " "1"" of type '" "MYSQL_PARAMETERS *""'"); 
  }
  arg1 = (MYSQL_PARAMETERS *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_MYSQL_PARAMETERS_members[] = {
{"p_max_allowed_packet",0,_wrap_MYSQL_PARAMETERS_p_max_allowed_packet_get,_wrap_MYSQL_PARAMETERS_p_max_allowed_packet_set,0,0},
{"p_net_buffer_length",0,_wrap_MYSQL_PARAMETERS_p_net_buffer_length_get,_wrap_MYSQL_PARAMETERS_p_net_buffer_length_set,0,0},
{0,0,0,0}
};
static const char *swig_MYSQL_PARAMETERS_base_names[] = {0};
static const swig_type_info *swig_MYSQL_PARAMETERS_base[] = {0};
static swig_octave_class _wrap_class_MYSQL_PARAMETERS = {"MYSQL_PARAMETERS", &SWIGTYPE_p_st_mysql_parameters,0,_wrap_new_MYSQL_PARAMETERS,_wrap_delete_MYSQL_PARAMETERS,swig_MYSQL_PARAMETERS_members,swig_MYSQL_PARAMETERS_base_names,swig_MYSQL_PARAMETERS_base };

static octave_value_list _wrap_mysql_server_init (const octave_value_list& args, int nargout) {
  int arg1 ;
  char **arg2 = (char **) 0 ;
  char **arg3 = (char **) 0 ;
  int result;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_server_init",args.length(),3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mysql_server_init" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_server_init" "', argument " "2"" of type '" "char **""'"); 
  }
  arg2 = (char **)(argp2);
  res3 = SWIG_ConvertPtr(args(2), &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mysql_server_init" "', argument " "3"" of type '" "char **""'"); 
  }
  arg3 = (char **)(argp3);
  result = (int)mysql_server_init(arg1,arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_server_end (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_server_end",args.length(),0,0,0)) {
    SWIG_fail;
  }
  mysql_server_end();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_get_parameters (const octave_value_list& args, int nargout) {
  MYSQL_PARAMETERS *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_get_parameters",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (MYSQL_PARAMETERS *)mysql_get_parameters();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_parameters, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_thread_init (const octave_value_list& args, int nargout) {
  my_bool result;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_thread_init",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = mysql_thread_init();
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_thread_end (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_thread_end",args.length(),0,0,0)) {
    SWIG_fail;
  }
  mysql_thread_end();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_num_rows (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  my_ulonglong result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_num_rows",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_num_rows" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (my_ulonglong)mysql_num_rows(arg1);
  _outv = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_num_fields (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_num_fields",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_num_fields" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (unsigned int)mysql_num_fields(arg1);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_eof (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_eof",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_eof" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = mysql_eof(arg1);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_fetch_field_direct (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  unsigned int arg2 ;
  MYSQL_FIELD *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_fetch_field_direct",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_fetch_field_direct" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mysql_fetch_field_direct" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  result = (MYSQL_FIELD *)mysql_fetch_field_direct(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_fetch_fields (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_FIELD *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_fetch_fields",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_fetch_fields" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (MYSQL_FIELD *)mysql_fetch_fields(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_row_tell (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_ROW_OFFSET result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_row_tell",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_row_tell" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = mysql_row_tell(arg1);
  _outv = SWIG_NewPointerObj((new MYSQL_ROW_OFFSET((const MYSQL_ROW_OFFSET&)(result))), SWIGTYPE_p_MYSQL_ROW_OFFSET, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_field_tell (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_FIELD_OFFSET result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_field_tell",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_field_tell" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = mysql_field_tell(arg1);
  _outv = SWIG_NewPointerObj((new MYSQL_FIELD_OFFSET((const MYSQL_FIELD_OFFSET&)(result))), SWIGTYPE_p_MYSQL_FIELD_OFFSET, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_field_count (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_field_count",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_field_count" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned int)mysql_field_count(arg1);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_affected_rows (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_ulonglong result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_affected_rows",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_affected_rows" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (my_ulonglong)mysql_affected_rows(arg1);
  _outv = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_insert_id (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_ulonglong result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_insert_id",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_insert_id" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (my_ulonglong)mysql_insert_id(arg1);
  _outv = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_errno (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_errno",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_errno" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned int)mysql_errno(arg1);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_error (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_error",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_error" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *)mysql_error(arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_sqlstate (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_sqlstate",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_sqlstate" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *)mysql_sqlstate(arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_warning_count (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_warning_count",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_warning_count" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned int)mysql_warning_count(arg1);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_info (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_info",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_info" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *)mysql_info(arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_thread_id (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_thread_id",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_thread_id" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned long)mysql_thread_id(arg1);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_character_set_name (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_character_set_name",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_character_set_name" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *)mysql_character_set_name(arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_set_character_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_set_character_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_set_character_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_set_character_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (int)mysql_set_character_set(arg1,(char const *)arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_init (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  MYSQL *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  {
    arg1=NULL; 
  }
  if (!SWIG_check_num_args("mysql_init",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (MYSQL *)mysql_init(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_ssl_set (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_ssl_set",args.length(),6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_ssl_set" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_ssl_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mysql_ssl_set" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "mysql_ssl_set" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  res5 = SWIG_AsCharPtrAndSize(args(4), &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "mysql_ssl_set" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = (char *)(buf5);
  res6 = SWIG_AsCharPtrAndSize(args(5), &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "mysql_ssl_set" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = (char *)(buf6);
  result = mysql_ssl_set(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_get_ssl_cipher (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_get_ssl_cipher",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_get_ssl_cipher" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *)mysql_get_ssl_cipher(arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_change_user (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_change_user",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_change_user" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_change_user" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mysql_change_user" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "mysql_change_user" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  result = mysql_change_user(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_real_connect (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  unsigned int arg6 = (unsigned int) 0 ;
  char *arg7 = (char *) 0 ;
  unsigned long arg8 ;
  MYSQL *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  {
    arg7=0;
  }
  {
    arg8=0;
  }
  if (!SWIG_check_num_args("mysql_real_connect",args.length(),6,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_real_connect" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_real_connect" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mysql_real_connect" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "mysql_real_connect" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  res5 = SWIG_AsCharPtrAndSize(args(4), &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "mysql_real_connect" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = (char *)(buf5);
  if (5<args.length()) {
    ecode6 = SWIG_AsVal_unsigned_SS_int(args(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mysql_real_connect" "', argument " "6"" of type '" "unsigned int""'");
    } 
    arg6 = (unsigned int)(val6);
  }
  result = (MYSQL *)mysql_real_connect(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6,(char const *)arg7,arg8);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_select_db (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_select_db",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_select_db" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_select_db" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (int)mysql_select_db(arg1,(char const *)arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_query (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_query",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_query" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_query" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (int)mysql_query(arg1,(char const *)arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_send_query (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_send_query",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_send_query" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_send_query" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_send_query" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  result = (int)mysql_send_query(arg1,(char const *)arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_real_query (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_real_query",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_real_query" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_real_query" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_real_query" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  result = (int)mysql_real_query(arg1,(char const *)arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_store_result (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  MYSQL_RES *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_store_result",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_store_result" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (MYSQL_RES *)mysql_store_result(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_use_result (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  MYSQL_RES *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_use_result",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_use_result" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (MYSQL_RES *)mysql_use_result(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_master_query (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long arg3 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_master_query",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_master_query" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_master_query" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_master_query" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  result = mysql_master_query(arg1,(char const *)arg2,arg3);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_master_send_query (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long arg3 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_master_send_query",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_master_send_query" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_master_send_query" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_master_send_query" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  result = mysql_master_send_query(arg1,(char const *)arg2,arg3);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_slave_query (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long arg3 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_slave_query",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_slave_query" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_slave_query" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_slave_query" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  result = mysql_slave_query(arg1,(char const *)arg2,arg3);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_slave_send_query (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long arg3 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_slave_send_query",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_slave_send_query" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_slave_send_query" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_slave_send_query" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  result = mysql_slave_send_query(arg1,(char const *)arg2,arg3);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_get_character_set_info (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  MY_CHARSET_INFO *arg2 = (MY_CHARSET_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_get_character_set_info",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_get_character_set_info" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_character_set, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_get_character_set_info" "', argument " "2"" of type '" "MY_CHARSET_INFO *""'"); 
  }
  arg2 = (MY_CHARSET_INFO *)(argp2);
  mysql_get_character_set_info(arg1,arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_set_local_infile_handler (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  int (*arg2)(void **,char const *,void *) = (int (*)(void **,char const *,void *)) 0 ;
  int (*arg3)(void *,char *,unsigned int) = (int (*)(void *,char *,unsigned int)) 0 ;
  void (*arg4)(void *) = (void (*)(void *)) 0 ;
  int (*arg5)(void *,char *,unsigned int) = (int (*)(void *,char *,unsigned int)) 0 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res6 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_set_local_infile_handler",args.length(),6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_set_local_infile_handler" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_p_void_p_q_const__char_p_void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "mysql_set_local_infile_handler" "', argument " "2"" of type '" "int (*)(void **,char const *,void *)""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(2), (void**)(&arg3), SWIGTYPE_p_f_p_void_p_char_unsigned_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "mysql_set_local_infile_handler" "', argument " "3"" of type '" "int (*)(void *,char *,unsigned int)""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(3), (void**)(&arg4), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "mysql_set_local_infile_handler" "', argument " "4"" of type '" "void (*)(void *)""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(4), (void**)(&arg5), SWIGTYPE_p_f_p_void_p_char_unsigned_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "mysql_set_local_infile_handler" "', argument " "5"" of type '" "int (*)(void *,char *,unsigned int)""'"); 
    }
  }
  res6 = SWIG_ConvertPtr(args(5),SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "mysql_set_local_infile_handler" "', argument " "6"" of type '" "void *""'"); 
  }
  mysql_set_local_infile_handler(arg1,arg2,arg3,arg4,arg5,arg6);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_set_local_infile_default (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_set_local_infile_default",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_set_local_infile_default" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  mysql_set_local_infile_default(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_enable_rpl_parse (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_enable_rpl_parse",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_enable_rpl_parse" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  mysql_enable_rpl_parse(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_disable_rpl_parse (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_disable_rpl_parse",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_disable_rpl_parse" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  mysql_disable_rpl_parse(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_rpl_parse_enabled (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_rpl_parse_enabled",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_rpl_parse_enabled" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (int)mysql_rpl_parse_enabled(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_enable_reads_from_master (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_enable_reads_from_master",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_enable_reads_from_master" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  mysql_enable_reads_from_master(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_disable_reads_from_master (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_disable_reads_from_master",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_disable_reads_from_master" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  mysql_disable_reads_from_master(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_reads_from_master_enabled (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_reads_from_master_enabled",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_reads_from_master_enabled" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = mysql_reads_from_master_enabled(arg1);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_rpl_query_type (const octave_value_list& args, int nargout) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  enum mysql_rpl_type result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_rpl_query_type",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_rpl_query_type" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mysql_rpl_query_type" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (enum mysql_rpl_type)mysql_rpl_query_type((char const *)arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_rpl_probe (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_rpl_probe",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_rpl_probe" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = mysql_rpl_probe(arg1);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_set_master (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_set_master",args.length(),5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_set_master" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_set_master" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_set_master" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = (unsigned int)(val3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "mysql_set_master" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  res5 = SWIG_AsCharPtrAndSize(args(4), &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "mysql_set_master" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = (char *)(buf5);
  result = (int)mysql_set_master(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_add_slave (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_add_slave",args.length(),5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_add_slave" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_add_slave" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_add_slave" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = (unsigned int)(val3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "mysql_add_slave" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  res5 = SWIG_AsCharPtrAndSize(args(4), &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "mysql_add_slave" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = (char *)(buf5);
  result = (int)mysql_add_slave(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_shutdown (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  enum mysql_enum_shutdown_level arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_shutdown",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_shutdown" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mysql_shutdown" "', argument " "2"" of type '" "enum mysql_enum_shutdown_level""'");
  } 
  arg2 = (enum mysql_enum_shutdown_level)(val2);
  result = (int)mysql_shutdown(arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_dump_debug_info (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_dump_debug_info",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_dump_debug_info" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (int)mysql_dump_debug_info(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_refresh (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_refresh",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_refresh" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mysql_refresh" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  result = (int)mysql_refresh(arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_kill (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned long arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_kill",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_kill" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mysql_kill" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  result = (int)mysql_kill(arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_set_server_option (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  enum enum_mysql_set_option arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_set_server_option",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_set_server_option" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mysql_set_server_option" "', argument " "2"" of type '" "enum enum_mysql_set_option""'");
  } 
  arg2 = (enum enum_mysql_set_option)(val2);
  result = (int)mysql_set_server_option(arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_ping (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_ping",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_ping" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (int)mysql_ping(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stat (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stat",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stat" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *)mysql_stat(arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_get_server_info (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_get_server_info",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_get_server_info" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *)mysql_get_server_info(arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_get_client_info (const octave_value_list& args, int nargout) {
  char *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_get_client_info",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (char *)mysql_get_client_info();
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_get_client_version (const octave_value_list& args, int nargout) {
  unsigned long result;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_get_client_version",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (unsigned long)mysql_get_client_version();
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_get_host_info (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_get_host_info",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_get_host_info" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (char *)mysql_get_host_info(arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_get_server_version (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_get_server_version",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_get_server_version" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned long)mysql_get_server_version(arg1);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_get_proto_info (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_get_proto_info",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_get_proto_info" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (unsigned int)mysql_get_proto_info(arg1);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_list_dbs (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  MYSQL_RES *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_list_dbs",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_list_dbs" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_list_dbs" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (MYSQL_RES *)mysql_list_dbs(arg1,(char const *)arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_list_tables (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  MYSQL_RES *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_list_tables",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_list_tables" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_list_tables" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (MYSQL_RES *)mysql_list_tables(arg1,(char const *)arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_list_processes (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  MYSQL_RES *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_list_processes",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_list_processes" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (MYSQL_RES *)mysql_list_processes(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_options (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  enum mysql_option arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_options",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_options" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mysql_options" "', argument " "2"" of type '" "enum mysql_option""'");
  } 
  arg2 = (enum mysql_option)(val2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mysql_options" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (int)mysql_options(arg1,arg2,(char const *)arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_free_result (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_free_result",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_free_result" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  mysql_free_result(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_data_seek (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  my_ulonglong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_data_seek",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_data_seek" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mysql_data_seek" "', argument " "2"" of type '" "my_ulonglong""'");
  } 
  arg2 = (my_ulonglong)(val2);
  mysql_data_seek(arg1,arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_row_seek (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_ROW_OFFSET arg2 ;
  MYSQL_ROW_OFFSET result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_row_seek",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_row_seek" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_MYSQL_ROW_OFFSET,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_row_seek" "', argument " "2"" of type '" "MYSQL_ROW_OFFSET""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mysql_row_seek" "', argument " "2"" of type '" "MYSQL_ROW_OFFSET""'");
    } else {
      arg2 = *((MYSQL_ROW_OFFSET *)(argp2));
    }
  }
  result = mysql_row_seek(arg1,arg2);
  _outv = SWIG_NewPointerObj((new MYSQL_ROW_OFFSET((const MYSQL_ROW_OFFSET&)(result))), SWIGTYPE_p_MYSQL_ROW_OFFSET, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_field_seek (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_FIELD_OFFSET arg2 ;
  MYSQL_FIELD_OFFSET result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_field_seek",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_field_seek" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_MYSQL_FIELD_OFFSET,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_field_seek" "', argument " "2"" of type '" "MYSQL_FIELD_OFFSET""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mysql_field_seek" "', argument " "2"" of type '" "MYSQL_FIELD_OFFSET""'");
    } else {
      arg2 = *((MYSQL_FIELD_OFFSET *)(argp2));
    }
  }
  result = mysql_field_seek(arg1,arg2);
  _outv = SWIG_NewPointerObj((new MYSQL_FIELD_OFFSET((const MYSQL_FIELD_OFFSET&)(result))), SWIGTYPE_p_MYSQL_FIELD_OFFSET, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_fetch_row (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_ROW result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_fetch_row",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_fetch_row" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = mysql_fetch_row(arg1);
  _outv = SWIG_NewPointerObj((new MYSQL_ROW((const MYSQL_ROW&)(result))), SWIGTYPE_p_MYSQL_ROW, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_fetch_lengths (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  unsigned long *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_fetch_lengths",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_fetch_lengths" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (unsigned long *)mysql_fetch_lengths(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_fetch_field (const octave_value_list& args, int nargout) {
  MYSQL_RES *arg1 = (MYSQL_RES *) 0 ;
  MYSQL_FIELD *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_fetch_field",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_fetch_field" "', argument " "1"" of type '" "MYSQL_RES *""'"); 
  }
  arg1 = (MYSQL_RES *)(argp1);
  result = (MYSQL_FIELD *)mysql_fetch_field(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_list_fields (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  MYSQL_RES *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_list_fields",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_list_fields" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_list_fields" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mysql_list_fields" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (MYSQL_RES *)mysql_list_fields(arg1,(char const *)arg2,(char const *)arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_escape_string (const octave_value_list& args, int nargout) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long arg3 ;
  unsigned long result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_escape_string",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_escape_string" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_escape_string" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_escape_string" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  result = (unsigned long)mysql_escape_string(arg1,(char const *)arg2,arg3);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_hex_string (const octave_value_list& args, int nargout) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long arg3 ;
  unsigned long result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_hex_string",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_hex_string" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_hex_string" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_hex_string" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  result = (unsigned long)mysql_hex_string(arg1,(char const *)arg2,arg3);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_real_escape_string (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned long arg4 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_real_escape_string",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_real_escape_string" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_real_escape_string" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mysql_real_escape_string" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mysql_real_escape_string" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = (unsigned long)(val4);
  result = (unsigned long)mysql_real_escape_string(arg1,arg2,(char const *)arg3,arg4);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_debug (const octave_value_list& args, int nargout) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_debug",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_debug" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  mysql_debug((char const *)arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_odbc_escape_string (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long arg3 ;
  char *arg4 = (char *) 0 ;
  unsigned long arg5 ;
  void *arg6 = (void *) 0 ;
  char *(*arg7)(void *,char *,unsigned long *) = (char *(*)(void *,char *,unsigned long *)) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  int res6 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_odbc_escape_string",args.length(),7,7,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_odbc_escape_string" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_odbc_escape_string" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_odbc_escape_string" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "mysql_odbc_escape_string" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  ecode5 = SWIG_AsVal_unsigned_SS_long(args(4), &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mysql_odbc_escape_string" "', argument " "5"" of type '" "unsigned long""'");
  } 
  arg5 = (unsigned long)(val5);
  res6 = SWIG_ConvertPtr(args(5),SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "mysql_odbc_escape_string" "', argument " "6"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(6), (void**)(&arg7), SWIGTYPE_p_f_p_void_p_char_p_unsigned_long__p_char);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "mysql_odbc_escape_string" "', argument " "7"" of type '" "char *(*)(void *,char *,unsigned long *)""'"); 
    }
  }
  result = (char *)mysql_odbc_escape_string(arg1,arg2,arg3,(char const *)arg4,arg5,arg6,arg7);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
fail:
  return _out;
}


static octave_value_list _wrap_myodbc_remove_escape (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("myodbc_remove_escape",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "myodbc_remove_escape" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "myodbc_remove_escape" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  myodbc_remove_escape(arg1,arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_thread_safe (const octave_value_list& args, int nargout) {
  unsigned int result;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_thread_safe",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (unsigned int)mysql_thread_safe();
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_embedded (const octave_value_list& args, int nargout) {
  my_bool result;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_embedded",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = mysql_embedded();
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_manager_init (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  MYSQL_MANAGER *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_manager_init",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_manager_init" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  result = (MYSQL_MANAGER *)mysql_manager_init(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_manager_connect (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  unsigned int arg5 ;
  MYSQL_MANAGER *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_manager_connect",args.length(),5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_manager_connect" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_manager_connect" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mysql_manager_connect" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "mysql_manager_connect" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(args(4), &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mysql_manager_connect" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = (unsigned int)(val5);
  result = (MYSQL_MANAGER *)mysql_manager_connect(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_manager_close (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_manager_close",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_manager_close" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  mysql_manager_close(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_manager_command (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_manager_command",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_manager_command" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_manager_command" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_manager_command" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)mysql_manager_command(arg1,(char const *)arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_manager_fetch_line (const octave_value_list& args, int nargout) {
  MYSQL_MANAGER *arg1 = (MYSQL_MANAGER *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_manager_fetch_line",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_manager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_manager_fetch_line" "', argument " "1"" of type '" "MYSQL_MANAGER *""'"); 
  }
  arg1 = (MYSQL_MANAGER *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_manager_fetch_line" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_manager_fetch_line" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)mysql_manager_fetch_line(arg1,arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_read_query_result (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_read_query_result",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_read_query_result" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = mysql_read_query_result(arg1);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_length_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  unsigned long *arg2 = (unsigned long *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_length_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_unsigned_long, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_BIND_length_set" "', argument " "2"" of type '" "unsigned long *""'"); 
  }
  arg2 = (unsigned long *)(argp2);
  if (arg1) (arg1)->length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_length_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  unsigned long *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_length_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result = (unsigned long *) ((arg1)->length);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_is_null_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  my_bool *arg2 = (my_bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_is_null_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_is_null_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_my_bool, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_BIND_is_null_set" "', argument " "2"" of type '" "my_bool *""'"); 
  }
  arg2 = (my_bool *)(argp2);
  if (arg1) (arg1)->is_null = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_is_null_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  my_bool *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_is_null_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_is_null_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result = (my_bool *) ((arg1)->is_null);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_my_bool, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_buffer_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_buffer_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_buffer_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_BIND_buffer_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->buffer = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_buffer_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_buffer_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_buffer_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result = (void *) ((arg1)->buffer);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_error_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  my_bool *arg2 = (my_bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_error_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_error_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_my_bool, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_BIND_error_set" "', argument " "2"" of type '" "my_bool *""'"); 
  }
  arg2 = (my_bool *)(argp2);
  if (arg1) (arg1)->error = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_error_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  my_bool *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_error_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_error_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result = (my_bool *) ((arg1)->error);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_my_bool, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_buffer_type_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  enum enum_field_types arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_buffer_type_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_buffer_type_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_BIND_buffer_type_set" "', argument " "2"" of type '" "enum enum_field_types""'");
  } 
  arg2 = (enum enum_field_types)(val2);
  if (arg1) (arg1)->buffer_type = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_buffer_type_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  enum enum_field_types result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_buffer_type_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_buffer_type_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result = (enum enum_field_types) ((arg1)->buffer_type);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_buffer_length_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_buffer_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_buffer_length_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_BIND_buffer_length_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->buffer_length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_buffer_length_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_buffer_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_buffer_length_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result = (unsigned long) ((arg1)->buffer_length);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_row_ptr_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_row_ptr_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_row_ptr_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_BIND_row_ptr_set" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = (unsigned char *)(argp2);
  if (arg1) (arg1)->row_ptr = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_row_ptr_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_row_ptr_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_row_ptr_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result = (unsigned char *) ((arg1)->row_ptr);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_offset_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_offset_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_offset_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_BIND_offset_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->offset = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_offset_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_offset_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_offset_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result = (unsigned long) ((arg1)->offset);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_length_value_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_length_value_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_length_value_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_BIND_length_value_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->length_value = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_length_value_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_length_value_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_length_value_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result = (unsigned long) ((arg1)->length_value);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_param_number_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_param_number_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_param_number_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_BIND_param_number_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->param_number = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_param_number_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_param_number_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_param_number_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result = (unsigned int) ((arg1)->param_number);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_pack_length_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_pack_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_pack_length_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_BIND_pack_length_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->pack_length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_pack_length_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_pack_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_pack_length_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result = (unsigned int) ((arg1)->pack_length);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_error_value_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_error_value_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_error_value_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_BIND_error_value_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_BIND_error_value_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->error_value = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_error_value_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_error_value_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_error_value_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result =  ((arg1)->error_value);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_is_unsigned_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_is_unsigned_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_is_unsigned_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_BIND_is_unsigned_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_BIND_is_unsigned_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->is_unsigned = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_is_unsigned_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_is_unsigned_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_is_unsigned_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result =  ((arg1)->is_unsigned);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_long_data_used_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_long_data_used_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_long_data_used_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_BIND_long_data_used_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_BIND_long_data_used_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->long_data_used = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_long_data_used_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_long_data_used_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_long_data_used_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result =  ((arg1)->long_data_used);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_is_null_value_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_is_null_value_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_is_null_value_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_BIND_is_null_value_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_BIND_is_null_value_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->is_null_value = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_is_null_value_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_is_null_value_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_is_null_value_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result =  ((arg1)->is_null_value);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_store_param_func_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  void (*arg2)(NET *,st_mysql_bind *) = (void (*)(NET *,st_mysql_bind *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_store_param_func_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_store_param_func_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_NET_p_st_mysql_bind__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_BIND_store_param_func_set" "', argument " "2"" of type '" "void (*)(NET *,st_mysql_bind *)""'"); 
    }
  }
  if (arg1) (arg1)->store_param_func = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_store_param_func_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  void (*result)(NET *,st_mysql_bind *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_store_param_func_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_store_param_func_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result = (void (*)(NET *,st_mysql_bind *)) ((arg1)->store_param_func);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_NET_p_st_mysql_bind__void);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_fetch_result_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  void (*arg2)(st_mysql_bind *,MYSQL_FIELD *,unsigned char **) = (void (*)(st_mysql_bind *,MYSQL_FIELD *,unsigned char **)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_fetch_result_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_fetch_result_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql_bind_p_st_mysql_field_p_p_unsigned_char__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_BIND_fetch_result_set" "', argument " "2"" of type '" "void (*)(st_mysql_bind *,MYSQL_FIELD *,unsigned char **)""'"); 
    }
  }
  if (arg1) (arg1)->fetch_result = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_fetch_result_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  void (*result)(st_mysql_bind *,MYSQL_FIELD *,unsigned char **) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_fetch_result_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_fetch_result_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result = (void (*)(st_mysql_bind *,MYSQL_FIELD *,unsigned char **)) ((arg1)->fetch_result);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql_bind_p_st_mysql_field_p_p_unsigned_char__void);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_skip_result_set (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  void (*arg2)(st_mysql_bind *,MYSQL_FIELD *,unsigned char **) = (void (*)(st_mysql_bind *,MYSQL_FIELD *,unsigned char **)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_skip_result_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_skip_result_set" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql_bind_p_st_mysql_field_p_p_unsigned_char__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_BIND_skip_result_set" "', argument " "2"" of type '" "void (*)(st_mysql_bind *,MYSQL_FIELD *,unsigned char **)""'"); 
    }
  }
  if (arg1) (arg1)->skip_result = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_BIND_skip_result_get (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  void (*result)(st_mysql_bind *,MYSQL_FIELD *,unsigned char **) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_BIND_skip_result_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_BIND_skip_result_get" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  result = (void (*)(st_mysql_bind *,MYSQL_FIELD *,unsigned char **)) ((arg1)->skip_result);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql_bind_p_st_mysql_field_p_p_unsigned_char__void);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_MYSQL_BIND (const octave_value_list& args, int nargout) {
  MYSQL_BIND *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_MYSQL_BIND",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (MYSQL_BIND *)new MYSQL_BIND();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_bind, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_MYSQL_BIND (const octave_value_list& args, int nargout) {
  MYSQL_BIND *arg1 = (MYSQL_BIND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_MYSQL_BIND",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_bind, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MYSQL_BIND" "', argument " "1"" of type '" "MYSQL_BIND *""'"); 
  }
  arg1 = (MYSQL_BIND *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_MYSQL_BIND_members[] = {
{"length",0,_wrap_MYSQL_BIND_length_get,_wrap_MYSQL_BIND_length_set,0,0},
{"is_null",0,_wrap_MYSQL_BIND_is_null_get,_wrap_MYSQL_BIND_is_null_set,0,0},
{"buffer",0,_wrap_MYSQL_BIND_buffer_get,_wrap_MYSQL_BIND_buffer_set,0,0},
{"error",0,_wrap_MYSQL_BIND_error_get,_wrap_MYSQL_BIND_error_set,0,0},
{"buffer_type",0,_wrap_MYSQL_BIND_buffer_type_get,_wrap_MYSQL_BIND_buffer_type_set,0,0},
{"buffer_length",0,_wrap_MYSQL_BIND_buffer_length_get,_wrap_MYSQL_BIND_buffer_length_set,0,0},
{"row_ptr",0,_wrap_MYSQL_BIND_row_ptr_get,_wrap_MYSQL_BIND_row_ptr_set,0,0},
{"offset",0,_wrap_MYSQL_BIND_offset_get,_wrap_MYSQL_BIND_offset_set,0,0},
{"length_value",0,_wrap_MYSQL_BIND_length_value_get,_wrap_MYSQL_BIND_length_value_set,0,0},
{"param_number",0,_wrap_MYSQL_BIND_param_number_get,_wrap_MYSQL_BIND_param_number_set,0,0},
{"pack_length",0,_wrap_MYSQL_BIND_pack_length_get,_wrap_MYSQL_BIND_pack_length_set,0,0},
{"error_value",0,_wrap_MYSQL_BIND_error_value_get,_wrap_MYSQL_BIND_error_value_set,0,0},
{"is_unsigned",0,_wrap_MYSQL_BIND_is_unsigned_get,_wrap_MYSQL_BIND_is_unsigned_set,0,0},
{"long_data_used",0,_wrap_MYSQL_BIND_long_data_used_get,_wrap_MYSQL_BIND_long_data_used_set,0,0},
{"is_null_value",0,_wrap_MYSQL_BIND_is_null_value_get,_wrap_MYSQL_BIND_is_null_value_set,0,0},
{"store_param_func",0,_wrap_MYSQL_BIND_store_param_func_get,_wrap_MYSQL_BIND_store_param_func_set,0,0},
{"fetch_result",0,_wrap_MYSQL_BIND_fetch_result_get,_wrap_MYSQL_BIND_fetch_result_set,0,0},
{"skip_result",0,_wrap_MYSQL_BIND_skip_result_get,_wrap_MYSQL_BIND_skip_result_set,0,0},
{0,0,0,0}
};
static const char *swig_MYSQL_BIND_base_names[] = {0};
static const swig_type_info *swig_MYSQL_BIND_base[] = {0};
static swig_octave_class _wrap_class_MYSQL_BIND = {"MYSQL_BIND", &SWIGTYPE_p_st_mysql_bind,0,_wrap_new_MYSQL_BIND,_wrap_delete_MYSQL_BIND,swig_MYSQL_BIND_members,swig_MYSQL_BIND_base_names,swig_MYSQL_BIND_base };

static octave_value_list _wrap_MYSQL_STMT_mem_root_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MEM_ROOT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_mem_root_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_mem_root_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_MEM_ROOT,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_STMT_mem_root_set" "', argument " "2"" of type '" "MEM_ROOT""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_STMT_mem_root_set" "', argument " "2"" of type '" "MEM_ROOT""'");
    } else {
      arg2 = *((MEM_ROOT *)(argp2));
    }
  }
  if (arg1) (arg1)->mem_root = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_mem_root_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MEM_ROOT result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_mem_root_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_mem_root_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result =  ((arg1)->mem_root);
  _outv = SWIG_NewPointerObj((new MEM_ROOT((const MEM_ROOT&)(result))), SWIGTYPE_p_MEM_ROOT, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_list_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  LIST arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_list_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_list_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_LIST,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_STMT_list_set" "', argument " "2"" of type '" "LIST""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_STMT_list_set" "', argument " "2"" of type '" "LIST""'");
    } else {
      arg2 = *((LIST *)(argp2));
    }
  }
  if (arg1) (arg1)->list = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_list_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  LIST result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_list_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_list_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result =  ((arg1)->list);
  _outv = SWIG_NewPointerObj((new LIST((const LIST&)(result))), SWIGTYPE_p_LIST, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_mysql_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL *arg2 = (MYSQL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_mysql_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_mysql_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_STMT_mysql_set" "', argument " "2"" of type '" "MYSQL *""'"); 
  }
  arg2 = (MYSQL *)(argp2);
  if (arg1) (arg1)->mysql = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_mysql_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_mysql_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_mysql_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (MYSQL *) ((arg1)->mysql);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_params_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_BIND *arg2 = (MYSQL_BIND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_params_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_params_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_bind, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_STMT_params_set" "', argument " "2"" of type '" "MYSQL_BIND *""'"); 
  }
  arg2 = (MYSQL_BIND *)(argp2);
  if (arg1) (arg1)->params = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_params_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_BIND *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_params_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_params_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (MYSQL_BIND *) ((arg1)->params);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_bind_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_BIND *arg2 = (MYSQL_BIND *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_bind_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_bind_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_bind, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_STMT_bind_set" "', argument " "2"" of type '" "MYSQL_BIND *""'"); 
  }
  arg2 = (MYSQL_BIND *)(argp2);
  if (arg1) (arg1)->bind = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_bind_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_BIND *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_bind_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_bind_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (MYSQL_BIND *) ((arg1)->bind);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_fields_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_FIELD *arg2 = (MYSQL_FIELD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_fields_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_fields_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_field, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_STMT_fields_set" "', argument " "2"" of type '" "MYSQL_FIELD *""'"); 
  }
  arg2 = (MYSQL_FIELD *)(argp2);
  if (arg1) (arg1)->fields = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_fields_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_FIELD *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_fields_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_fields_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (MYSQL_FIELD *) ((arg1)->fields);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_field, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_result_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_DATA *arg2 = (MYSQL_DATA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_result_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_result_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_data, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_STMT_result_set" "', argument " "2"" of type '" "MYSQL_DATA *""'"); 
  }
  arg2 = (MYSQL_DATA *)(argp2);
  if (arg1) (arg1)->result = *arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_result_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_DATA *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_result_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_result_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (MYSQL_DATA *)& ((arg1)->result);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_data, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_data_cursor_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_ROWS *arg2 = (MYSQL_ROWS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_data_cursor_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_data_cursor_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_rows, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_STMT_data_cursor_set" "', argument " "2"" of type '" "MYSQL_ROWS *""'"); 
  }
  arg2 = (MYSQL_ROWS *)(argp2);
  if (arg1) (arg1)->data_cursor = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_data_cursor_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_ROWS *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_data_cursor_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_data_cursor_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (MYSQL_ROWS *) ((arg1)->data_cursor);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_rows, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_affected_rows_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_ulonglong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_affected_rows_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_affected_rows_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_STMT_affected_rows_set" "', argument " "2"" of type '" "my_ulonglong""'");
  } 
  arg2 = (my_ulonglong)(val2);
  if (arg1) (arg1)->affected_rows = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_affected_rows_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_ulonglong result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_affected_rows_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_affected_rows_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (my_ulonglong) ((arg1)->affected_rows);
  _outv = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_insert_id_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_ulonglong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_insert_id_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_insert_id_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_STMT_insert_id_set" "', argument " "2"" of type '" "my_ulonglong""'");
  } 
  arg2 = (my_ulonglong)(val2);
  if (arg1) (arg1)->insert_id = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_insert_id_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_ulonglong result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_insert_id_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_insert_id_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (my_ulonglong) ((arg1)->insert_id);
  _outv = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_read_row_func_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  int (*arg2)(st_mysql_stmt *,unsigned char **) = (int (*)(st_mysql_stmt *,unsigned char **)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_read_row_func_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_read_row_func_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql_stmt_p_p_unsigned_char__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_STMT_read_row_func_set" "', argument " "2"" of type '" "int (*)(st_mysql_stmt *,unsigned char **)""'"); 
    }
  }
  if (arg1) (arg1)->read_row_func = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_read_row_func_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  int (*result)(st_mysql_stmt *,unsigned char **) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_read_row_func_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_read_row_func_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (int (*)(st_mysql_stmt *,unsigned char **)) ((arg1)->read_row_func);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql_stmt_p_p_unsigned_char__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_stmt_id_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_stmt_id_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_stmt_id_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_STMT_stmt_id_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->stmt_id = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_stmt_id_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_stmt_id_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_stmt_id_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (unsigned long) ((arg1)->stmt_id);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_flags_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_flags_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_flags_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_STMT_flags_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->flags = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_flags_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_flags_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_flags_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (unsigned long) ((arg1)->flags);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_prefetch_rows_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_prefetch_rows_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_prefetch_rows_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_STMT_prefetch_rows_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = (unsigned long)(val2);
  if (arg1) (arg1)->prefetch_rows = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_prefetch_rows_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_prefetch_rows_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_prefetch_rows_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (unsigned long) ((arg1)->prefetch_rows);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_server_status_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_server_status_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_server_status_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_STMT_server_status_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->server_status = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_server_status_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_server_status_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_server_status_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (unsigned int) ((arg1)->server_status);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_last_errno_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_last_errno_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_last_errno_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_STMT_last_errno_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->last_errno = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_last_errno_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_last_errno_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_last_errno_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (unsigned int) ((arg1)->last_errno);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_param_count_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_param_count_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_param_count_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_STMT_param_count_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->param_count = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_param_count_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_param_count_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_param_count_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (unsigned int) ((arg1)->param_count);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_field_count_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_field_count_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_field_count_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_STMT_field_count_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->field_count = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_field_count_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_field_count_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_field_count_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (unsigned int) ((arg1)->field_count);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_state_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  enum enum_mysql_stmt_state arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_state_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_state_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_STMT_state_set" "', argument " "2"" of type '" "enum enum_mysql_stmt_state""'");
  } 
  arg2 = (enum enum_mysql_stmt_state)(val2);
  if (arg1) (arg1)->state = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_state_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  enum enum_mysql_stmt_state result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_state_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_state_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (enum enum_mysql_stmt_state) ((arg1)->state);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_last_error_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[MYSQL_ERRMSG_SIZE] ;
  int res2 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_last_error_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_last_error_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  res2 = SWIG_AsCharArray(args(1), temp2, MYSQL_ERRMSG_SIZE);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_STMT_last_error_set" "', argument " "2"" of type '" "char [MYSQL_ERRMSG_SIZE]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->last_error,arg2,MYSQL_ERRMSG_SIZE*sizeof(char));
  else memset(arg1->last_error,0,MYSQL_ERRMSG_SIZE*sizeof(char));
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_last_error_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_last_error_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_last_error_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (char *)(char *) ((arg1)->last_error);
  {
    size_t size = MYSQL_ERRMSG_SIZE;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    _outv = SWIG_FromCharPtrAndSize(result, size);
  }
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_sqlstate_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[SQLSTATE_LENGTH+1] ;
  int res2 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_sqlstate_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_sqlstate_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  res2 = SWIG_AsCharArray(args(1), temp2, SQLSTATE_LENGTH+1);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_STMT_sqlstate_set" "', argument " "2"" of type '" "char [SQLSTATE_LENGTH+1]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->sqlstate,arg2,SQLSTATE_LENGTH+1*sizeof(char));
  else memset(arg1->sqlstate,0,SQLSTATE_LENGTH+1*sizeof(char));
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_sqlstate_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_sqlstate_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_sqlstate_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (char *)(char *) ((arg1)->sqlstate);
  {
    size_t size = SQLSTATE_LENGTH+1;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    _outv = SWIG_FromCharPtrAndSize(result, size);
  }
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_send_types_to_server_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_send_types_to_server_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_send_types_to_server_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_STMT_send_types_to_server_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_STMT_send_types_to_server_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->send_types_to_server = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_send_types_to_server_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_send_types_to_server_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_send_types_to_server_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result =  ((arg1)->send_types_to_server);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_bind_param_done_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_bind_param_done_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_bind_param_done_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_STMT_bind_param_done_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_STMT_bind_param_done_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->bind_param_done = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_bind_param_done_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_bind_param_done_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_bind_param_done_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result =  ((arg1)->bind_param_done);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_bind_result_done_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_bind_result_done_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_bind_result_done_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MYSQL_STMT_bind_result_done_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = (unsigned char)(val2);
  if (arg1) (arg1)->bind_result_done = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_bind_result_done_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned char result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_bind_result_done_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_bind_result_done_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (unsigned char) ((arg1)->bind_result_done);
  _outv = SWIG_From_unsigned_SS_char((unsigned char)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_unbuffered_fetch_cancelled_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_unbuffered_fetch_cancelled_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_unbuffered_fetch_cancelled_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_STMT_unbuffered_fetch_cancelled_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_STMT_unbuffered_fetch_cancelled_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->unbuffered_fetch_cancelled = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_unbuffered_fetch_cancelled_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_unbuffered_fetch_cancelled_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_unbuffered_fetch_cancelled_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result =  ((arg1)->unbuffered_fetch_cancelled);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_update_max_length_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_update_max_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_update_max_length_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MYSQL_STMT_update_max_length_set" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MYSQL_STMT_update_max_length_set" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  if (arg1) (arg1)->update_max_length = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_STMT_update_max_length_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_STMT_update_max_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_STMT_update_max_length_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result =  ((arg1)->update_max_length);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_MYSQL_STMT (const octave_value_list& args, int nargout) {
  MYSQL_STMT *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_MYSQL_STMT",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (MYSQL_STMT *)new MYSQL_STMT();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_stmt, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_MYSQL_STMT (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_MYSQL_STMT",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MYSQL_STMT" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_MYSQL_STMT_members[] = {
{"mem_root",0,_wrap_MYSQL_STMT_mem_root_get,_wrap_MYSQL_STMT_mem_root_set,0,0},
{"list",0,_wrap_MYSQL_STMT_list_get,_wrap_MYSQL_STMT_list_set,0,0},
{"mysql",0,_wrap_MYSQL_STMT_mysql_get,_wrap_MYSQL_STMT_mysql_set,0,0},
{"params",0,_wrap_MYSQL_STMT_params_get,_wrap_MYSQL_STMT_params_set,0,0},
{"bind",0,_wrap_MYSQL_STMT_bind_get,_wrap_MYSQL_STMT_bind_set,0,0},
{"fields",0,_wrap_MYSQL_STMT_fields_get,_wrap_MYSQL_STMT_fields_set,0,0},
{"result",0,_wrap_MYSQL_STMT_result_get,_wrap_MYSQL_STMT_result_set,0,0},
{"data_cursor",0,_wrap_MYSQL_STMT_data_cursor_get,_wrap_MYSQL_STMT_data_cursor_set,0,0},
{"affected_rows",0,_wrap_MYSQL_STMT_affected_rows_get,_wrap_MYSQL_STMT_affected_rows_set,0,0},
{"insert_id",0,_wrap_MYSQL_STMT_insert_id_get,_wrap_MYSQL_STMT_insert_id_set,0,0},
{"read_row_func",0,_wrap_MYSQL_STMT_read_row_func_get,_wrap_MYSQL_STMT_read_row_func_set,0,0},
{"stmt_id",0,_wrap_MYSQL_STMT_stmt_id_get,_wrap_MYSQL_STMT_stmt_id_set,0,0},
{"flags",0,_wrap_MYSQL_STMT_flags_get,_wrap_MYSQL_STMT_flags_set,0,0},
{"prefetch_rows",0,_wrap_MYSQL_STMT_prefetch_rows_get,_wrap_MYSQL_STMT_prefetch_rows_set,0,0},
{"server_status",0,_wrap_MYSQL_STMT_server_status_get,_wrap_MYSQL_STMT_server_status_set,0,0},
{"last_errno",0,_wrap_MYSQL_STMT_last_errno_get,_wrap_MYSQL_STMT_last_errno_set,0,0},
{"param_count",0,_wrap_MYSQL_STMT_param_count_get,_wrap_MYSQL_STMT_param_count_set,0,0},
{"field_count",0,_wrap_MYSQL_STMT_field_count_get,_wrap_MYSQL_STMT_field_count_set,0,0},
{"state",0,_wrap_MYSQL_STMT_state_get,_wrap_MYSQL_STMT_state_set,0,0},
{"last_error",0,_wrap_MYSQL_STMT_last_error_get,_wrap_MYSQL_STMT_last_error_set,0,0},
{"sqlstate",0,_wrap_MYSQL_STMT_sqlstate_get,_wrap_MYSQL_STMT_sqlstate_set,0,0},
{"send_types_to_server",0,_wrap_MYSQL_STMT_send_types_to_server_get,_wrap_MYSQL_STMT_send_types_to_server_set,0,0},
{"bind_param_done",0,_wrap_MYSQL_STMT_bind_param_done_get,_wrap_MYSQL_STMT_bind_param_done_set,0,0},
{"bind_result_done",0,_wrap_MYSQL_STMT_bind_result_done_get,_wrap_MYSQL_STMT_bind_result_done_set,0,0},
{"unbuffered_fetch_cancelled",0,_wrap_MYSQL_STMT_unbuffered_fetch_cancelled_get,_wrap_MYSQL_STMT_unbuffered_fetch_cancelled_set,0,0},
{"update_max_length",0,_wrap_MYSQL_STMT_update_max_length_get,_wrap_MYSQL_STMT_update_max_length_set,0,0},
{0,0,0,0}
};
static const char *swig_MYSQL_STMT_base_names[] = {0};
static const swig_type_info *swig_MYSQL_STMT_base[] = {0};
static swig_octave_class _wrap_class_MYSQL_STMT = {"MYSQL_STMT", &SWIGTYPE_p_st_mysql_stmt,0,_wrap_new_MYSQL_STMT,_wrap_delete_MYSQL_STMT,swig_MYSQL_STMT_members,swig_MYSQL_STMT_base_names,swig_MYSQL_STMT_base };

static octave_value_list _wrap_MYSQL_METHODS_read_query_result_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  my_bool (*arg2)(MYSQL *) = (my_bool (*)(MYSQL *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_read_query_result_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_read_query_result_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql__my_bool);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_read_query_result_set" "', argument " "2"" of type '" "my_bool (*)(MYSQL *)""'"); 
    }
  }
  if (arg1) (arg1)->read_query_result = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_read_query_result_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  my_bool (*result)(MYSQL *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_read_query_result_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_read_query_result_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (my_bool (*)(MYSQL *)) ((arg1)->read_query_result);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql__my_bool);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_advanced_command_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  my_bool (*arg2)(MYSQL *,enum enum_server_command,char const *,unsigned long,char const *,unsigned long,my_bool,MYSQL_STMT *) = (my_bool (*)(MYSQL *,enum enum_server_command,char const *,unsigned long,char const *,unsigned long,my_bool,MYSQL_STMT *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_advanced_command_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_advanced_command_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql_enum_enum_server_command_p_q_const__char_unsigned_long_p_q_const__char_unsigned_long_my_bool_p_st_mysql_stmt__my_bool);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_advanced_command_set" "', argument " "2"" of type '" "my_bool (*)(MYSQL *,enum enum_server_command,char const *,unsigned long,char const *,unsigned long,my_bool,MYSQL_STMT *)""'"); 
    }
  }
  if (arg1) (arg1)->advanced_command = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_advanced_command_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  my_bool (*result)(MYSQL *,enum enum_server_command,char const *,unsigned long,char const *,unsigned long,my_bool,MYSQL_STMT *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_advanced_command_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_advanced_command_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (my_bool (*)(MYSQL *,enum enum_server_command,char const *,unsigned long,char const *,unsigned long,my_bool,MYSQL_STMT *)) ((arg1)->advanced_command);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql_enum_enum_server_command_p_q_const__char_unsigned_long_p_q_const__char_unsigned_long_my_bool_p_st_mysql_stmt__my_bool);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_read_rows_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  MYSQL_DATA *(*arg2)(MYSQL *,MYSQL_FIELD *,unsigned int) = (MYSQL_DATA *(*)(MYSQL *,MYSQL_FIELD *,unsigned int)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_read_rows_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_read_rows_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_MYSQL_p_MYSQL_FIELD_unsigned_int__p_st_mysql_data);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_read_rows_set" "', argument " "2"" of type '" "MYSQL_DATA *(*)(MYSQL *,MYSQL_FIELD *,unsigned int)""'"); 
    }
  }
  if (arg1) (arg1)->read_rows = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_read_rows_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  MYSQL_DATA *(*result)(MYSQL *,MYSQL_FIELD *,unsigned int) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_read_rows_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_read_rows_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (MYSQL_DATA *(*)(MYSQL *,MYSQL_FIELD *,unsigned int)) ((arg1)->read_rows);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_MYSQL_p_MYSQL_FIELD_unsigned_int__p_st_mysql_data);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_use_result_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  MYSQL_RES *(*arg2)(MYSQL *) = (MYSQL_RES *(*)(MYSQL *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_use_result_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_use_result_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_MYSQL__p_st_mysql_res);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_use_result_set" "', argument " "2"" of type '" "MYSQL_RES *(*)(MYSQL *)""'"); 
    }
  }
  if (arg1) (arg1)->use_result = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_use_result_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  MYSQL_RES *(*result)(MYSQL *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_use_result_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_use_result_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (MYSQL_RES *(*)(MYSQL *)) ((arg1)->use_result);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_MYSQL__p_st_mysql_res);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_fetch_lengths_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  void (*arg2)(unsigned long *,MYSQL_ROW,unsigned int) = (void (*)(unsigned long *,MYSQL_ROW,unsigned int)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_fetch_lengths_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_fetch_lengths_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_unsigned_long_MYSQL_ROW_unsigned_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_fetch_lengths_set" "', argument " "2"" of type '" "void (*)(unsigned long *,MYSQL_ROW,unsigned int)""'"); 
    }
  }
  if (arg1) (arg1)->fetch_lengths = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_fetch_lengths_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  void (*result)(unsigned long *,MYSQL_ROW,unsigned int) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_fetch_lengths_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_fetch_lengths_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (void (*)(unsigned long *,MYSQL_ROW,unsigned int)) ((arg1)->fetch_lengths);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_unsigned_long_MYSQL_ROW_unsigned_int__void);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_flush_use_result_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  void (*arg2)(MYSQL *) = (void (*)(MYSQL *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_flush_use_result_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_flush_use_result_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_flush_use_result_set" "', argument " "2"" of type '" "void (*)(MYSQL *)""'"); 
    }
  }
  if (arg1) (arg1)->flush_use_result = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_flush_use_result_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  void (*result)(MYSQL *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_flush_use_result_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_flush_use_result_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (void (*)(MYSQL *)) ((arg1)->flush_use_result);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql__void);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_list_fields_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  MYSQL_FIELD *(*arg2)(MYSQL *) = (MYSQL_FIELD *(*)(MYSQL *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_list_fields_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_list_fields_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_MYSQL__p_st_mysql_field);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_list_fields_set" "', argument " "2"" of type '" "MYSQL_FIELD *(*)(MYSQL *)""'"); 
    }
  }
  if (arg1) (arg1)->list_fields = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_list_fields_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  MYSQL_FIELD *(*result)(MYSQL *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_list_fields_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_list_fields_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (MYSQL_FIELD *(*)(MYSQL *)) ((arg1)->list_fields);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_MYSQL__p_st_mysql_field);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_read_prepare_result_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  my_bool (*arg2)(MYSQL *,MYSQL_STMT *) = (my_bool (*)(MYSQL *,MYSQL_STMT *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_read_prepare_result_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_read_prepare_result_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql_p_st_mysql_stmt__my_bool);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_read_prepare_result_set" "', argument " "2"" of type '" "my_bool (*)(MYSQL *,MYSQL_STMT *)""'"); 
    }
  }
  if (arg1) (arg1)->read_prepare_result = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_read_prepare_result_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  my_bool (*result)(MYSQL *,MYSQL_STMT *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_read_prepare_result_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_read_prepare_result_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (my_bool (*)(MYSQL *,MYSQL_STMT *)) ((arg1)->read_prepare_result);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql_p_st_mysql_stmt__my_bool);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_stmt_execute_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  int (*arg2)(MYSQL_STMT *) = (int (*)(MYSQL_STMT *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_stmt_execute_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_stmt_execute_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql_stmt__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_stmt_execute_set" "', argument " "2"" of type '" "int (*)(MYSQL_STMT *)""'"); 
    }
  }
  if (arg1) (arg1)->stmt_execute = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_stmt_execute_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  int (*result)(MYSQL_STMT *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_stmt_execute_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_stmt_execute_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (int (*)(MYSQL_STMT *)) ((arg1)->stmt_execute);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql_stmt__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_read_binary_rows_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  int (*arg2)(MYSQL_STMT *) = (int (*)(MYSQL_STMT *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_read_binary_rows_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_read_binary_rows_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql_stmt__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_read_binary_rows_set" "', argument " "2"" of type '" "int (*)(MYSQL_STMT *)""'"); 
    }
  }
  if (arg1) (arg1)->read_binary_rows = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_read_binary_rows_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  int (*result)(MYSQL_STMT *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_read_binary_rows_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_read_binary_rows_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (int (*)(MYSQL_STMT *)) ((arg1)->read_binary_rows);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql_stmt__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_unbuffered_fetch_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  int (*arg2)(MYSQL *,char **) = (int (*)(MYSQL *,char **)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_unbuffered_fetch_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_unbuffered_fetch_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql_p_p_char__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_unbuffered_fetch_set" "', argument " "2"" of type '" "int (*)(MYSQL *,char **)""'"); 
    }
  }
  if (arg1) (arg1)->unbuffered_fetch = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_unbuffered_fetch_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  int (*result)(MYSQL *,char **) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_unbuffered_fetch_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_unbuffered_fetch_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (int (*)(MYSQL *,char **)) ((arg1)->unbuffered_fetch);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql_p_p_char__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_free_embedded_thd_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  void (*arg2)(MYSQL *) = (void (*)(MYSQL *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_free_embedded_thd_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_free_embedded_thd_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_free_embedded_thd_set" "', argument " "2"" of type '" "void (*)(MYSQL *)""'"); 
    }
  }
  if (arg1) (arg1)->free_embedded_thd = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_free_embedded_thd_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  void (*result)(MYSQL *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_free_embedded_thd_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_free_embedded_thd_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (void (*)(MYSQL *)) ((arg1)->free_embedded_thd);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql__void);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_read_statistics_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  char *(*arg2)(MYSQL *) = (char *(*)(MYSQL *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_read_statistics_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_read_statistics_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql__p_char);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_read_statistics_set" "', argument " "2"" of type '" "char const *(*)(MYSQL *)""'"); 
    }
  }
  if (arg1) (arg1)->read_statistics = (char const *(*)(MYSQL *))arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_read_statistics_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  char *(*result)(MYSQL *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_read_statistics_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_read_statistics_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (char *(*)(MYSQL *)) ((arg1)->read_statistics);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql__p_char);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_next_result_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  my_bool (*arg2)(MYSQL *) = (my_bool (*)(MYSQL *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_next_result_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_next_result_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql__my_bool);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_next_result_set" "', argument " "2"" of type '" "my_bool (*)(MYSQL *)""'"); 
    }
  }
  if (arg1) (arg1)->next_result = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_next_result_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  my_bool (*result)(MYSQL *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_next_result_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_next_result_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (my_bool (*)(MYSQL *)) ((arg1)->next_result);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql__my_bool);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_read_change_user_result_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  int (*arg2)(MYSQL *,char *,char const *) = (int (*)(MYSQL *,char *,char const *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_read_change_user_result_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_read_change_user_result_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql_p_char_p_q_const__char__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_read_change_user_result_set" "', argument " "2"" of type '" "int (*)(MYSQL *,char *,char const *)""'"); 
    }
  }
  if (arg1) (arg1)->read_change_user_result = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_read_change_user_result_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  int (*result)(MYSQL *,char *,char const *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_read_change_user_result_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_read_change_user_result_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (int (*)(MYSQL *,char *,char const *)) ((arg1)->read_change_user_result);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql_p_char_p_q_const__char__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_read_rows_from_cursor_set (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  int (*arg2)(MYSQL_STMT *) = (int (*)(MYSQL_STMT *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_read_rows_from_cursor_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_read_rows_from_cursor_set" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_st_mysql_stmt__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "MYSQL_METHODS_read_rows_from_cursor_set" "', argument " "2"" of type '" "int (*)(MYSQL_STMT *)""'"); 
    }
  }
  if (arg1) (arg1)->read_rows_from_cursor = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_MYSQL_METHODS_read_rows_from_cursor_get (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  int (*result)(MYSQL_STMT *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("MYSQL_METHODS_read_rows_from_cursor_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MYSQL_METHODS_read_rows_from_cursor_get" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  result = (int (*)(MYSQL_STMT *)) ((arg1)->read_rows_from_cursor);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_st_mysql_stmt__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_MYSQL_METHODS (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_MYSQL_METHODS",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (MYSQL_METHODS *)new MYSQL_METHODS();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_methods, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_MYSQL_METHODS (const octave_value_list& args, int nargout) {
  MYSQL_METHODS *arg1 = (MYSQL_METHODS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_MYSQL_METHODS",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_methods, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MYSQL_METHODS" "', argument " "1"" of type '" "MYSQL_METHODS *""'"); 
  }
  arg1 = (MYSQL_METHODS *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_MYSQL_METHODS_members[] = {
{"read_query_result",0,_wrap_MYSQL_METHODS_read_query_result_get,_wrap_MYSQL_METHODS_read_query_result_set,0,0},
{"advanced_command",0,_wrap_MYSQL_METHODS_advanced_command_get,_wrap_MYSQL_METHODS_advanced_command_set,0,0},
{"read_rows",0,_wrap_MYSQL_METHODS_read_rows_get,_wrap_MYSQL_METHODS_read_rows_set,0,0},
{"use_result",0,_wrap_MYSQL_METHODS_use_result_get,_wrap_MYSQL_METHODS_use_result_set,0,0},
{"fetch_lengths",0,_wrap_MYSQL_METHODS_fetch_lengths_get,_wrap_MYSQL_METHODS_fetch_lengths_set,0,0},
{"flush_use_result",0,_wrap_MYSQL_METHODS_flush_use_result_get,_wrap_MYSQL_METHODS_flush_use_result_set,0,0},
{"list_fields",0,_wrap_MYSQL_METHODS_list_fields_get,_wrap_MYSQL_METHODS_list_fields_set,0,0},
{"read_prepare_result",0,_wrap_MYSQL_METHODS_read_prepare_result_get,_wrap_MYSQL_METHODS_read_prepare_result_set,0,0},
{"stmt_execute",0,_wrap_MYSQL_METHODS_stmt_execute_get,_wrap_MYSQL_METHODS_stmt_execute_set,0,0},
{"read_binary_rows",0,_wrap_MYSQL_METHODS_read_binary_rows_get,_wrap_MYSQL_METHODS_read_binary_rows_set,0,0},
{"unbuffered_fetch",0,_wrap_MYSQL_METHODS_unbuffered_fetch_get,_wrap_MYSQL_METHODS_unbuffered_fetch_set,0,0},
{"free_embedded_thd",0,_wrap_MYSQL_METHODS_free_embedded_thd_get,_wrap_MYSQL_METHODS_free_embedded_thd_set,0,0},
{"read_statistics",0,_wrap_MYSQL_METHODS_read_statistics_get,_wrap_MYSQL_METHODS_read_statistics_set,0,0},
{"next_result",0,_wrap_MYSQL_METHODS_next_result_get,_wrap_MYSQL_METHODS_next_result_set,0,0},
{"read_change_user_result",0,_wrap_MYSQL_METHODS_read_change_user_result_get,_wrap_MYSQL_METHODS_read_change_user_result_set,0,0},
{"read_rows_from_cursor",0,_wrap_MYSQL_METHODS_read_rows_from_cursor_get,_wrap_MYSQL_METHODS_read_rows_from_cursor_set,0,0},
{0,0,0,0}
};
static const char *swig_MYSQL_METHODS_base_names[] = {0};
static const swig_type_info *swig_MYSQL_METHODS_base[] = {0};
static swig_octave_class _wrap_class_MYSQL_METHODS = {"MYSQL_METHODS", &SWIGTYPE_p_st_mysql_methods,0,_wrap_new_MYSQL_METHODS,_wrap_delete_MYSQL_METHODS,swig_MYSQL_METHODS_members,swig_MYSQL_METHODS_base_names,swig_MYSQL_METHODS_base };

static octave_value_list _wrap_mysql_stmt_init (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  MYSQL_STMT *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_init",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_init" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (MYSQL_STMT *)mysql_stmt_init(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_prepare (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_prepare",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_prepare" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_stmt_prepare" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_stmt_prepare" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = (unsigned long)(val3);
  result = (int)mysql_stmt_prepare(arg1,(char const *)arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_execute (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_execute",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_execute" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (int)mysql_stmt_execute(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_fetch (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_fetch",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_fetch" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (int)mysql_stmt_fetch(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_fetch_column (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_BIND *arg2 = (MYSQL_BIND *) 0 ;
  unsigned int arg3 ;
  unsigned long arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_fetch_column",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_fetch_column" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_stmt_fetch_column" "', argument " "2"" of type '" "MYSQL_BIND *""'"); 
  }
  arg2 = (MYSQL_BIND *)(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mysql_stmt_fetch_column" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = (unsigned int)(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mysql_stmt_fetch_column" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = (unsigned long)(val4);
  result = (int)mysql_stmt_fetch_column(arg1,arg2,arg3,arg4);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_store_result (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_store_result",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_store_result" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (int)mysql_stmt_store_result(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_param_count (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_param_count",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_param_count" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (unsigned long)mysql_stmt_param_count(arg1);
  _outv = SWIG_From_unsigned_SS_long((unsigned long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_attr_set (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  enum enum_stmt_attr_type arg2 ;
  void *arg3 = (void *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_attr_set",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_attr_set" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mysql_stmt_attr_set" "', argument " "2"" of type '" "enum enum_stmt_attr_type""'");
  } 
  arg2 = (enum enum_stmt_attr_type)(val2);
  res3 = SWIG_ConvertPtr(args(2),SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mysql_stmt_attr_set" "', argument " "3"" of type '" "void const *""'"); 
  }
  result = mysql_stmt_attr_set(arg1,arg2,(void const *)arg3);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_attr_get (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  enum enum_stmt_attr_type arg2 ;
  void *arg3 = (void *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_attr_get",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_attr_get" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mysql_stmt_attr_get" "', argument " "2"" of type '" "enum enum_stmt_attr_type""'");
  } 
  arg2 = (enum enum_stmt_attr_type)(val2);
  res3 = SWIG_ConvertPtr(args(2),SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mysql_stmt_attr_get" "', argument " "3"" of type '" "void *""'"); 
  }
  result = mysql_stmt_attr_get(arg1,arg2,arg3);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_bind_param (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_BIND *arg2 = (MYSQL_BIND *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_bind_param",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_bind_param" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_stmt_bind_param" "', argument " "2"" of type '" "MYSQL_BIND *""'"); 
  }
  arg2 = (MYSQL_BIND *)(argp2);
  result = mysql_stmt_bind_param(arg1,arg2);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_bind_result (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_BIND *arg2 = (MYSQL_BIND *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_bind_result",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_bind_result" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql_bind, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_stmt_bind_result" "', argument " "2"" of type '" "MYSQL_BIND *""'"); 
  }
  arg2 = (MYSQL_BIND *)(argp2);
  result = mysql_stmt_bind_result(arg1,arg2);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_close (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_close",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_close" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = mysql_stmt_close(arg1);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_reset (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_reset",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_reset" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = mysql_stmt_reset(arg1);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_free_result (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_free_result",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_free_result" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = mysql_stmt_free_result(arg1);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_send_long_data (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned long arg4 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_send_long_data",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_send_long_data" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mysql_stmt_send_long_data" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mysql_stmt_send_long_data" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mysql_stmt_send_long_data" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = (unsigned long)(val4);
  result = mysql_stmt_send_long_data(arg1,arg2,(char const *)arg3,arg4);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_result_metadata (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_RES *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_result_metadata",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_result_metadata" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (MYSQL_RES *)mysql_stmt_result_metadata(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_param_metadata (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_RES *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_param_metadata",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_param_metadata" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (MYSQL_RES *)mysql_stmt_param_metadata(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql_res, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_errno (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_errno",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_errno" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (unsigned int)mysql_stmt_errno(arg1);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_error (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_error",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_error" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (char *)mysql_stmt_error(arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_sqlstate (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_sqlstate",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_sqlstate" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (char *)mysql_stmt_sqlstate(arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_row_seek (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_ROW_OFFSET arg2 ;
  MYSQL_ROW_OFFSET result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_row_seek",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_row_seek" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_MYSQL_ROW_OFFSET,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_stmt_row_seek" "', argument " "2"" of type '" "MYSQL_ROW_OFFSET""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mysql_stmt_row_seek" "', argument " "2"" of type '" "MYSQL_ROW_OFFSET""'");
    } else {
      arg2 = *((MYSQL_ROW_OFFSET *)(argp2));
    }
  }
  result = mysql_stmt_row_seek(arg1,arg2);
  _outv = SWIG_NewPointerObj((new MYSQL_ROW_OFFSET((const MYSQL_ROW_OFFSET&)(result))), SWIGTYPE_p_MYSQL_ROW_OFFSET, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_row_tell (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  MYSQL_ROW_OFFSET result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_row_tell",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_row_tell" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = mysql_stmt_row_tell(arg1);
  _outv = SWIG_NewPointerObj((new MYSQL_ROW_OFFSET((const MYSQL_ROW_OFFSET&)(result))), SWIGTYPE_p_MYSQL_ROW_OFFSET, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_data_seek (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_ulonglong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_data_seek",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_data_seek" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mysql_stmt_data_seek" "', argument " "2"" of type '" "my_ulonglong""'");
  } 
  arg2 = (my_ulonglong)(val2);
  mysql_stmt_data_seek(arg1,arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_num_rows (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_ulonglong result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_num_rows",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_num_rows" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (my_ulonglong)mysql_stmt_num_rows(arg1);
  _outv = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_affected_rows (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_ulonglong result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_affected_rows",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_affected_rows" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (my_ulonglong)mysql_stmt_affected_rows(arg1);
  _outv = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_insert_id (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  my_ulonglong result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_insert_id",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_insert_id" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (my_ulonglong)mysql_stmt_insert_id(arg1);
  _outv = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_stmt_field_count (const octave_value_list& args, int nargout) {
  MYSQL_STMT *arg1 = (MYSQL_STMT *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_stmt_field_count",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_stmt_field_count" "', argument " "1"" of type '" "MYSQL_STMT *""'"); 
  }
  arg1 = (MYSQL_STMT *)(argp1);
  result = (unsigned int)mysql_stmt_field_count(arg1);
  _outv = SWIG_From_unsigned_SS_int((unsigned int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_commit (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_commit",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_commit" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = mysql_commit(arg1);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_rollback (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_rollback",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_rollback" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = mysql_rollback(arg1);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_autocommit (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool arg2 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_autocommit",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_autocommit" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_my_bool,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_autocommit" "', argument " "2"" of type '" "my_bool""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mysql_autocommit" "', argument " "2"" of type '" "my_bool""'");
    } else {
      arg2 = *((my_bool *)(argp2));
    }
  }
  result = mysql_autocommit(arg1,arg2);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_more_results (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  my_bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_more_results",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_more_results" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = mysql_more_results(arg1);
  _outv = SWIG_NewPointerObj((new my_bool((const my_bool&)(result))), SWIGTYPE_p_my_bool, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_next_result (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_next_result",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_next_result" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  result = (int)mysql_next_result(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_close (const octave_value_list& args, int nargout) {
  MYSQL *arg1 = (MYSQL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_close",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_st_mysql, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_close" "', argument " "1"" of type '" "MYSQL *""'"); 
  }
  arg1 = (MYSQL *)(argp1);
  mysql_close(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_generic_db (const octave_value_list& args, int nargout) {
  generic_db *arg1 = (generic_db *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_generic_db",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_generic_db, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_generic_db" "', argument " "1"" of type '" "generic_db *""'"); 
  }
  arg1 = (generic_db *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_generic_db_sql (const octave_value_list& args, int nargout) {
  generic_db *arg1 = (generic_db *) 0 ;
  char *arg2 = (char *) 0 ;
  Cell result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("generic_db_sql",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_generic_db, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_db_sql" "', argument " "1"" of type '" "generic_db *""'"); 
  }
  arg1 = (generic_db *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generic_db_sql" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (arg1)->sql((char const *)arg2);
  _outv=result;
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static swig_octave_member swig_generic_db_members[] = {
{"sql",_wrap_generic_db_sql,0,0,0,0},
{0,0,0,0}
};
static const char *swig_generic_db_base_names[] = {0};
static const swig_type_info *swig_generic_db_base[] = {0};
static swig_octave_class _wrap_class_generic_db = {"generic_db", &SWIGTYPE_p_generic_db,0,0,_wrap_delete_generic_db,swig_generic_db_members,swig_generic_db_base_names,swig_generic_db_base };

static octave_value_list _wrap_mysql_db_db_set (const octave_value_list& args, int nargout) {
  mysql_db *arg1 = (mysql_db *) 0 ;
  MYSQL *arg2 = (MYSQL *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_db_db_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_mysql_db, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_db_db_set" "', argument " "1"" of type '" "mysql_db *""'"); 
  }
  arg1 = (mysql_db *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_st_mysql, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_db_db_set" "', argument " "2"" of type '" "MYSQL *""'"); 
  }
  arg2 = (MYSQL *)(argp2);
  if (arg1) (arg1)->db = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_db_db_get (const octave_value_list& args, int nargout) {
  mysql_db *arg1 = (mysql_db *) 0 ;
  MYSQL *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_db_db_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_mysql_db, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_db_db_get" "', argument " "1"" of type '" "mysql_db *""'"); 
  }
  arg1 = (mysql_db *)(argp1);
  result = (MYSQL *) ((arg1)->db);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_st_mysql, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_mysql_db (const octave_value_list& args, int nargout) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  mysql_db *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_mysql_db",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mysql_db" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_mysql_db" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_mysql_db" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_mysql_db" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  result = (mysql_db *)new mysql_db((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mysql_db, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
fail:
  return _out;
}


static octave_value_list _wrap_delete_mysql_db (const octave_value_list& args, int nargout) {
  mysql_db *arg1 = (mysql_db *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_mysql_db",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_mysql_db, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_mysql_db" "', argument " "1"" of type '" "mysql_db *""'"); 
  }
  arg1 = (mysql_db *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_mysql_db_sql (const octave_value_list& args, int nargout) {
  mysql_db *arg1 = (mysql_db *) 0 ;
  char *arg2 = (char *) 0 ;
  Cell result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("mysql_db_sql",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_mysql_db, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mysql_db_sql" "', argument " "1"" of type '" "mysql_db *""'"); 
  }
  arg1 = (mysql_db *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mysql_db_sql" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (arg1)->sql((char const *)arg2);
  _outv=result;
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static swig_octave_member swig_mysql_db_members[] = {
{"db",0,_wrap_mysql_db_db_get,_wrap_mysql_db_db_set,0,0},
{"sql",_wrap_mysql_db_sql,0,0,0,0},
{0,0,0,0}
};
static const char *swig_mysql_db_base_names[] = {"_p_generic_db",0};
static const swig_type_info *swig_mysql_db_base[] = {0,0};
static swig_octave_class _wrap_class_mysql_db = {"mysql_db", &SWIGTYPE_p_mysql_db,0,_wrap_new_mysql_db,_wrap_delete_mysql_db,swig_mysql_db_members,swig_mysql_db_base_names,swig_mysql_db_base };


static const struct swig_octave_member swig_globals[] = {
{"MYSQL_ROW___paren",_wrap_MYSQL_ROW___paren,0,0,2,0},
{"new_MYSQL_ROW",_wrap_new_MYSQL_ROW,0,0,2,0},
{"delete_MYSQL_ROW",_wrap_delete_MYSQL_ROW,0,0,2,0},
{"MYSQL_FIELD_name_set",_wrap_MYSQL_FIELD_name_set,0,0,2,0},
{"MYSQL_FIELD_name_get",_wrap_MYSQL_FIELD_name_get,0,0,2,0},
{"MYSQL_FIELD_org_name_set",_wrap_MYSQL_FIELD_org_name_set,0,0,2,0},
{"MYSQL_FIELD_org_name_get",_wrap_MYSQL_FIELD_org_name_get,0,0,2,0},
{"MYSQL_FIELD_table_set",_wrap_MYSQL_FIELD_table_set,0,0,2,0},
{"MYSQL_FIELD_table_get",_wrap_MYSQL_FIELD_table_get,0,0,2,0},
{"MYSQL_FIELD_org_table_set",_wrap_MYSQL_FIELD_org_table_set,0,0,2,0},
{"MYSQL_FIELD_org_table_get",_wrap_MYSQL_FIELD_org_table_get,0,0,2,0},
{"MYSQL_FIELD_db_set",_wrap_MYSQL_FIELD_db_set,0,0,2,0},
{"MYSQL_FIELD_db_get",_wrap_MYSQL_FIELD_db_get,0,0,2,0},
{"MYSQL_FIELD_catalog_set",_wrap_MYSQL_FIELD_catalog_set,0,0,2,0},
{"MYSQL_FIELD_catalog_get",_wrap_MYSQL_FIELD_catalog_get,0,0,2,0},
{"MYSQL_FIELD_def_set",_wrap_MYSQL_FIELD_def_set,0,0,2,0},
{"MYSQL_FIELD_def_get",_wrap_MYSQL_FIELD_def_get,0,0,2,0},
{"MYSQL_FIELD_length_set",_wrap_MYSQL_FIELD_length_set,0,0,2,0},
{"MYSQL_FIELD_length_get",_wrap_MYSQL_FIELD_length_get,0,0,2,0},
{"MYSQL_FIELD_max_length_set",_wrap_MYSQL_FIELD_max_length_set,0,0,2,0},
{"MYSQL_FIELD_max_length_get",_wrap_MYSQL_FIELD_max_length_get,0,0,2,0},
{"MYSQL_FIELD_name_length_set",_wrap_MYSQL_FIELD_name_length_set,0,0,2,0},
{"MYSQL_FIELD_name_length_get",_wrap_MYSQL_FIELD_name_length_get,0,0,2,0},
{"MYSQL_FIELD_org_name_length_set",_wrap_MYSQL_FIELD_org_name_length_set,0,0,2,0},
{"MYSQL_FIELD_org_name_length_get",_wrap_MYSQL_FIELD_org_name_length_get,0,0,2,0},
{"MYSQL_FIELD_table_length_set",_wrap_MYSQL_FIELD_table_length_set,0,0,2,0},
{"MYSQL_FIELD_table_length_get",_wrap_MYSQL_FIELD_table_length_get,0,0,2,0},
{"MYSQL_FIELD_org_table_length_set",_wrap_MYSQL_FIELD_org_table_length_set,0,0,2,0},
{"MYSQL_FIELD_org_table_length_get",_wrap_MYSQL_FIELD_org_table_length_get,0,0,2,0},
{"MYSQL_FIELD_db_length_set",_wrap_MYSQL_FIELD_db_length_set,0,0,2,0},
{"MYSQL_FIELD_db_length_get",_wrap_MYSQL_FIELD_db_length_get,0,0,2,0},
{"MYSQL_FIELD_catalog_length_set",_wrap_MYSQL_FIELD_catalog_length_set,0,0,2,0},
{"MYSQL_FIELD_catalog_length_get",_wrap_MYSQL_FIELD_catalog_length_get,0,0,2,0},
{"MYSQL_FIELD_def_length_set",_wrap_MYSQL_FIELD_def_length_set,0,0,2,0},
{"MYSQL_FIELD_def_length_get",_wrap_MYSQL_FIELD_def_length_get,0,0,2,0},
{"MYSQL_FIELD_flags_set",_wrap_MYSQL_FIELD_flags_set,0,0,2,0},
{"MYSQL_FIELD_flags_get",_wrap_MYSQL_FIELD_flags_get,0,0,2,0},
{"MYSQL_FIELD_decimals_set",_wrap_MYSQL_FIELD_decimals_set,0,0,2,0},
{"MYSQL_FIELD_decimals_get",_wrap_MYSQL_FIELD_decimals_get,0,0,2,0},
{"MYSQL_FIELD_charsetnr_set",_wrap_MYSQL_FIELD_charsetnr_set,0,0,2,0},
{"MYSQL_FIELD_charsetnr_get",_wrap_MYSQL_FIELD_charsetnr_get,0,0,2,0},
{"MYSQL_FIELD_type_set",_wrap_MYSQL_FIELD_type_set,0,0,2,0},
{"MYSQL_FIELD_type_get",_wrap_MYSQL_FIELD_type_get,0,0,2,0},
{"new_MYSQL_FIELD",_wrap_new_MYSQL_FIELD,0,0,2,0},
{"delete_MYSQL_FIELD",_wrap_delete_MYSQL_FIELD,0,0,2,0},
{"MYSQL_ROWS_next_set",_wrap_MYSQL_ROWS_next_set,0,0,2,0},
{"MYSQL_ROWS_next_get",_wrap_MYSQL_ROWS_next_get,0,0,2,0},
{"MYSQL_ROWS_data_set",_wrap_MYSQL_ROWS_data_set,0,0,2,0},
{"MYSQL_ROWS_data_get",_wrap_MYSQL_ROWS_data_get,0,0,2,0},
{"MYSQL_ROWS_length_set",_wrap_MYSQL_ROWS_length_set,0,0,2,0},
{"MYSQL_ROWS_length_get",_wrap_MYSQL_ROWS_length_get,0,0,2,0},
{"new_MYSQL_ROWS",_wrap_new_MYSQL_ROWS,0,0,2,0},
{"delete_MYSQL_ROWS",_wrap_delete_MYSQL_ROWS,0,0,2,0},
{"MYSQL_DATA_rows_set",_wrap_MYSQL_DATA_rows_set,0,0,2,0},
{"MYSQL_DATA_rows_get",_wrap_MYSQL_DATA_rows_get,0,0,2,0},
{"MYSQL_DATA_fields_set",_wrap_MYSQL_DATA_fields_set,0,0,2,0},
{"MYSQL_DATA_fields_get",_wrap_MYSQL_DATA_fields_get,0,0,2,0},
{"MYSQL_DATA_data_set",_wrap_MYSQL_DATA_data_set,0,0,2,0},
{"MYSQL_DATA_data_get",_wrap_MYSQL_DATA_data_get,0,0,2,0},
{"MYSQL_DATA_alloc_set",_wrap_MYSQL_DATA_alloc_set,0,0,2,0},
{"MYSQL_DATA_alloc_get",_wrap_MYSQL_DATA_alloc_get,0,0,2,0},
{"MYSQL_DATA_embedded_info_set",_wrap_MYSQL_DATA_embedded_info_set,0,0,2,0},
{"MYSQL_DATA_embedded_info_get",_wrap_MYSQL_DATA_embedded_info_get,0,0,2,0},
{"new_MYSQL_DATA",_wrap_new_MYSQL_DATA,0,0,2,0},
{"delete_MYSQL_DATA",_wrap_delete_MYSQL_DATA,0,0,2,0},
{"st_mysql_options_connect_timeout_set",_wrap_st_mysql_options_connect_timeout_set,0,0,2,0},
{"st_mysql_options_connect_timeout_get",_wrap_st_mysql_options_connect_timeout_get,0,0,2,0},
{"st_mysql_options_read_timeout_set",_wrap_st_mysql_options_read_timeout_set,0,0,2,0},
{"st_mysql_options_read_timeout_get",_wrap_st_mysql_options_read_timeout_get,0,0,2,0},
{"st_mysql_options_write_timeout_set",_wrap_st_mysql_options_write_timeout_set,0,0,2,0},
{"st_mysql_options_write_timeout_get",_wrap_st_mysql_options_write_timeout_get,0,0,2,0},
{"st_mysql_options_port_set",_wrap_st_mysql_options_port_set,0,0,2,0},
{"st_mysql_options_port_get",_wrap_st_mysql_options_port_get,0,0,2,0},
{"st_mysql_options_protocol_set",_wrap_st_mysql_options_protocol_set,0,0,2,0},
{"st_mysql_options_protocol_get",_wrap_st_mysql_options_protocol_get,0,0,2,0},
{"st_mysql_options_client_flag_set",_wrap_st_mysql_options_client_flag_set,0,0,2,0},
{"st_mysql_options_client_flag_get",_wrap_st_mysql_options_client_flag_get,0,0,2,0},
{"st_mysql_options_host_set",_wrap_st_mysql_options_host_set,0,0,2,0},
{"st_mysql_options_host_get",_wrap_st_mysql_options_host_get,0,0,2,0},
{"st_mysql_options_user_set",_wrap_st_mysql_options_user_set,0,0,2,0},
{"st_mysql_options_user_get",_wrap_st_mysql_options_user_get,0,0,2,0},
{"st_mysql_options_password_set",_wrap_st_mysql_options_password_set,0,0,2,0},
{"st_mysql_options_password_get",_wrap_st_mysql_options_password_get,0,0,2,0},
{"st_mysql_options_unix_socket_set",_wrap_st_mysql_options_unix_socket_set,0,0,2,0},
{"st_mysql_options_unix_socket_get",_wrap_st_mysql_options_unix_socket_get,0,0,2,0},
{"st_mysql_options_db_set",_wrap_st_mysql_options_db_set,0,0,2,0},
{"st_mysql_options_db_get",_wrap_st_mysql_options_db_get,0,0,2,0},
{"st_mysql_options_init_commands_set",_wrap_st_mysql_options_init_commands_set,0,0,2,0},
{"st_mysql_options_init_commands_get",_wrap_st_mysql_options_init_commands_get,0,0,2,0},
{"st_mysql_options_my_cnf_file_set",_wrap_st_mysql_options_my_cnf_file_set,0,0,2,0},
{"st_mysql_options_my_cnf_file_get",_wrap_st_mysql_options_my_cnf_file_get,0,0,2,0},
{"st_mysql_options_my_cnf_group_set",_wrap_st_mysql_options_my_cnf_group_set,0,0,2,0},
{"st_mysql_options_my_cnf_group_get",_wrap_st_mysql_options_my_cnf_group_get,0,0,2,0},
{"st_mysql_options_charset_dir_set",_wrap_st_mysql_options_charset_dir_set,0,0,2,0},
{"st_mysql_options_charset_dir_get",_wrap_st_mysql_options_charset_dir_get,0,0,2,0},
{"st_mysql_options_charset_name_set",_wrap_st_mysql_options_charset_name_set,0,0,2,0},
{"st_mysql_options_charset_name_get",_wrap_st_mysql_options_charset_name_get,0,0,2,0},
{"st_mysql_options_ssl_key_set",_wrap_st_mysql_options_ssl_key_set,0,0,2,0},
{"st_mysql_options_ssl_key_get",_wrap_st_mysql_options_ssl_key_get,0,0,2,0},
{"st_mysql_options_ssl_cert_set",_wrap_st_mysql_options_ssl_cert_set,0,0,2,0},
{"st_mysql_options_ssl_cert_get",_wrap_st_mysql_options_ssl_cert_get,0,0,2,0},
{"st_mysql_options_ssl_ca_set",_wrap_st_mysql_options_ssl_ca_set,0,0,2,0},
{"st_mysql_options_ssl_ca_get",_wrap_st_mysql_options_ssl_ca_get,0,0,2,0},
{"st_mysql_options_ssl_capath_set",_wrap_st_mysql_options_ssl_capath_set,0,0,2,0},
{"st_mysql_options_ssl_capath_get",_wrap_st_mysql_options_ssl_capath_get,0,0,2,0},
{"st_mysql_options_ssl_cipher_set",_wrap_st_mysql_options_ssl_cipher_set,0,0,2,0},
{"st_mysql_options_ssl_cipher_get",_wrap_st_mysql_options_ssl_cipher_get,0,0,2,0},
{"st_mysql_options_shared_memory_base_name_set",_wrap_st_mysql_options_shared_memory_base_name_set,0,0,2,0},
{"st_mysql_options_shared_memory_base_name_get",_wrap_st_mysql_options_shared_memory_base_name_get,0,0,2,0},
{"st_mysql_options_max_allowed_packet_set",_wrap_st_mysql_options_max_allowed_packet_set,0,0,2,0},
{"st_mysql_options_max_allowed_packet_get",_wrap_st_mysql_options_max_allowed_packet_get,0,0,2,0},
{"st_mysql_options_use_ssl_set",_wrap_st_mysql_options_use_ssl_set,0,0,2,0},
{"st_mysql_options_use_ssl_get",_wrap_st_mysql_options_use_ssl_get,0,0,2,0},
{"st_mysql_options_compress_set",_wrap_st_mysql_options_compress_set,0,0,2,0},
{"st_mysql_options_compress_get",_wrap_st_mysql_options_compress_get,0,0,2,0},
{"st_mysql_options_named_pipe_set",_wrap_st_mysql_options_named_pipe_set,0,0,2,0},
{"st_mysql_options_named_pipe_get",_wrap_st_mysql_options_named_pipe_get,0,0,2,0},
{"st_mysql_options_rpl_probe_set",_wrap_st_mysql_options_rpl_probe_set,0,0,2,0},
{"st_mysql_options_rpl_probe_get",_wrap_st_mysql_options_rpl_probe_get,0,0,2,0},
{"st_mysql_options_rpl_parse_set",_wrap_st_mysql_options_rpl_parse_set,0,0,2,0},
{"st_mysql_options_rpl_parse_get",_wrap_st_mysql_options_rpl_parse_get,0,0,2,0},
{"st_mysql_options_no_master_reads_set",_wrap_st_mysql_options_no_master_reads_set,0,0,2,0},
{"st_mysql_options_no_master_reads_get",_wrap_st_mysql_options_no_master_reads_get,0,0,2,0},
{"st_mysql_options_separate_thread_set",_wrap_st_mysql_options_separate_thread_set,0,0,2,0},
{"st_mysql_options_separate_thread_get",_wrap_st_mysql_options_separate_thread_get,0,0,2,0},
{"st_mysql_options_methods_to_use_set",_wrap_st_mysql_options_methods_to_use_set,0,0,2,0},
{"st_mysql_options_methods_to_use_get",_wrap_st_mysql_options_methods_to_use_get,0,0,2,0},
{"st_mysql_options_client_ip_set",_wrap_st_mysql_options_client_ip_set,0,0,2,0},
{"st_mysql_options_client_ip_get",_wrap_st_mysql_options_client_ip_get,0,0,2,0},
{"st_mysql_options_secure_auth_set",_wrap_st_mysql_options_secure_auth_set,0,0,2,0},
{"st_mysql_options_secure_auth_get",_wrap_st_mysql_options_secure_auth_get,0,0,2,0},
{"st_mysql_options_report_data_truncation_set",_wrap_st_mysql_options_report_data_truncation_set,0,0,2,0},
{"st_mysql_options_report_data_truncation_get",_wrap_st_mysql_options_report_data_truncation_get,0,0,2,0},
{"st_mysql_options_local_infile_init_set",_wrap_st_mysql_options_local_infile_init_set,0,0,2,0},
{"st_mysql_options_local_infile_init_get",_wrap_st_mysql_options_local_infile_init_get,0,0,2,0},
{"st_mysql_options_local_infile_read_set",_wrap_st_mysql_options_local_infile_read_set,0,0,2,0},
{"st_mysql_options_local_infile_read_get",_wrap_st_mysql_options_local_infile_read_get,0,0,2,0},
{"st_mysql_options_local_infile_end_set",_wrap_st_mysql_options_local_infile_end_set,0,0,2,0},
{"st_mysql_options_local_infile_end_get",_wrap_st_mysql_options_local_infile_end_get,0,0,2,0},
{"st_mysql_options_local_infile_error_set",_wrap_st_mysql_options_local_infile_error_set,0,0,2,0},
{"st_mysql_options_local_infile_error_get",_wrap_st_mysql_options_local_infile_error_get,0,0,2,0},
{"st_mysql_options_local_infile_userdata_set",_wrap_st_mysql_options_local_infile_userdata_set,0,0,2,0},
{"st_mysql_options_local_infile_userdata_get",_wrap_st_mysql_options_local_infile_userdata_get,0,0,2,0},
{"new_st_mysql_options",_wrap_new_st_mysql_options,0,0,2,0},
{"delete_st_mysql_options",_wrap_delete_st_mysql_options,0,0,2,0},
{"MY_CHARSET_INFO_number_set",_wrap_MY_CHARSET_INFO_number_set,0,0,2,0},
{"MY_CHARSET_INFO_number_get",_wrap_MY_CHARSET_INFO_number_get,0,0,2,0},
{"MY_CHARSET_INFO_state_set",_wrap_MY_CHARSET_INFO_state_set,0,0,2,0},
{"MY_CHARSET_INFO_state_get",_wrap_MY_CHARSET_INFO_state_get,0,0,2,0},
{"MY_CHARSET_INFO_csname_set",_wrap_MY_CHARSET_INFO_csname_set,0,0,2,0},
{"MY_CHARSET_INFO_csname_get",_wrap_MY_CHARSET_INFO_csname_get,0,0,2,0},
{"MY_CHARSET_INFO_name_set",_wrap_MY_CHARSET_INFO_name_set,0,0,2,0},
{"MY_CHARSET_INFO_name_get",_wrap_MY_CHARSET_INFO_name_get,0,0,2,0},
{"MY_CHARSET_INFO_comment_set",_wrap_MY_CHARSET_INFO_comment_set,0,0,2,0},
{"MY_CHARSET_INFO_comment_get",_wrap_MY_CHARSET_INFO_comment_get,0,0,2,0},
{"MY_CHARSET_INFO_dir_set",_wrap_MY_CHARSET_INFO_dir_set,0,0,2,0},
{"MY_CHARSET_INFO_dir_get",_wrap_MY_CHARSET_INFO_dir_get,0,0,2,0},
{"MY_CHARSET_INFO_mbminlen_set",_wrap_MY_CHARSET_INFO_mbminlen_set,0,0,2,0},
{"MY_CHARSET_INFO_mbminlen_get",_wrap_MY_CHARSET_INFO_mbminlen_get,0,0,2,0},
{"MY_CHARSET_INFO_mbmaxlen_set",_wrap_MY_CHARSET_INFO_mbmaxlen_set,0,0,2,0},
{"MY_CHARSET_INFO_mbmaxlen_get",_wrap_MY_CHARSET_INFO_mbmaxlen_get,0,0,2,0},
{"new_MY_CHARSET_INFO",_wrap_new_MY_CHARSET_INFO,0,0,2,0},
{"delete_MY_CHARSET_INFO",_wrap_delete_MY_CHARSET_INFO,0,0,2,0},
{"MYSQL_net_set",_wrap_MYSQL_net_set,0,0,2,0},
{"MYSQL_net_get",_wrap_MYSQL_net_get,0,0,2,0},
{"MYSQL_connector_fd_set",_wrap_MYSQL_connector_fd_set,0,0,2,0},
{"MYSQL_connector_fd_get",_wrap_MYSQL_connector_fd_get,0,0,2,0},
{"MYSQL_host_set",_wrap_MYSQL_host_set,0,0,2,0},
{"MYSQL_host_get",_wrap_MYSQL_host_get,0,0,2,0},
{"MYSQL_user_set",_wrap_MYSQL_user_set,0,0,2,0},
{"MYSQL_user_get",_wrap_MYSQL_user_get,0,0,2,0},
{"MYSQL_passwd_set",_wrap_MYSQL_passwd_set,0,0,2,0},
{"MYSQL_passwd_get",_wrap_MYSQL_passwd_get,0,0,2,0},
{"MYSQL_unix_socket_set",_wrap_MYSQL_unix_socket_set,0,0,2,0},
{"MYSQL_unix_socket_get",_wrap_MYSQL_unix_socket_get,0,0,2,0},
{"MYSQL_server_version_set",_wrap_MYSQL_server_version_set,0,0,2,0},
{"MYSQL_server_version_get",_wrap_MYSQL_server_version_get,0,0,2,0},
{"MYSQL_host_info_set",_wrap_MYSQL_host_info_set,0,0,2,0},
{"MYSQL_host_info_get",_wrap_MYSQL_host_info_get,0,0,2,0},
{"MYSQL_info_set",_wrap_MYSQL_info_set,0,0,2,0},
{"MYSQL_info_get",_wrap_MYSQL_info_get,0,0,2,0},
{"MYSQL_db_set",_wrap_MYSQL_db_set,0,0,2,0},
{"MYSQL_db_get",_wrap_MYSQL_db_get,0,0,2,0},
{"MYSQL_charset_set",_wrap_MYSQL_charset_set,0,0,2,0},
{"MYSQL_charset_get",_wrap_MYSQL_charset_get,0,0,2,0},
{"MYSQL_fields_set",_wrap_MYSQL_fields_set,0,0,2,0},
{"MYSQL_fields_get",_wrap_MYSQL_fields_get,0,0,2,0},
{"MYSQL_field_alloc_set",_wrap_MYSQL_field_alloc_set,0,0,2,0},
{"MYSQL_field_alloc_get",_wrap_MYSQL_field_alloc_get,0,0,2,0},
{"MYSQL_affected_rows_set",_wrap_MYSQL_affected_rows_set,0,0,2,0},
{"MYSQL_affected_rows_get",_wrap_MYSQL_affected_rows_get,0,0,2,0},
{"MYSQL_insert_id_set",_wrap_MYSQL_insert_id_set,0,0,2,0},
{"MYSQL_insert_id_get",_wrap_MYSQL_insert_id_get,0,0,2,0},
{"MYSQL_extra_info_set",_wrap_MYSQL_extra_info_set,0,0,2,0},
{"MYSQL_extra_info_get",_wrap_MYSQL_extra_info_get,0,0,2,0},
{"MYSQL_thread_id_set",_wrap_MYSQL_thread_id_set,0,0,2,0},
{"MYSQL_thread_id_get",_wrap_MYSQL_thread_id_get,0,0,2,0},
{"MYSQL_packet_length_set",_wrap_MYSQL_packet_length_set,0,0,2,0},
{"MYSQL_packet_length_get",_wrap_MYSQL_packet_length_get,0,0,2,0},
{"MYSQL_port_set",_wrap_MYSQL_port_set,0,0,2,0},
{"MYSQL_port_get",_wrap_MYSQL_port_get,0,0,2,0},
{"MYSQL_client_flag_set",_wrap_MYSQL_client_flag_set,0,0,2,0},
{"MYSQL_client_flag_get",_wrap_MYSQL_client_flag_get,0,0,2,0},
{"MYSQL_server_capabilities_set",_wrap_MYSQL_server_capabilities_set,0,0,2,0},
{"MYSQL_server_capabilities_get",_wrap_MYSQL_server_capabilities_get,0,0,2,0},
{"MYSQL_protocol_version_set",_wrap_MYSQL_protocol_version_set,0,0,2,0},
{"MYSQL_protocol_version_get",_wrap_MYSQL_protocol_version_get,0,0,2,0},
{"MYSQL_field_count_set",_wrap_MYSQL_field_count_set,0,0,2,0},
{"MYSQL_field_count_get",_wrap_MYSQL_field_count_get,0,0,2,0},
{"MYSQL_server_status_set",_wrap_MYSQL_server_status_set,0,0,2,0},
{"MYSQL_server_status_get",_wrap_MYSQL_server_status_get,0,0,2,0},
{"MYSQL_server_language_set",_wrap_MYSQL_server_language_set,0,0,2,0},
{"MYSQL_server_language_get",_wrap_MYSQL_server_language_get,0,0,2,0},
{"MYSQL_warning_count_set",_wrap_MYSQL_warning_count_set,0,0,2,0},
{"MYSQL_warning_count_get",_wrap_MYSQL_warning_count_get,0,0,2,0},
{"MYSQL_options_set",_wrap_MYSQL_options_set,0,0,2,0},
{"MYSQL_options_get",_wrap_MYSQL_options_get,0,0,2,0},
{"MYSQL_status_set",_wrap_MYSQL_status_set,0,0,2,0},
{"MYSQL_status_get",_wrap_MYSQL_status_get,0,0,2,0},
{"MYSQL_free_me_set",_wrap_MYSQL_free_me_set,0,0,2,0},
{"MYSQL_free_me_get",_wrap_MYSQL_free_me_get,0,0,2,0},
{"MYSQL_reconnect_set",_wrap_MYSQL_reconnect_set,0,0,2,0},
{"MYSQL_reconnect_get",_wrap_MYSQL_reconnect_get,0,0,2,0},
{"MYSQL_scramble_set",_wrap_MYSQL_scramble_set,0,0,2,0},
{"MYSQL_scramble_get",_wrap_MYSQL_scramble_get,0,0,2,0},
{"MYSQL_rpl_pivot_set",_wrap_MYSQL_rpl_pivot_set,0,0,2,0},
{"MYSQL_rpl_pivot_get",_wrap_MYSQL_rpl_pivot_get,0,0,2,0},
{"MYSQL_master_set",_wrap_MYSQL_master_set,0,0,2,0},
{"MYSQL_master_get",_wrap_MYSQL_master_get,0,0,2,0},
{"MYSQL_next_slave_set",_wrap_MYSQL_next_slave_set,0,0,2,0},
{"MYSQL_next_slave_get",_wrap_MYSQL_next_slave_get,0,0,2,0},
{"MYSQL_last_used_slave_set",_wrap_MYSQL_last_used_slave_set,0,0,2,0},
{"MYSQL_last_used_slave_get",_wrap_MYSQL_last_used_slave_get,0,0,2,0},
{"MYSQL_last_used_con_set",_wrap_MYSQL_last_used_con_set,0,0,2,0},
{"MYSQL_last_used_con_get",_wrap_MYSQL_last_used_con_get,0,0,2,0},
{"MYSQL_stmts_set",_wrap_MYSQL_stmts_set,0,0,2,0},
{"MYSQL_stmts_get",_wrap_MYSQL_stmts_get,0,0,2,0},
{"MYSQL_methods_set",_wrap_MYSQL_methods_set,0,0,2,0},
{"MYSQL_methods_get",_wrap_MYSQL_methods_get,0,0,2,0},
{"MYSQL_thd_set",_wrap_MYSQL_thd_set,0,0,2,0},
{"MYSQL_thd_get",_wrap_MYSQL_thd_get,0,0,2,0},
{"MYSQL_unbuffered_fetch_owner_set",_wrap_MYSQL_unbuffered_fetch_owner_set,0,0,2,0},
{"MYSQL_unbuffered_fetch_owner_get",_wrap_MYSQL_unbuffered_fetch_owner_get,0,0,2,0},
{"new_MYSQL",_wrap_new_MYSQL,0,0,2,0},
{"delete_MYSQL",_wrap_delete_MYSQL,0,0,2,0},
{"MYSQL_RES_row_count_set",_wrap_MYSQL_RES_row_count_set,0,0,2,0},
{"MYSQL_RES_row_count_get",_wrap_MYSQL_RES_row_count_get,0,0,2,0},
{"MYSQL_RES_fields_set",_wrap_MYSQL_RES_fields_set,0,0,2,0},
{"MYSQL_RES_fields_get",_wrap_MYSQL_RES_fields_get,0,0,2,0},
{"MYSQL_RES_data_set",_wrap_MYSQL_RES_data_set,0,0,2,0},
{"MYSQL_RES_data_get",_wrap_MYSQL_RES_data_get,0,0,2,0},
{"MYSQL_RES_data_cursor_set",_wrap_MYSQL_RES_data_cursor_set,0,0,2,0},
{"MYSQL_RES_data_cursor_get",_wrap_MYSQL_RES_data_cursor_get,0,0,2,0},
{"MYSQL_RES_lengths_set",_wrap_MYSQL_RES_lengths_set,0,0,2,0},
{"MYSQL_RES_lengths_get",_wrap_MYSQL_RES_lengths_get,0,0,2,0},
{"MYSQL_RES_handle_set",_wrap_MYSQL_RES_handle_set,0,0,2,0},
{"MYSQL_RES_handle_get",_wrap_MYSQL_RES_handle_get,0,0,2,0},
{"MYSQL_RES_field_alloc_set",_wrap_MYSQL_RES_field_alloc_set,0,0,2,0},
{"MYSQL_RES_field_alloc_get",_wrap_MYSQL_RES_field_alloc_get,0,0,2,0},
{"MYSQL_RES_field_count_set",_wrap_MYSQL_RES_field_count_set,0,0,2,0},
{"MYSQL_RES_field_count_get",_wrap_MYSQL_RES_field_count_get,0,0,2,0},
{"MYSQL_RES_current_field_set",_wrap_MYSQL_RES_current_field_set,0,0,2,0},
{"MYSQL_RES_current_field_get",_wrap_MYSQL_RES_current_field_get,0,0,2,0},
{"MYSQL_RES_row_set",_wrap_MYSQL_RES_row_set,0,0,2,0},
{"MYSQL_RES_row_get",_wrap_MYSQL_RES_row_get,0,0,2,0},
{"MYSQL_RES_current_row_set",_wrap_MYSQL_RES_current_row_set,0,0,2,0},
{"MYSQL_RES_current_row_get",_wrap_MYSQL_RES_current_row_get,0,0,2,0},
{"MYSQL_RES_eof_set",_wrap_MYSQL_RES_eof_set,0,0,2,0},
{"MYSQL_RES_eof_get",_wrap_MYSQL_RES_eof_get,0,0,2,0},
{"MYSQL_RES_unbuffered_fetch_cancelled_set",_wrap_MYSQL_RES_unbuffered_fetch_cancelled_set,0,0,2,0},
{"MYSQL_RES_unbuffered_fetch_cancelled_get",_wrap_MYSQL_RES_unbuffered_fetch_cancelled_get,0,0,2,0},
{"MYSQL_RES_methods_set",_wrap_MYSQL_RES_methods_set,0,0,2,0},
{"MYSQL_RES_methods_get",_wrap_MYSQL_RES_methods_get,0,0,2,0},
{"new_MYSQL_RES",_wrap_new_MYSQL_RES,0,0,2,0},
{"delete_MYSQL_RES",_wrap_delete_MYSQL_RES,0,0,2,0},
{"MYSQL_MANAGER_net_set",_wrap_MYSQL_MANAGER_net_set,0,0,2,0},
{"MYSQL_MANAGER_net_get",_wrap_MYSQL_MANAGER_net_get,0,0,2,0},
{"MYSQL_MANAGER_host_set",_wrap_MYSQL_MANAGER_host_set,0,0,2,0},
{"MYSQL_MANAGER_host_get",_wrap_MYSQL_MANAGER_host_get,0,0,2,0},
{"MYSQL_MANAGER_user_set",_wrap_MYSQL_MANAGER_user_set,0,0,2,0},
{"MYSQL_MANAGER_user_get",_wrap_MYSQL_MANAGER_user_get,0,0,2,0},
{"MYSQL_MANAGER_passwd_set",_wrap_MYSQL_MANAGER_passwd_set,0,0,2,0},
{"MYSQL_MANAGER_passwd_get",_wrap_MYSQL_MANAGER_passwd_get,0,0,2,0},
{"MYSQL_MANAGER_port_set",_wrap_MYSQL_MANAGER_port_set,0,0,2,0},
{"MYSQL_MANAGER_port_get",_wrap_MYSQL_MANAGER_port_get,0,0,2,0},
{"MYSQL_MANAGER_free_me_set",_wrap_MYSQL_MANAGER_free_me_set,0,0,2,0},
{"MYSQL_MANAGER_free_me_get",_wrap_MYSQL_MANAGER_free_me_get,0,0,2,0},
{"MYSQL_MANAGER_eof_set",_wrap_MYSQL_MANAGER_eof_set,0,0,2,0},
{"MYSQL_MANAGER_eof_get",_wrap_MYSQL_MANAGER_eof_get,0,0,2,0},
{"MYSQL_MANAGER_cmd_status_set",_wrap_MYSQL_MANAGER_cmd_status_set,0,0,2,0},
{"MYSQL_MANAGER_cmd_status_get",_wrap_MYSQL_MANAGER_cmd_status_get,0,0,2,0},
{"MYSQL_MANAGER_last_errno_set",_wrap_MYSQL_MANAGER_last_errno_set,0,0,2,0},
{"MYSQL_MANAGER_last_errno_get",_wrap_MYSQL_MANAGER_last_errno_get,0,0,2,0},
{"MYSQL_MANAGER_net_buf_set",_wrap_MYSQL_MANAGER_net_buf_set,0,0,2,0},
{"MYSQL_MANAGER_net_buf_get",_wrap_MYSQL_MANAGER_net_buf_get,0,0,2,0},
{"MYSQL_MANAGER_net_buf_pos_set",_wrap_MYSQL_MANAGER_net_buf_pos_set,0,0,2,0},
{"MYSQL_MANAGER_net_buf_pos_get",_wrap_MYSQL_MANAGER_net_buf_pos_get,0,0,2,0},
{"MYSQL_MANAGER_net_data_end_set",_wrap_MYSQL_MANAGER_net_data_end_set,0,0,2,0},
{"MYSQL_MANAGER_net_data_end_get",_wrap_MYSQL_MANAGER_net_data_end_get,0,0,2,0},
{"MYSQL_MANAGER_net_buf_size_set",_wrap_MYSQL_MANAGER_net_buf_size_set,0,0,2,0},
{"MYSQL_MANAGER_net_buf_size_get",_wrap_MYSQL_MANAGER_net_buf_size_get,0,0,2,0},
{"MYSQL_MANAGER_last_error_set",_wrap_MYSQL_MANAGER_last_error_set,0,0,2,0},
{"MYSQL_MANAGER_last_error_get",_wrap_MYSQL_MANAGER_last_error_get,0,0,2,0},
{"new_MYSQL_MANAGER",_wrap_new_MYSQL_MANAGER,0,0,2,0},
{"delete_MYSQL_MANAGER",_wrap_delete_MYSQL_MANAGER,0,0,2,0},
{"MYSQL_PARAMETERS_p_max_allowed_packet_set",_wrap_MYSQL_PARAMETERS_p_max_allowed_packet_set,0,0,2,0},
{"MYSQL_PARAMETERS_p_max_allowed_packet_get",_wrap_MYSQL_PARAMETERS_p_max_allowed_packet_get,0,0,2,0},
{"MYSQL_PARAMETERS_p_net_buffer_length_set",_wrap_MYSQL_PARAMETERS_p_net_buffer_length_set,0,0,2,0},
{"MYSQL_PARAMETERS_p_net_buffer_length_get",_wrap_MYSQL_PARAMETERS_p_net_buffer_length_get,0,0,2,0},
{"new_MYSQL_PARAMETERS",_wrap_new_MYSQL_PARAMETERS,0,0,2,0},
{"delete_MYSQL_PARAMETERS",_wrap_delete_MYSQL_PARAMETERS,0,0,2,0},
{"mysql_server_init",_wrap_mysql_server_init,0,0,2,0},
{"mysql_server_end",_wrap_mysql_server_end,0,0,2,0},
{"mysql_get_parameters",_wrap_mysql_get_parameters,0,0,2,0},
{"mysql_thread_init",_wrap_mysql_thread_init,0,0,2,0},
{"mysql_thread_end",_wrap_mysql_thread_end,0,0,2,0},
{"mysql_num_rows",_wrap_mysql_num_rows,0,0,2,0},
{"mysql_num_fields",_wrap_mysql_num_fields,0,0,2,0},
{"mysql_eof",_wrap_mysql_eof,0,0,2,0},
{"mysql_fetch_field_direct",_wrap_mysql_fetch_field_direct,0,0,2,0},
{"mysql_fetch_fields",_wrap_mysql_fetch_fields,0,0,2,0},
{"mysql_row_tell",_wrap_mysql_row_tell,0,0,2,0},
{"mysql_field_tell",_wrap_mysql_field_tell,0,0,2,0},
{"mysql_field_count",_wrap_mysql_field_count,0,0,2,0},
{"mysql_affected_rows",_wrap_mysql_affected_rows,0,0,2,0},
{"mysql_insert_id",_wrap_mysql_insert_id,0,0,2,0},
{"mysql_errno",_wrap_mysql_errno,0,0,2,0},
{"mysql_error",_wrap_mysql_error,0,0,2,0},
{"mysql_sqlstate",_wrap_mysql_sqlstate,0,0,2,0},
{"mysql_warning_count",_wrap_mysql_warning_count,0,0,2,0},
{"mysql_info",_wrap_mysql_info,0,0,2,0},
{"mysql_thread_id",_wrap_mysql_thread_id,0,0,2,0},
{"mysql_character_set_name",_wrap_mysql_character_set_name,0,0,2,0},
{"mysql_set_character_set",_wrap_mysql_set_character_set,0,0,2,0},
{"mysql_init",_wrap_mysql_init,0,0,2,0},
{"mysql_ssl_set",_wrap_mysql_ssl_set,0,0,2,0},
{"mysql_get_ssl_cipher",_wrap_mysql_get_ssl_cipher,0,0,2,0},
{"mysql_change_user",_wrap_mysql_change_user,0,0,2,0},
{"mysql_real_connect",_wrap_mysql_real_connect,0,0,2,0},
{"mysql_select_db",_wrap_mysql_select_db,0,0,2,0},
{"mysql_query",_wrap_mysql_query,0,0,2,0},
{"mysql_send_query",_wrap_mysql_send_query,0,0,2,0},
{"mysql_real_query",_wrap_mysql_real_query,0,0,2,0},
{"mysql_store_result",_wrap_mysql_store_result,0,0,2,0},
{"mysql_use_result",_wrap_mysql_use_result,0,0,2,0},
{"mysql_master_query",_wrap_mysql_master_query,0,0,2,0},
{"mysql_master_send_query",_wrap_mysql_master_send_query,0,0,2,0},
{"mysql_slave_query",_wrap_mysql_slave_query,0,0,2,0},
{"mysql_slave_send_query",_wrap_mysql_slave_send_query,0,0,2,0},
{"mysql_get_character_set_info",_wrap_mysql_get_character_set_info,0,0,2,0},
{"mysql_set_local_infile_handler",_wrap_mysql_set_local_infile_handler,0,0,2,0},
{"mysql_set_local_infile_default",_wrap_mysql_set_local_infile_default,0,0,2,0},
{"mysql_enable_rpl_parse",_wrap_mysql_enable_rpl_parse,0,0,2,0},
{"mysql_disable_rpl_parse",_wrap_mysql_disable_rpl_parse,0,0,2,0},
{"mysql_rpl_parse_enabled",_wrap_mysql_rpl_parse_enabled,0,0,2,0},
{"mysql_enable_reads_from_master",_wrap_mysql_enable_reads_from_master,0,0,2,0},
{"mysql_disable_reads_from_master",_wrap_mysql_disable_reads_from_master,0,0,2,0},
{"mysql_reads_from_master_enabled",_wrap_mysql_reads_from_master_enabled,0,0,2,0},
{"mysql_rpl_query_type",_wrap_mysql_rpl_query_type,0,0,2,0},
{"mysql_rpl_probe",_wrap_mysql_rpl_probe,0,0,2,0},
{"mysql_set_master",_wrap_mysql_set_master,0,0,2,0},
{"mysql_add_slave",_wrap_mysql_add_slave,0,0,2,0},
{"mysql_shutdown",_wrap_mysql_shutdown,0,0,2,0},
{"mysql_dump_debug_info",_wrap_mysql_dump_debug_info,0,0,2,0},
{"mysql_refresh",_wrap_mysql_refresh,0,0,2,0},
{"mysql_kill",_wrap_mysql_kill,0,0,2,0},
{"mysql_set_server_option",_wrap_mysql_set_server_option,0,0,2,0},
{"mysql_ping",_wrap_mysql_ping,0,0,2,0},
{"mysql_stat",_wrap_mysql_stat,0,0,2,0},
{"mysql_get_server_info",_wrap_mysql_get_server_info,0,0,2,0},
{"mysql_get_client_info",_wrap_mysql_get_client_info,0,0,2,0},
{"mysql_get_client_version",_wrap_mysql_get_client_version,0,0,2,0},
{"mysql_get_host_info",_wrap_mysql_get_host_info,0,0,2,0},
{"mysql_get_server_version",_wrap_mysql_get_server_version,0,0,2,0},
{"mysql_get_proto_info",_wrap_mysql_get_proto_info,0,0,2,0},
{"mysql_list_dbs",_wrap_mysql_list_dbs,0,0,2,0},
{"mysql_list_tables",_wrap_mysql_list_tables,0,0,2,0},
{"mysql_list_processes",_wrap_mysql_list_processes,0,0,2,0},
{"mysql_options",_wrap_mysql_options,0,0,2,0},
{"mysql_free_result",_wrap_mysql_free_result,0,0,2,0},
{"mysql_data_seek",_wrap_mysql_data_seek,0,0,2,0},
{"mysql_row_seek",_wrap_mysql_row_seek,0,0,2,0},
{"mysql_field_seek",_wrap_mysql_field_seek,0,0,2,0},
{"mysql_fetch_row",_wrap_mysql_fetch_row,0,0,2,0},
{"mysql_fetch_lengths",_wrap_mysql_fetch_lengths,0,0,2,0},
{"mysql_fetch_field",_wrap_mysql_fetch_field,0,0,2,0},
{"mysql_list_fields",_wrap_mysql_list_fields,0,0,2,0},
{"mysql_escape_string",_wrap_mysql_escape_string,0,0,2,0},
{"mysql_hex_string",_wrap_mysql_hex_string,0,0,2,0},
{"mysql_real_escape_string",_wrap_mysql_real_escape_string,0,0,2,0},
{"mysql_debug",_wrap_mysql_debug,0,0,2,0},
{"mysql_odbc_escape_string",_wrap_mysql_odbc_escape_string,0,0,2,0},
{"myodbc_remove_escape",_wrap_myodbc_remove_escape,0,0,2,0},
{"mysql_thread_safe",_wrap_mysql_thread_safe,0,0,2,0},
{"mysql_embedded",_wrap_mysql_embedded,0,0,2,0},
{"mysql_manager_init",_wrap_mysql_manager_init,0,0,2,0},
{"mysql_manager_connect",_wrap_mysql_manager_connect,0,0,2,0},
{"mysql_manager_close",_wrap_mysql_manager_close,0,0,2,0},
{"mysql_manager_command",_wrap_mysql_manager_command,0,0,2,0},
{"mysql_manager_fetch_line",_wrap_mysql_manager_fetch_line,0,0,2,0},
{"mysql_read_query_result",_wrap_mysql_read_query_result,0,0,2,0},
{"MYSQL_BIND_length_set",_wrap_MYSQL_BIND_length_set,0,0,2,0},
{"MYSQL_BIND_length_get",_wrap_MYSQL_BIND_length_get,0,0,2,0},
{"MYSQL_BIND_is_null_set",_wrap_MYSQL_BIND_is_null_set,0,0,2,0},
{"MYSQL_BIND_is_null_get",_wrap_MYSQL_BIND_is_null_get,0,0,2,0},
{"MYSQL_BIND_buffer_set",_wrap_MYSQL_BIND_buffer_set,0,0,2,0},
{"MYSQL_BIND_buffer_get",_wrap_MYSQL_BIND_buffer_get,0,0,2,0},
{"MYSQL_BIND_error_set",_wrap_MYSQL_BIND_error_set,0,0,2,0},
{"MYSQL_BIND_error_get",_wrap_MYSQL_BIND_error_get,0,0,2,0},
{"MYSQL_BIND_buffer_type_set",_wrap_MYSQL_BIND_buffer_type_set,0,0,2,0},
{"MYSQL_BIND_buffer_type_get",_wrap_MYSQL_BIND_buffer_type_get,0,0,2,0},
{"MYSQL_BIND_buffer_length_set",_wrap_MYSQL_BIND_buffer_length_set,0,0,2,0},
{"MYSQL_BIND_buffer_length_get",_wrap_MYSQL_BIND_buffer_length_get,0,0,2,0},
{"MYSQL_BIND_row_ptr_set",_wrap_MYSQL_BIND_row_ptr_set,0,0,2,0},
{"MYSQL_BIND_row_ptr_get",_wrap_MYSQL_BIND_row_ptr_get,0,0,2,0},
{"MYSQL_BIND_offset_set",_wrap_MYSQL_BIND_offset_set,0,0,2,0},
{"MYSQL_BIND_offset_get",_wrap_MYSQL_BIND_offset_get,0,0,2,0},
{"MYSQL_BIND_length_value_set",_wrap_MYSQL_BIND_length_value_set,0,0,2,0},
{"MYSQL_BIND_length_value_get",_wrap_MYSQL_BIND_length_value_get,0,0,2,0},
{"MYSQL_BIND_param_number_set",_wrap_MYSQL_BIND_param_number_set,0,0,2,0},
{"MYSQL_BIND_param_number_get",_wrap_MYSQL_BIND_param_number_get,0,0,2,0},
{"MYSQL_BIND_pack_length_set",_wrap_MYSQL_BIND_pack_length_set,0,0,2,0},
{"MYSQL_BIND_pack_length_get",_wrap_MYSQL_BIND_pack_length_get,0,0,2,0},
{"MYSQL_BIND_error_value_set",_wrap_MYSQL_BIND_error_value_set,0,0,2,0},
{"MYSQL_BIND_error_value_get",_wrap_MYSQL_BIND_error_value_get,0,0,2,0},
{"MYSQL_BIND_is_unsigned_set",_wrap_MYSQL_BIND_is_unsigned_set,0,0,2,0},
{"MYSQL_BIND_is_unsigned_get",_wrap_MYSQL_BIND_is_unsigned_get,0,0,2,0},
{"MYSQL_BIND_long_data_used_set",_wrap_MYSQL_BIND_long_data_used_set,0,0,2,0},
{"MYSQL_BIND_long_data_used_get",_wrap_MYSQL_BIND_long_data_used_get,0,0,2,0},
{"MYSQL_BIND_is_null_value_set",_wrap_MYSQL_BIND_is_null_value_set,0,0,2,0},
{"MYSQL_BIND_is_null_value_get",_wrap_MYSQL_BIND_is_null_value_get,0,0,2,0},
{"MYSQL_BIND_store_param_func_set",_wrap_MYSQL_BIND_store_param_func_set,0,0,2,0},
{"MYSQL_BIND_store_param_func_get",_wrap_MYSQL_BIND_store_param_func_get,0,0,2,0},
{"MYSQL_BIND_fetch_result_set",_wrap_MYSQL_BIND_fetch_result_set,0,0,2,0},
{"MYSQL_BIND_fetch_result_get",_wrap_MYSQL_BIND_fetch_result_get,0,0,2,0},
{"MYSQL_BIND_skip_result_set",_wrap_MYSQL_BIND_skip_result_set,0,0,2,0},
{"MYSQL_BIND_skip_result_get",_wrap_MYSQL_BIND_skip_result_get,0,0,2,0},
{"new_MYSQL_BIND",_wrap_new_MYSQL_BIND,0,0,2,0},
{"delete_MYSQL_BIND",_wrap_delete_MYSQL_BIND,0,0,2,0},
{"MYSQL_STMT_mem_root_set",_wrap_MYSQL_STMT_mem_root_set,0,0,2,0},
{"MYSQL_STMT_mem_root_get",_wrap_MYSQL_STMT_mem_root_get,0,0,2,0},
{"MYSQL_STMT_list_set",_wrap_MYSQL_STMT_list_set,0,0,2,0},
{"MYSQL_STMT_list_get",_wrap_MYSQL_STMT_list_get,0,0,2,0},
{"MYSQL_STMT_mysql_set",_wrap_MYSQL_STMT_mysql_set,0,0,2,0},
{"MYSQL_STMT_mysql_get",_wrap_MYSQL_STMT_mysql_get,0,0,2,0},
{"MYSQL_STMT_params_set",_wrap_MYSQL_STMT_params_set,0,0,2,0},
{"MYSQL_STMT_params_get",_wrap_MYSQL_STMT_params_get,0,0,2,0},
{"MYSQL_STMT_bind_set",_wrap_MYSQL_STMT_bind_set,0,0,2,0},
{"MYSQL_STMT_bind_get",_wrap_MYSQL_STMT_bind_get,0,0,2,0},
{"MYSQL_STMT_fields_set",_wrap_MYSQL_STMT_fields_set,0,0,2,0},
{"MYSQL_STMT_fields_get",_wrap_MYSQL_STMT_fields_get,0,0,2,0},
{"MYSQL_STMT_result_set",_wrap_MYSQL_STMT_result_set,0,0,2,0},
{"MYSQL_STMT_result_get",_wrap_MYSQL_STMT_result_get,0,0,2,0},
{"MYSQL_STMT_data_cursor_set",_wrap_MYSQL_STMT_data_cursor_set,0,0,2,0},
{"MYSQL_STMT_data_cursor_get",_wrap_MYSQL_STMT_data_cursor_get,0,0,2,0},
{"MYSQL_STMT_affected_rows_set",_wrap_MYSQL_STMT_affected_rows_set,0,0,2,0},
{"MYSQL_STMT_affected_rows_get",_wrap_MYSQL_STMT_affected_rows_get,0,0,2,0},
{"MYSQL_STMT_insert_id_set",_wrap_MYSQL_STMT_insert_id_set,0,0,2,0},
{"MYSQL_STMT_insert_id_get",_wrap_MYSQL_STMT_insert_id_get,0,0,2,0},
{"MYSQL_STMT_read_row_func_set",_wrap_MYSQL_STMT_read_row_func_set,0,0,2,0},
{"MYSQL_STMT_read_row_func_get",_wrap_MYSQL_STMT_read_row_func_get,0,0,2,0},
{"MYSQL_STMT_stmt_id_set",_wrap_MYSQL_STMT_stmt_id_set,0,0,2,0},
{"MYSQL_STMT_stmt_id_get",_wrap_MYSQL_STMT_stmt_id_get,0,0,2,0},
{"MYSQL_STMT_flags_set",_wrap_MYSQL_STMT_flags_set,0,0,2,0},
{"MYSQL_STMT_flags_get",_wrap_MYSQL_STMT_flags_get,0,0,2,0},
{"MYSQL_STMT_prefetch_rows_set",_wrap_MYSQL_STMT_prefetch_rows_set,0,0,2,0},
{"MYSQL_STMT_prefetch_rows_get",_wrap_MYSQL_STMT_prefetch_rows_get,0,0,2,0},
{"MYSQL_STMT_server_status_set",_wrap_MYSQL_STMT_server_status_set,0,0,2,0},
{"MYSQL_STMT_server_status_get",_wrap_MYSQL_STMT_server_status_get,0,0,2,0},
{"MYSQL_STMT_last_errno_set",_wrap_MYSQL_STMT_last_errno_set,0,0,2,0},
{"MYSQL_STMT_last_errno_get",_wrap_MYSQL_STMT_last_errno_get,0,0,2,0},
{"MYSQL_STMT_param_count_set",_wrap_MYSQL_STMT_param_count_set,0,0,2,0},
{"MYSQL_STMT_param_count_get",_wrap_MYSQL_STMT_param_count_get,0,0,2,0},
{"MYSQL_STMT_field_count_set",_wrap_MYSQL_STMT_field_count_set,0,0,2,0},
{"MYSQL_STMT_field_count_get",_wrap_MYSQL_STMT_field_count_get,0,0,2,0},
{"MYSQL_STMT_state_set",_wrap_MYSQL_STMT_state_set,0,0,2,0},
{"MYSQL_STMT_state_get",_wrap_MYSQL_STMT_state_get,0,0,2,0},
{"MYSQL_STMT_last_error_set",_wrap_MYSQL_STMT_last_error_set,0,0,2,0},
{"MYSQL_STMT_last_error_get",_wrap_MYSQL_STMT_last_error_get,0,0,2,0},
{"MYSQL_STMT_sqlstate_set",_wrap_MYSQL_STMT_sqlstate_set,0,0,2,0},
{"MYSQL_STMT_sqlstate_get",_wrap_MYSQL_STMT_sqlstate_get,0,0,2,0},
{"MYSQL_STMT_send_types_to_server_set",_wrap_MYSQL_STMT_send_types_to_server_set,0,0,2,0},
{"MYSQL_STMT_send_types_to_server_get",_wrap_MYSQL_STMT_send_types_to_server_get,0,0,2,0},
{"MYSQL_STMT_bind_param_done_set",_wrap_MYSQL_STMT_bind_param_done_set,0,0,2,0},
{"MYSQL_STMT_bind_param_done_get",_wrap_MYSQL_STMT_bind_param_done_get,0,0,2,0},
{"MYSQL_STMT_bind_result_done_set",_wrap_MYSQL_STMT_bind_result_done_set,0,0,2,0},
{"MYSQL_STMT_bind_result_done_get",_wrap_MYSQL_STMT_bind_result_done_get,0,0,2,0},
{"MYSQL_STMT_unbuffered_fetch_cancelled_set",_wrap_MYSQL_STMT_unbuffered_fetch_cancelled_set,0,0,2,0},
{"MYSQL_STMT_unbuffered_fetch_cancelled_get",_wrap_MYSQL_STMT_unbuffered_fetch_cancelled_get,0,0,2,0},
{"MYSQL_STMT_update_max_length_set",_wrap_MYSQL_STMT_update_max_length_set,0,0,2,0},
{"MYSQL_STMT_update_max_length_get",_wrap_MYSQL_STMT_update_max_length_get,0,0,2,0},
{"new_MYSQL_STMT",_wrap_new_MYSQL_STMT,0,0,2,0},
{"delete_MYSQL_STMT",_wrap_delete_MYSQL_STMT,0,0,2,0},
{"MYSQL_METHODS_read_query_result_set",_wrap_MYSQL_METHODS_read_query_result_set,0,0,2,0},
{"MYSQL_METHODS_read_query_result_get",_wrap_MYSQL_METHODS_read_query_result_get,0,0,2,0},
{"MYSQL_METHODS_advanced_command_set",_wrap_MYSQL_METHODS_advanced_command_set,0,0,2,0},
{"MYSQL_METHODS_advanced_command_get",_wrap_MYSQL_METHODS_advanced_command_get,0,0,2,0},
{"MYSQL_METHODS_read_rows_set",_wrap_MYSQL_METHODS_read_rows_set,0,0,2,0},
{"MYSQL_METHODS_read_rows_get",_wrap_MYSQL_METHODS_read_rows_get,0,0,2,0},
{"MYSQL_METHODS_use_result_set",_wrap_MYSQL_METHODS_use_result_set,0,0,2,0},
{"MYSQL_METHODS_use_result_get",_wrap_MYSQL_METHODS_use_result_get,0,0,2,0},
{"MYSQL_METHODS_fetch_lengths_set",_wrap_MYSQL_METHODS_fetch_lengths_set,0,0,2,0},
{"MYSQL_METHODS_fetch_lengths_get",_wrap_MYSQL_METHODS_fetch_lengths_get,0,0,2,0},
{"MYSQL_METHODS_flush_use_result_set",_wrap_MYSQL_METHODS_flush_use_result_set,0,0,2,0},
{"MYSQL_METHODS_flush_use_result_get",_wrap_MYSQL_METHODS_flush_use_result_get,0,0,2,0},
{"MYSQL_METHODS_list_fields_set",_wrap_MYSQL_METHODS_list_fields_set,0,0,2,0},
{"MYSQL_METHODS_list_fields_get",_wrap_MYSQL_METHODS_list_fields_get,0,0,2,0},
{"MYSQL_METHODS_read_prepare_result_set",_wrap_MYSQL_METHODS_read_prepare_result_set,0,0,2,0},
{"MYSQL_METHODS_read_prepare_result_get",_wrap_MYSQL_METHODS_read_prepare_result_get,0,0,2,0},
{"MYSQL_METHODS_stmt_execute_set",_wrap_MYSQL_METHODS_stmt_execute_set,0,0,2,0},
{"MYSQL_METHODS_stmt_execute_get",_wrap_MYSQL_METHODS_stmt_execute_get,0,0,2,0},
{"MYSQL_METHODS_read_binary_rows_set",_wrap_MYSQL_METHODS_read_binary_rows_set,0,0,2,0},
{"MYSQL_METHODS_read_binary_rows_get",_wrap_MYSQL_METHODS_read_binary_rows_get,0,0,2,0},
{"MYSQL_METHODS_unbuffered_fetch_set",_wrap_MYSQL_METHODS_unbuffered_fetch_set,0,0,2,0},
{"MYSQL_METHODS_unbuffered_fetch_get",_wrap_MYSQL_METHODS_unbuffered_fetch_get,0,0,2,0},
{"MYSQL_METHODS_free_embedded_thd_set",_wrap_MYSQL_METHODS_free_embedded_thd_set,0,0,2,0},
{"MYSQL_METHODS_free_embedded_thd_get",_wrap_MYSQL_METHODS_free_embedded_thd_get,0,0,2,0},
{"MYSQL_METHODS_read_statistics_set",_wrap_MYSQL_METHODS_read_statistics_set,0,0,2,0},
{"MYSQL_METHODS_read_statistics_get",_wrap_MYSQL_METHODS_read_statistics_get,0,0,2,0},
{"MYSQL_METHODS_next_result_set",_wrap_MYSQL_METHODS_next_result_set,0,0,2,0},
{"MYSQL_METHODS_next_result_get",_wrap_MYSQL_METHODS_next_result_get,0,0,2,0},
{"MYSQL_METHODS_read_change_user_result_set",_wrap_MYSQL_METHODS_read_change_user_result_set,0,0,2,0},
{"MYSQL_METHODS_read_change_user_result_get",_wrap_MYSQL_METHODS_read_change_user_result_get,0,0,2,0},
{"MYSQL_METHODS_read_rows_from_cursor_set",_wrap_MYSQL_METHODS_read_rows_from_cursor_set,0,0,2,0},
{"MYSQL_METHODS_read_rows_from_cursor_get",_wrap_MYSQL_METHODS_read_rows_from_cursor_get,0,0,2,0},
{"new_MYSQL_METHODS",_wrap_new_MYSQL_METHODS,0,0,2,0},
{"delete_MYSQL_METHODS",_wrap_delete_MYSQL_METHODS,0,0,2,0},
{"mysql_stmt_init",_wrap_mysql_stmt_init,0,0,2,0},
{"mysql_stmt_prepare",_wrap_mysql_stmt_prepare,0,0,2,0},
{"mysql_stmt_execute",_wrap_mysql_stmt_execute,0,0,2,0},
{"mysql_stmt_fetch",_wrap_mysql_stmt_fetch,0,0,2,0},
{"mysql_stmt_fetch_column",_wrap_mysql_stmt_fetch_column,0,0,2,0},
{"mysql_stmt_store_result",_wrap_mysql_stmt_store_result,0,0,2,0},
{"mysql_stmt_param_count",_wrap_mysql_stmt_param_count,0,0,2,0},
{"mysql_stmt_attr_set",_wrap_mysql_stmt_attr_set,0,0,2,0},
{"mysql_stmt_attr_get",_wrap_mysql_stmt_attr_get,0,0,2,0},
{"mysql_stmt_bind_param",_wrap_mysql_stmt_bind_param,0,0,2,0},
{"mysql_stmt_bind_result",_wrap_mysql_stmt_bind_result,0,0,2,0},
{"mysql_stmt_close",_wrap_mysql_stmt_close,0,0,2,0},
{"mysql_stmt_reset",_wrap_mysql_stmt_reset,0,0,2,0},
{"mysql_stmt_free_result",_wrap_mysql_stmt_free_result,0,0,2,0},
{"mysql_stmt_send_long_data",_wrap_mysql_stmt_send_long_data,0,0,2,0},
{"mysql_stmt_result_metadata",_wrap_mysql_stmt_result_metadata,0,0,2,0},
{"mysql_stmt_param_metadata",_wrap_mysql_stmt_param_metadata,0,0,2,0},
{"mysql_stmt_errno",_wrap_mysql_stmt_errno,0,0,2,0},
{"mysql_stmt_error",_wrap_mysql_stmt_error,0,0,2,0},
{"mysql_stmt_sqlstate",_wrap_mysql_stmt_sqlstate,0,0,2,0},
{"mysql_stmt_row_seek",_wrap_mysql_stmt_row_seek,0,0,2,0},
{"mysql_stmt_row_tell",_wrap_mysql_stmt_row_tell,0,0,2,0},
{"mysql_stmt_data_seek",_wrap_mysql_stmt_data_seek,0,0,2,0},
{"mysql_stmt_num_rows",_wrap_mysql_stmt_num_rows,0,0,2,0},
{"mysql_stmt_affected_rows",_wrap_mysql_stmt_affected_rows,0,0,2,0},
{"mysql_stmt_insert_id",_wrap_mysql_stmt_insert_id,0,0,2,0},
{"mysql_stmt_field_count",_wrap_mysql_stmt_field_count,0,0,2,0},
{"mysql_commit",_wrap_mysql_commit,0,0,2,0},
{"mysql_rollback",_wrap_mysql_rollback,0,0,2,0},
{"mysql_autocommit",_wrap_mysql_autocommit,0,0,2,0},
{"mysql_more_results",_wrap_mysql_more_results,0,0,2,0},
{"mysql_next_result",_wrap_mysql_next_result,0,0,2,0},
{"mysql_close",_wrap_mysql_close,0,0,2,0},
{"delete_generic_db",_wrap_delete_generic_db,0,0,2,0},
{"generic_db_sql",_wrap_generic_db_sql,0,0,2,0},
{"mysql_db_db_set",_wrap_mysql_db_db_set,0,0,2,0},
{"mysql_db_db_get",_wrap_mysql_db_db_get,0,0,2,0},
{"new_mysql_db",_wrap_new_mysql_db,0,0,2,0},
{"delete_mysql_db",_wrap_delete_mysql_db,0,0,2,0},
{"mysql_db_sql",_wrap_mysql_db_sql,0,0,2,0},
{0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_mysql_dbTo_p_generic_db(void *x, int *newmemory) {
    return (void *)((generic_db *)  ((mysql_db *) x));
}
static swig_type_info _swigt__p_LIST = {"_p_LIST", "LIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MEM_ROOT = {"_p_MEM_ROOT", "MEM_ROOT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MYSQL_FIELD_OFFSET = {"_p_MYSQL_FIELD_OFFSET", "MYSQL_FIELD_OFFSET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MYSQL_ROW = {"_p_MYSQL_ROW", "MYSQL_ROW *", 0, 0, (void*)&_wrap_class_MYSQL_ROW, 0};
static swig_type_info _swigt__p_MYSQL_ROW_OFFSET = {"_p_MYSQL_ROW_OFFSET", "MYSQL_ROW_OFFSET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NET = {"_p_NET", "NET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_character_set = {"_p_character_set", "MY_CHARSET_INFO *|character_set *", 0, 0, (void*)&_wrap_class_MY_CHARSET_INFO, 0};
static swig_type_info _swigt__p_charset_info_st = {"_p_charset_info_st", "charset_info_st *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_embedded_query_result = {"_p_embedded_query_result", "embedded_query_result *|EMBEDDED_QUERY_RESULT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_MYSQL__p_st_mysql_field = {"_p_f_p_MYSQL__p_st_mysql_field", "st_mysql_field *(*)(MYSQL *)|MYSQL_FIELD *(*)(MYSQL *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_MYSQL__p_st_mysql_res = {"_p_f_p_MYSQL__p_st_mysql_res", "st_mysql_res *(*)(MYSQL *)|MYSQL_RES *(*)(MYSQL *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_MYSQL_p_MYSQL_FIELD_unsigned_int__p_st_mysql_data = {"_p_f_p_MYSQL_p_MYSQL_FIELD_unsigned_int__p_st_mysql_data", "st_mysql_data *(*)(MYSQL *,MYSQL_FIELD *,unsigned int)|MYSQL_DATA *(*)(MYSQL *,MYSQL_FIELD *,unsigned int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_NET_p_st_mysql_bind__void = {"_p_f_p_NET_p_st_mysql_bind__void", "void (*)(NET *,st_mysql_bind *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_p_void_p_q_const__char_p_void__int = {"_p_f_p_p_void_p_q_const__char_p_void__int", "int (*)(void **,char const *,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_st_mysql__my_bool = {"_p_f_p_st_mysql__my_bool", "my_bool (*)(st_mysql *)|my_bool (*)(MYSQL *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_st_mysql__p_char = {"_p_f_p_st_mysql__p_char", "char *(*)(st_mysql *)|char *(*)(MYSQL *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_st_mysql__void = {"_p_f_p_st_mysql__void", "void (*)(st_mysql *)|void (*)(MYSQL *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_st_mysql_bind_p_st_mysql_field_p_p_unsigned_char__void = {"_p_f_p_st_mysql_bind_p_st_mysql_field_p_p_unsigned_char__void", "void (*)(st_mysql_bind *,MYSQL_FIELD *,unsigned char **)|void (*)(st_mysql_bind *,st_mysql_field *,unsigned char **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_st_mysql_enum_enum_server_command_p_q_const__char_unsigned_long_p_q_const__char_unsigned_long_my_bool_p_st_mysql_stmt__my_bool = {"_p_f_p_st_mysql_enum_enum_server_command_p_q_const__char_unsigned_long_p_q_const__char_unsigned_long_my_bool_p_st_mysql_stmt__my_bool", "my_bool (*)(st_mysql *,enum enum_server_command,char const *,unsigned long,char const *,unsigned long,my_bool,st_mysql_stmt *)|my_bool (*)(MYSQL *,enum enum_server_command,char const *,unsigned long,char const *,unsigned long,my_bool,MYSQL_STMT *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_st_mysql_p_char_p_q_const__char__int = {"_p_f_p_st_mysql_p_char_p_q_const__char__int", "int (*)(st_mysql *,char *,char const *)|int (*)(MYSQL *,char *,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_st_mysql_p_p_char__int = {"_p_f_p_st_mysql_p_p_char__int", "int (*)(st_mysql *,char **)|int (*)(MYSQL *,char **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_st_mysql_p_st_mysql_stmt__my_bool = {"_p_f_p_st_mysql_p_st_mysql_stmt__my_bool", "my_bool (*)(st_mysql *,st_mysql_stmt *)|my_bool (*)(MYSQL *,MYSQL_STMT *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_st_mysql_stmt__int = {"_p_f_p_st_mysql_stmt__int", "int (*)(st_mysql_stmt *)|int (*)(MYSQL_STMT *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_st_mysql_stmt_p_p_unsigned_char__int = {"_p_f_p_st_mysql_stmt_p_p_unsigned_char__int", "int (*)(st_mysql_stmt *,unsigned char **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_unsigned_long_MYSQL_ROW_unsigned_int__void = {"_p_f_p_unsigned_long_MYSQL_ROW_unsigned_int__void", "void (*)(unsigned long *,MYSQL_ROW,unsigned int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_char_p_unsigned_long__p_char = {"_p_f_p_void_p_char_p_unsigned_long__p_char", "char *(*)(void *,char *,unsigned long *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_char_unsigned_int__int = {"_p_f_p_void_p_char_unsigned_int__int", "int (*)(void *,char *,unsigned int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_generic_db = {"_p_generic_db", "generic_db *", 0, 0, (void*)&_wrap_class_generic_db, 0};
static swig_type_info _swigt__p_gptr = {"_p_gptr", "gptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_my_bool = {"_p_my_bool", "my_bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mysql_db = {"_p_mysql_db", "mysql_db *", 0, 0, (void*)&_wrap_class_mysql_db, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_st_dynamic_array = {"_p_st_dynamic_array", "st_dynamic_array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_st_mysql = {"_p_st_mysql", "st_mysql *|MYSQL *", 0, 0, (void*)&_wrap_class_MYSQL, 0};
static swig_type_info _swigt__p_st_mysql_bind = {"_p_st_mysql_bind", "st_mysql_bind *|MYSQL_BIND *", 0, 0, (void*)&_wrap_class_MYSQL_BIND, 0};
static swig_type_info _swigt__p_st_mysql_data = {"_p_st_mysql_data", "st_mysql_data *|MYSQL_DATA *", 0, 0, (void*)&_wrap_class_MYSQL_DATA, 0};
static swig_type_info _swigt__p_st_mysql_field = {"_p_st_mysql_field", "MYSQL_FIELD *|st_mysql_field *", 0, 0, (void*)&_wrap_class_MYSQL_FIELD, 0};
static swig_type_info _swigt__p_st_mysql_manager = {"_p_st_mysql_manager", "MYSQL_MANAGER *|st_mysql_manager *", 0, 0, (void*)&_wrap_class_MYSQL_MANAGER, 0};
static swig_type_info _swigt__p_st_mysql_methods = {"_p_st_mysql_methods", "MYSQL_METHODS *|st_mysql_methods *", 0, 0, (void*)&_wrap_class_MYSQL_METHODS, 0};
static swig_type_info _swigt__p_st_mysql_options = {"_p_st_mysql_options", "st_mysql_options *", 0, 0, (void*)&_wrap_class_st_mysql_options, 0};
static swig_type_info _swigt__p_st_mysql_parameters = {"_p_st_mysql_parameters", "MYSQL_PARAMETERS *|st_mysql_parameters *", 0, 0, (void*)&_wrap_class_MYSQL_PARAMETERS, 0};
static swig_type_info _swigt__p_st_mysql_res = {"_p_st_mysql_res", "st_mysql_res *|MYSQL_RES *", 0, 0, (void*)&_wrap_class_MYSQL_RES, 0};
static swig_type_info _swigt__p_st_mysql_rows = {"_p_st_mysql_rows", "st_mysql_rows *|MYSQL_ROWS *", 0, 0, (void*)&_wrap_class_MYSQL_ROWS, 0};
static swig_type_info _swigt__p_st_mysql_stmt = {"_p_st_mysql_stmt", "st_mysql_stmt *|MYSQL_STMT *", 0, 0, (void*)&_wrap_class_MYSQL_STMT, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "my_ulonglong *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_LIST,
  &_swigt__p_MEM_ROOT,
  &_swigt__p_MYSQL_FIELD_OFFSET,
  &_swigt__p_MYSQL_ROW,
  &_swigt__p_MYSQL_ROW_OFFSET,
  &_swigt__p_NET,
  &_swigt__p_char,
  &_swigt__p_character_set,
  &_swigt__p_charset_info_st,
  &_swigt__p_embedded_query_result,
  &_swigt__p_f_p_MYSQL__p_st_mysql_field,
  &_swigt__p_f_p_MYSQL__p_st_mysql_res,
  &_swigt__p_f_p_MYSQL_p_MYSQL_FIELD_unsigned_int__p_st_mysql_data,
  &_swigt__p_f_p_NET_p_st_mysql_bind__void,
  &_swigt__p_f_p_p_void_p_q_const__char_p_void__int,
  &_swigt__p_f_p_st_mysql__my_bool,
  &_swigt__p_f_p_st_mysql__p_char,
  &_swigt__p_f_p_st_mysql__void,
  &_swigt__p_f_p_st_mysql_bind_p_st_mysql_field_p_p_unsigned_char__void,
  &_swigt__p_f_p_st_mysql_enum_enum_server_command_p_q_const__char_unsigned_long_p_q_const__char_unsigned_long_my_bool_p_st_mysql_stmt__my_bool,
  &_swigt__p_f_p_st_mysql_p_char_p_q_const__char__int,
  &_swigt__p_f_p_st_mysql_p_p_char__int,
  &_swigt__p_f_p_st_mysql_p_st_mysql_stmt__my_bool,
  &_swigt__p_f_p_st_mysql_stmt__int,
  &_swigt__p_f_p_st_mysql_stmt_p_p_unsigned_char__int,
  &_swigt__p_f_p_unsigned_long_MYSQL_ROW_unsigned_int__void,
  &_swigt__p_f_p_void__void,
  &_swigt__p_f_p_void_p_char_p_unsigned_long__p_char,
  &_swigt__p_f_p_void_p_char_unsigned_int__int,
  &_swigt__p_generic_db,
  &_swigt__p_gptr,
  &_swigt__p_my_bool,
  &_swigt__p_mysql_db,
  &_swigt__p_p_char,
  &_swigt__p_st_dynamic_array,
  &_swigt__p_st_mysql,
  &_swigt__p_st_mysql_bind,
  &_swigt__p_st_mysql_data,
  &_swigt__p_st_mysql_field,
  &_swigt__p_st_mysql_manager,
  &_swigt__p_st_mysql_methods,
  &_swigt__p_st_mysql_options,
  &_swigt__p_st_mysql_parameters,
  &_swigt__p_st_mysql_res,
  &_swigt__p_st_mysql_rows,
  &_swigt__p_st_mysql_stmt,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_LIST[] = {  {&_swigt__p_LIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MEM_ROOT[] = {  {&_swigt__p_MEM_ROOT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MYSQL_FIELD_OFFSET[] = {  {&_swigt__p_MYSQL_FIELD_OFFSET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MYSQL_ROW[] = {  {&_swigt__p_MYSQL_ROW, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MYSQL_ROW_OFFSET[] = {  {&_swigt__p_MYSQL_ROW_OFFSET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NET[] = {  {&_swigt__p_NET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_character_set[] = {  {&_swigt__p_character_set, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_charset_info_st[] = {  {&_swigt__p_charset_info_st, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_embedded_query_result[] = {  {&_swigt__p_embedded_query_result, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_MYSQL__p_st_mysql_field[] = {  {&_swigt__p_f_p_MYSQL__p_st_mysql_field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_MYSQL__p_st_mysql_res[] = {  {&_swigt__p_f_p_MYSQL__p_st_mysql_res, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_MYSQL_p_MYSQL_FIELD_unsigned_int__p_st_mysql_data[] = {  {&_swigt__p_f_p_MYSQL_p_MYSQL_FIELD_unsigned_int__p_st_mysql_data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_NET_p_st_mysql_bind__void[] = {  {&_swigt__p_f_p_NET_p_st_mysql_bind__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_p_void_p_q_const__char_p_void__int[] = {  {&_swigt__p_f_p_p_void_p_q_const__char_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_st_mysql__my_bool[] = {  {&_swigt__p_f_p_st_mysql__my_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_st_mysql__p_char[] = {  {&_swigt__p_f_p_st_mysql__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_st_mysql__void[] = {  {&_swigt__p_f_p_st_mysql__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_st_mysql_bind_p_st_mysql_field_p_p_unsigned_char__void[] = {  {&_swigt__p_f_p_st_mysql_bind_p_st_mysql_field_p_p_unsigned_char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_st_mysql_enum_enum_server_command_p_q_const__char_unsigned_long_p_q_const__char_unsigned_long_my_bool_p_st_mysql_stmt__my_bool[] = {  {&_swigt__p_f_p_st_mysql_enum_enum_server_command_p_q_const__char_unsigned_long_p_q_const__char_unsigned_long_my_bool_p_st_mysql_stmt__my_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_st_mysql_p_char_p_q_const__char__int[] = {  {&_swigt__p_f_p_st_mysql_p_char_p_q_const__char__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_st_mysql_p_p_char__int[] = {  {&_swigt__p_f_p_st_mysql_p_p_char__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_st_mysql_p_st_mysql_stmt__my_bool[] = {  {&_swigt__p_f_p_st_mysql_p_st_mysql_stmt__my_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_st_mysql_stmt__int[] = {  {&_swigt__p_f_p_st_mysql_stmt__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_st_mysql_stmt_p_p_unsigned_char__int[] = {  {&_swigt__p_f_p_st_mysql_stmt_p_p_unsigned_char__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_unsigned_long_MYSQL_ROW_unsigned_int__void[] = {  {&_swigt__p_f_p_unsigned_long_MYSQL_ROW_unsigned_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_char_p_unsigned_long__p_char[] = {  {&_swigt__p_f_p_void_p_char_p_unsigned_long__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_char_unsigned_int__int[] = {  {&_swigt__p_f_p_void_p_char_unsigned_int__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_generic_db[] = {  {&_swigt__p_generic_db, 0, 0, 0},  {&_swigt__p_mysql_db, _p_mysql_dbTo_p_generic_db, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gptr[] = {  {&_swigt__p_gptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_my_bool[] = {  {&_swigt__p_my_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mysql_db[] = {  {&_swigt__p_mysql_db, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_st_dynamic_array[] = {  {&_swigt__p_st_dynamic_array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_st_mysql[] = {  {&_swigt__p_st_mysql, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_st_mysql_bind[] = {  {&_swigt__p_st_mysql_bind, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_st_mysql_data[] = {  {&_swigt__p_st_mysql_data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_st_mysql_field[] = {  {&_swigt__p_st_mysql_field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_st_mysql_manager[] = {  {&_swigt__p_st_mysql_manager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_st_mysql_methods[] = {  {&_swigt__p_st_mysql_methods, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_st_mysql_options[] = {  {&_swigt__p_st_mysql_options, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_st_mysql_parameters[] = {  {&_swigt__p_st_mysql_parameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_st_mysql_res[] = {  {&_swigt__p_st_mysql_res, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_st_mysql_rows[] = {  {&_swigt__p_st_mysql_rows, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_st_mysql_stmt[] = {  {&_swigt__p_st_mysql_stmt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_LIST,
  _swigc__p_MEM_ROOT,
  _swigc__p_MYSQL_FIELD_OFFSET,
  _swigc__p_MYSQL_ROW,
  _swigc__p_MYSQL_ROW_OFFSET,
  _swigc__p_NET,
  _swigc__p_char,
  _swigc__p_character_set,
  _swigc__p_charset_info_st,
  _swigc__p_embedded_query_result,
  _swigc__p_f_p_MYSQL__p_st_mysql_field,
  _swigc__p_f_p_MYSQL__p_st_mysql_res,
  _swigc__p_f_p_MYSQL_p_MYSQL_FIELD_unsigned_int__p_st_mysql_data,
  _swigc__p_f_p_NET_p_st_mysql_bind__void,
  _swigc__p_f_p_p_void_p_q_const__char_p_void__int,
  _swigc__p_f_p_st_mysql__my_bool,
  _swigc__p_f_p_st_mysql__p_char,
  _swigc__p_f_p_st_mysql__void,
  _swigc__p_f_p_st_mysql_bind_p_st_mysql_field_p_p_unsigned_char__void,
  _swigc__p_f_p_st_mysql_enum_enum_server_command_p_q_const__char_unsigned_long_p_q_const__char_unsigned_long_my_bool_p_st_mysql_stmt__my_bool,
  _swigc__p_f_p_st_mysql_p_char_p_q_const__char__int,
  _swigc__p_f_p_st_mysql_p_p_char__int,
  _swigc__p_f_p_st_mysql_p_st_mysql_stmt__my_bool,
  _swigc__p_f_p_st_mysql_stmt__int,
  _swigc__p_f_p_st_mysql_stmt_p_p_unsigned_char__int,
  _swigc__p_f_p_unsigned_long_MYSQL_ROW_unsigned_int__void,
  _swigc__p_f_p_void__void,
  _swigc__p_f_p_void_p_char_p_unsigned_long__p_char,
  _swigc__p_f_p_void_p_char_unsigned_int__int,
  _swigc__p_generic_db,
  _swigc__p_gptr,
  _swigc__p_my_bool,
  _swigc__p_mysql_db,
  _swigc__p_p_char,
  _swigc__p_st_dynamic_array,
  _swigc__p_st_mysql,
  _swigc__p_st_mysql_bind,
  _swigc__p_st_mysql_data,
  _swigc__p_st_mysql_field,
  _swigc__p_st_mysql_manager,
  _swigc__p_st_mysql_methods,
  _swigc__p_st_mysql_options,
  _swigc__p_st_mysql_parameters,
  _swigc__p_st_mysql_res,
  _swigc__p_st_mysql_rows,
  _swigc__p_st_mysql_stmt,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



void SWIG_init_user(octave_swig_type* module_ns);

DEFUN_DLD (SWIG_name,args,nargout,SWIG_name_d) {
  static bool already_init=false;
  if (already_init)
    return octave_value_list();
  already_init=true;

  octave_swig_ref::register_type();
  octave_swig_packed::register_type();
  SWIG_InitializeModule(0);
  SWIG_PropagateClientData();
  
  install_builtin_function(swig_type,"swig_type",std::string());
  install_builtin_function(swig_typequery,"swig_typequery",std::string());
  install_builtin_function(swig_this,"swig_this",std::string());
  install_builtin_function(swig_subclass,"subclass",std::string());

  bool global_option=true; // * swig cli option should control this default
  for (int j=0;j<args.length();++j)
    if (args(j).is_string()&&args(j).string_value()=="noglobal")
      global_option=true;
    else if (args(j).is_string()&&args(j).string_value()=="noglobal")
      global_option=false;

  octave_swig_type* cvar_ns=new octave_swig_type;
  for (int j=0;swig_globals[j].name;++j)
    if (swig_globals[j].get_method)
      cvar_ns->assign(swig_globals[j].name,&swig_globals[j]);

  octave_swig_type* module_ns=new octave_swig_type;
  module_ns->assign("cvar",Swig::swig_value_ref(cvar_ns));
  for (int j=0;swig_globals[j].name;++j)
    if (swig_globals[j].method)
      module_ns->assign(swig_globals[j].name,&swig_globals[j]);

  link_to_global_variable(curr_sym_tab->lookup(SWIG_name_d,true));
  set_global_value(SWIG_name_d,Swig::swig_value_ref(module_ns));

  // * need better solution here; swig_type -> octave_class mapping is 
  // * really n-to-1, in some cases such as template partial spec, etc. 
  // * see failing tests.
  for (int j=0;swig_types[j];++j)
    if (swig_types[j]->clientdata) {
      swig_octave_class* c=(swig_octave_class*)swig_types[j]->clientdata;
      module_ns->assign(c->name,
			Swig::swig_value_ref
			(new octave_swig_type(0,swig_types[j])));
    }

  SWIG_init_user(module_ns);

  swig_install_ops(octave_swig_ref::static_type_id());

  if (global_option)
    module_ns->install_global();

  return octave_value_list();
}


void SWIG_init_user(octave_swig_type* module_ns)
{
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_DECIMAL",SWIG_From_int((int)(MYSQL_TYPE_DECIMAL)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_TINY",SWIG_From_int((int)(MYSQL_TYPE_TINY)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_SHORT",SWIG_From_int((int)(MYSQL_TYPE_SHORT)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_LONG",SWIG_From_int((int)(MYSQL_TYPE_LONG)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_FLOAT",SWIG_From_int((int)(MYSQL_TYPE_FLOAT)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_DOUBLE",SWIG_From_int((int)(MYSQL_TYPE_DOUBLE)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_NULL",SWIG_From_int((int)(MYSQL_TYPE_NULL)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_TIMESTAMP",SWIG_From_int((int)(MYSQL_TYPE_TIMESTAMP)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_LONGLONG",SWIG_From_int((int)(MYSQL_TYPE_LONGLONG)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_INT24",SWIG_From_int((int)(MYSQL_TYPE_INT24)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_DATE",SWIG_From_int((int)(MYSQL_TYPE_DATE)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_TIME",SWIG_From_int((int)(MYSQL_TYPE_TIME)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_DATETIME",SWIG_From_int((int)(MYSQL_TYPE_DATETIME)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_YEAR",SWIG_From_int((int)(MYSQL_TYPE_YEAR)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_NEWDATE",SWIG_From_int((int)(MYSQL_TYPE_NEWDATE)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_VARCHAR",SWIG_From_int((int)(MYSQL_TYPE_VARCHAR)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_BIT",SWIG_From_int((int)(MYSQL_TYPE_BIT)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_NEWDECIMAL",SWIG_From_int((int)(MYSQL_TYPE_NEWDECIMAL)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_ENUM",SWIG_From_int((int)(MYSQL_TYPE_ENUM)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_SET",SWIG_From_int((int)(MYSQL_TYPE_SET)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_TINY_BLOB",SWIG_From_int((int)(MYSQL_TYPE_TINY_BLOB)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_MEDIUM_BLOB",SWIG_From_int((int)(MYSQL_TYPE_MEDIUM_BLOB)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_LONG_BLOB",SWIG_From_int((int)(MYSQL_TYPE_LONG_BLOB)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_BLOB",SWIG_From_int((int)(MYSQL_TYPE_BLOB)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_VAR_STRING",SWIG_From_int((int)(MYSQL_TYPE_VAR_STRING)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_STRING",SWIG_From_int((int)(MYSQL_TYPE_STRING)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_TYPE_GEOMETRY",SWIG_From_int((int)(MYSQL_TYPE_GEOMETRY)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_OPT_CONNECT_TIMEOUT",SWIG_From_int((int)(MYSQL_OPT_CONNECT_TIMEOUT)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_OPT_COMPRESS",SWIG_From_int((int)(MYSQL_OPT_COMPRESS)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_OPT_NAMED_PIPE",SWIG_From_int((int)(MYSQL_OPT_NAMED_PIPE)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_INIT_COMMAND",SWIG_From_int((int)(MYSQL_INIT_COMMAND)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_READ_DEFAULT_FILE",SWIG_From_int((int)(MYSQL_READ_DEFAULT_FILE)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_READ_DEFAULT_GROUP",SWIG_From_int((int)(MYSQL_READ_DEFAULT_GROUP)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_SET_CHARSET_DIR",SWIG_From_int((int)(MYSQL_SET_CHARSET_DIR)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_SET_CHARSET_NAME",SWIG_From_int((int)(MYSQL_SET_CHARSET_NAME)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_OPT_LOCAL_INFILE",SWIG_From_int((int)(MYSQL_OPT_LOCAL_INFILE)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_OPT_PROTOCOL",SWIG_From_int((int)(MYSQL_OPT_PROTOCOL)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_SHARED_MEMORY_BASE_NAME",SWIG_From_int((int)(MYSQL_SHARED_MEMORY_BASE_NAME)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_OPT_READ_TIMEOUT",SWIG_From_int((int)(MYSQL_OPT_READ_TIMEOUT)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_OPT_WRITE_TIMEOUT",SWIG_From_int((int)(MYSQL_OPT_WRITE_TIMEOUT)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_OPT_USE_RESULT",SWIG_From_int((int)(MYSQL_OPT_USE_RESULT)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_OPT_USE_REMOTE_CONNECTION",SWIG_From_int((int)(MYSQL_OPT_USE_REMOTE_CONNECTION)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_OPT_USE_EMBEDDED_CONNECTION",SWIG_From_int((int)(MYSQL_OPT_USE_EMBEDDED_CONNECTION)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_OPT_GUESS_CONNECTION",SWIG_From_int((int)(MYSQL_OPT_GUESS_CONNECTION)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_SET_CLIENT_IP",SWIG_From_int((int)(MYSQL_SET_CLIENT_IP)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_SECURE_AUTH",SWIG_From_int((int)(MYSQL_SECURE_AUTH)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_REPORT_DATA_TRUNCATION",SWIG_From_int((int)(MYSQL_REPORT_DATA_TRUNCATION)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_OPT_RECONNECT",SWIG_From_int((int)(MYSQL_OPT_RECONNECT)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_OPT_SSL_VERIFY_SERVER_CERT",SWIG_From_int((int)(MYSQL_OPT_SSL_VERIFY_SERVER_CERT)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_STATUS_READY",SWIG_From_int((int)(MYSQL_STATUS_READY)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_STATUS_GET_RESULT",SWIG_From_int((int)(MYSQL_STATUS_GET_RESULT)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_STATUS_USE_RESULT",SWIG_From_int((int)(MYSQL_STATUS_USE_RESULT)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_PROTOCOL_DEFAULT",SWIG_From_int((int)(MYSQL_PROTOCOL_DEFAULT)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_PROTOCOL_TCP",SWIG_From_int((int)(MYSQL_PROTOCOL_TCP)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_PROTOCOL_SOCKET",SWIG_From_int((int)(MYSQL_PROTOCOL_SOCKET)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_PROTOCOL_PIPE",SWIG_From_int((int)(MYSQL_PROTOCOL_PIPE)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_PROTOCOL_MEMORY",SWIG_From_int((int)(MYSQL_PROTOCOL_MEMORY)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_RPL_MASTER",SWIG_From_int((int)(MYSQL_RPL_MASTER)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_RPL_SLAVE",SWIG_From_int((int)(MYSQL_RPL_SLAVE)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_RPL_ADMIN",SWIG_From_int((int)(MYSQL_RPL_ADMIN)));
  SWIG_Octave_SetConstant(module_ns,"MAX_MYSQL_MANAGER_ERR",SWIG_From_int((int)(256)));
  SWIG_Octave_SetConstant(module_ns,"MAX_MYSQL_MANAGER_MSG",SWIG_From_int((int)(256)));
  SWIG_Octave_SetConstant(module_ns,"MANAGER_OK",SWIG_From_int((int)(200)));
  SWIG_Octave_SetConstant(module_ns,"MANAGER_INFO",SWIG_From_int((int)(250)));
  SWIG_Octave_SetConstant(module_ns,"MANAGER_ACCESS",SWIG_From_int((int)(401)));
  SWIG_Octave_SetConstant(module_ns,"MANAGER_CLIENT_ERR",SWIG_From_int((int)(450)));
  SWIG_Octave_SetConstant(module_ns,"MANAGER_INTERNAL_ERR",SWIG_From_int((int)(500)));
  SWIG_Octave_SetConstant(module_ns,"LOCAL_INFILE_ERROR_LEN",SWIG_From_int((int)(512)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_STMT_INIT_DONE",SWIG_From_int((int)(MYSQL_STMT_INIT_DONE)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_STMT_PREPARE_DONE",SWIG_From_int((int)(MYSQL_STMT_PREPARE_DONE)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_STMT_EXECUTE_DONE",SWIG_From_int((int)(MYSQL_STMT_EXECUTE_DONE)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_STMT_FETCH_DONE",SWIG_From_int((int)(MYSQL_STMT_FETCH_DONE)));
  SWIG_Octave_SetConstant(module_ns,"STMT_ATTR_UPDATE_MAX_LENGTH",SWIG_From_int((int)(STMT_ATTR_UPDATE_MAX_LENGTH)));
  SWIG_Octave_SetConstant(module_ns,"STMT_ATTR_CURSOR_TYPE",SWIG_From_int((int)(STMT_ATTR_CURSOR_TYPE)));
  SWIG_Octave_SetConstant(module_ns,"STMT_ATTR_PREFETCH_ROWS",SWIG_From_int((int)(STMT_ATTR_PREFETCH_ROWS)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_NO_DATA",SWIG_From_int((int)(100)));
  SWIG_Octave_SetConstant(module_ns,"MYSQL_DATA_TRUNCATED",SWIG_From_int((int)(101)));
}

