npp: disable minidump

diff -r 26bcbfe23253 PowerEditor/src/MISC/Exception/MiniDumper.cpp
--- a/PowerEditor/src/MISC/Exception/MiniDumper.cpp	Thu Oct 01 14:08:35 2009 +0200
+++ b/PowerEditor/src/MISC/Exception/MiniDumper.cpp	Thu Oct 01 14:10:27 2009 +0200
@@ -18,7 +18,9 @@
 //Adapted from http://www.codeproject.com/KB/debug/postmortemdebug_standalone1.aspx#_Reading_a_Minidump_with%20Visual%20Stud
 //Modified for use by Npp
 
+#ifndef __MINGW32__
 #include "precompiledHeaders.h"
+
 #include "MiniDumper.h"
 
 LPCTSTR msgTitle = TEXT("Notepad++ crash analysis");
@@ -98,3 +100,5 @@
 
 	return retval;
 }
+
+#endif  // #ifndef __MINGW32__
diff -r 26bcbfe23253 PowerEditor/src/MISC/Exception/MiniDumper.h
--- a/PowerEditor/src/MISC/Exception/MiniDumper.h	Thu Oct 01 14:08:35 2009 +0200
+++ b/PowerEditor/src/MISC/Exception/MiniDumper.h	Thu Oct 01 14:10:27 2009 +0200
@@ -20,6 +20,7 @@
 #ifndef MDUMP_H
 #define MDUMP_H
 
+#ifndef __MINGW32__
 
 // based on dbghelp.h
 typedef BOOL (WINAPI *MINIDUMPWRITEDUMP)(HANDLE hProcess, DWORD dwPid, HANDLE hFile, MINIDUMP_TYPE DumpType,
@@ -34,4 +35,5 @@
 	bool writeDump(EXCEPTION_POINTERS * pExceptionInfo);
 };
 
+#endif // #ifndef __MINGW32__
 #endif //MDUMP_H
\ No newline at end of file
diff -r 26bcbfe23253 PowerEditor/src/winmain.cpp
--- a/PowerEditor/src/winmain.cpp	Thu Oct 01 14:08:35 2009 +0200
+++ b/PowerEditor/src/winmain.cpp	Thu Oct 01 14:10:27 2009 +0200
@@ -165,9 +165,9 @@
 	LPTSTR cmdLine = ::GetCommandLine();
 	ParamVector params;
 	parseCommandLine(cmdLine, params);
-
+#ifndef __MINGW32__
 	MiniDumper mdump;	//for debugging purposes.
-
+#endif
 	bool TheFirstOne = true;
 	::SetLastError(NO_ERROR);
 	::CreateMutex(NULL, false, TEXT("nppInstance"));
@@ -361,8 +361,10 @@
 #endif
 			ex.code(), ex.what(), ex.where());
 		::MessageBox(Notepad_plus::gNppHWND, message, TEXT("Win32Exception"), MB_OK | MB_ICONERROR);
+#ifndef __MINGW32__
 		mdump.writeDump(ex.info());
-		doException(notepad_plus_plus);
+#endif
+	    doException(notepad_plus_plus);
 	} catch(std::exception ex) {
 #ifdef UNICODE
 		const wchar_t * text = WcharMbcsConvertor::getInstance()->char2wchar(ex.what(), CP_ACP);
