NaN-Tb: A statistics toolbox for handling NaN's and missing values. -------------------------------------------------------------------(c) 2000-2002 Alois Schloegl <a.schloegl@ieee.org>FEATURES of the NaN-tb:----------------------- - can deal with NaN's (be default NaNs are skipped)  - handles missing values (encoded as NaN's) - easy to use, does not need special nan-functions like nansum, etc.  - only one function instead of two (e.g. mean and nanmean are replaced by mean, etc) - contains basic statistical functions. - supports DIM argument  - supports unbiased estimation;  - flags for switching between propagating NaNs and skipping NaN's          for switching between biased and  unbiased estimates          are implemented. 	 However, these might become obsolete in future - Do not use them. - realizes an experimental concept for the future developement of Matrix-languages.    (give it a try) 	    - compatible to Matlab and Octave   The toolbox was tasted and can be used with    Matlab 5.2, 5.3, 6.1 and Octave 2.0.14, 2.0.16.92, 2.1.35,   Currently are implemented:-------------------------- 	SUMSKIPNAN 	SUM is a built-in function and cannot not be replaced, 			For this reason, a different name (than SUM) had to be chosen. 			SUMSKIPNAN is central, it implements skipping NaN's, the 			DIM-argument and returns the number of valid elements, too.	MEAN	 	mean (options: arithmetic, geometric, harmonic)	SEM		standard error of the mean (does not depend on distribution)	VAR 		variance	STD 		standard deviation	MEDIAN		median (currently only for 2-dim matrices)	MEANSQ		mean square	RMS		root mean square	STATISTIC	estimates various statistics at once	MOMENT		moment 		SKEWNESS	skewness	KURTOSIS	excess 	MAD		mean absolute deviation	CENTER		removes mean  	ZSCORE		normalizes x with z=(x-mean)/std 	HARMMEAN	harmonic mean	GEOMEAN		geometric mean	NANTEST		checks whether all functions have been replaced	DETREND		detrending of data with missing values and non-equidistant sampled data	COVM		covariance estimation (several modes)	COR		correlation matrix	CORRCOEF	correlation coefficient 	COV		covariance matrix		FLAG_IMPLICIT_SKIP_NAN				gets and sets default handling of NaN's			might become obsolete in future	FLAG_IMPLICIT_UNBIASED_ESTIM				gets and sets default estimation mode			might become obsolete in future	FLAG_IMPLICIT_DIMENSION				gets and sets default DIMENSION argument			might become obsolete in future				REFERENCE(S):----------------------------------[1] http://www.itl.nist.gov/[2] http://mathworld.wolfram.com/[3] http://mathworld.wolfram.com/TimeSeriesAnalysis.htmlWhat is the difference to previous implementations?===================================================1) The default behavior of previous implementations is that NaNs in the input data results in NaNs in the output data. In many applications is this behavior quite borring. In this implementation, NaNs are handled as missing values and are skipped. 2) In previous implementations the workaround was using different functions like NANSUM, NANMEAN etc. In this toolbox, the same routines can be applied todata with and without NaNs. This enables more natural (better read- and understandable) applications. 3) SUMSKIPNAN is central to the other functions. It implements - the DIMENSION-argument, - handles NaNs as missing values or as exception signal (depending on a   hidden FLAG), - and returns the number of valid elements (which are not NaNs) in the   second output argument.(Note, NANSUM from Matlab does not support the DIM-argument, and NANSUM(NaN)gives NaN instead of 0);Example:    x  = randn(10,4); x([5,7],1)=NaN;x(:,4)=NaN,    v1 = var(x);  % skips NaNs    flag_implicit_skip_nan(0);  % sets mode to NaN-In -> NaN-Out'    v2 = var(x);  % NaN-In results in NaN-Out    flag_implicit_skip_nan(1);  % sets mode to skip NaN's    v3 = var(x);  % skips NaNs againUsually, there is no reason to change the default setting (FLAG_IMPLICIT_SKIP_NAN==1). Explicit setting of FLAG_IMPLICIT_SKIP_NAN might make your code difficult to understand; I do not recommend using it. 4) Defining the estimation mode (biased or unbiased) ... is based on a new strategy. In Matlab an optional flag argument has to be given. In this new implementation, the mode is determined once by a hidden (global) FLAG. This FLAG can be changed with the function call FLAG_IMPLICIT_UNBIASED_ESTIM. (see STD, VAR, MOMENT, STATISTIC, KURTOSIS, SKEWNESS). The application programs will be easier to read.Examples:    x  = randn(10,4),x(1:9,2)=NaN;x(1:8,3)=NaN;    v1 = var(x);  % gives unbiased variance of x    flag_implicit_unbiased_estim(0);  % sets estimation mode to 'BIASED'    v2 = var(x);  % gives biased variance of x    flag_implicit_unbiased_estim(1);  % sets estimation mode to 'UNBIASED'    v3 = var(x);  % gives again unbiased variance of xUsually, there is no reason to change the default setting (FLAG_IMPLICIT_UNBIASED_ESTIM==1). Explicit setting of FLAG_IMPLICIT_UNBIASED_ESTIM might make your code difficult to understand; I do not recommend using it. 5) The DIMENSION argument is implemented in most routines. These should work in all Matlab and Octave versions. A workaround for a bug in Octave versions <=2.1.35 is implemented. Also several functions from Matlab have no support for the DIM argument (e.g. SKEWNESS, KURTOSIS, VAR)6) Compatible to previous Octave implementationMEAN implements also the GEOMETRIC and HARMONIC mean. Handling of some special cases has been removed because its not necessary, anymore. MOMENT implements Mode 'ac' (absolute and/or central) moment as implementedin Octave. 7) Performance increaseIn most numerical applications, NaN's should be simply skipped. Therefore, it is efficient to skip NaN's in the default case. In case an explicit check for NaN's is necessary, implicit exception handling could be avoided. Eventually the overall performance could increase. 8) More readable codeAn explicit check for NaN's display the importance of this special case. Therefore, the application program might be more readable.9) ZSCORE, MAD, HARMMEAN and GEOMEANDIM-argument and skipping of NaN's implemented. None of these features isimplemented in the Matlab versions.10) NANSUM, NANMEAN, NANVAR, NANSTD, NANMEDIANThese are not necessary anymore. They are implemented in SUMSKIPNAN, MEAN, VAR, STD and MEDIAN, respectively. 11) GPL licensePermits to implement useful modifications. Q: WHY SKIPPING NaN's?:------------------------A: Usually, NaN means that the value is not available. This meaning is most common, even many different reasons might cause NaN's. In statistics, NaN's represent missing values, in biosignal processing such missing values might have been caused by some recording error. Other reasons for NaN's are, indetermined expressions like e.g. 0/0, data not available, unknown value, not a numeric value, etc. If NaN has the meaning of a missing value, it is only consequent to say, the sum of NaN's should be zero. Similar arguments hold for the other functions. The mean of X is undefined if and only if X contains no numbers. The implementation sum(X)/sum(~isnan(X)) gives 0/0=NaN, which is the desired result. The variance of X is undefined if and only if X contains less than 2 numbers.  In most numerical applications, NaN's should be simply skipped. Therefore, it is efficient to skip NaN's in the default case. In the other cases, the NaN's can still be checked explicitely. This could eventually result in a more readable code and in improved performance, too.  Installing the NaN-tb with Octave:----------------------------------a) You need repmat.m (e.g. from P.Kienzle's MATCOMPAT)     If you havenot installed it yet, you should do it now. b) extract files from NaNnnn.tar.gz and move them into .../octave/.../m/statistics/base/ c) Alternatively, the files can be moved into any other directory; but you must remove from .../octave/.../m/statistics/base/ mean.m, meansq.m, median.m, moment.m, skewness.m, kurtosis.m, std.m, var.mand from .../source_forge/.../statistics/*zscore.m, mad.m, geomean.m, harmmean.m d) (re-)start Octave and run NANTEST. This checks whether all previous functions have been replacedInstalling the NaN-tb for Matlab:----------------------------------Ensure that the NaN-directory is first in your path. This should override any alternative function definition (except built-in's) with the same name. (re-)start Matlab or clear functions and run NANTEST. This checks whether all previous functions have been replaced	Version 1.21 	2 May 2002	Copyright (C) 2000-2002 by  Alois Schloegl	a.schloegl@ieee.org		WWW: http://www.dpmi.tu-graz.ac.at/~schloegl/matlab/NaN/LICENSE:    This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 