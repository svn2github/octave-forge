diff --git a/makefile.mingw b/makefile.mingw
new file mode 100644
--- /dev/null
+++ b/makefile.mingw
@@ -0,0 +1,109 @@
+SRCDIR ?= .
+
+vpath %.f $(SRCDIR)
+vpath %.def $(SRCDIR)
+
+LIBTARGET = blas.dll
+IMPLIB    = blas.dll.a
+STATICLIB = libblas.a
+RANLIB ?= $(CROSS)ranlib
+
+prefix ?= /usr/local
+
+F77 = $(CROSS)gfortran
+AR  = $(CROSS)ar
+
+FFLAGS_XTRA += -O3 -funroll-all-loops
+
+FSOURCES = \
+caxpy.f  chbmv.f   chpr2.f   ctbmv.f  \
+daxpy.f   drot.f    dspr2.f   dtbsv.f   \
+icamax.f  \
+scopy.f   srotg.f   ssymm.f   stpsv.f   \
+zdotu.f   zhemm.f   zrotg.f   ztpsv.f  \
+ccopy.f  chemm.f   crotg.f   ctbsv.f  \
+dcabs1.f  drotg.f   dswap.f   dtpmv.f   \
+idamax.f  \
+sdot.f  srotm.f   ssymv.f   strmm.f   \
+zdrot.f   zhemv.f   zscal.f   ztrmm.f \
+cdotc.f  chemv.f   cscal.f  ctpmv.f  \
+dcopy.f   drotm.f   dsymm.f   dtpsv.f   \
+isamax.f  \
+sdsdot.f  srotmg.f  ssyr.f    strmv.f  \
+zdscal.f  zher.f    zswap.f   ztrmv.f \
+cdotu.f  cher.f    csrot.f   ctpsv.f  \
+ddot.f    drotmg.f  dsymv.f   dtrmm.f   \
+izamax.f  \
+sgbmv.f   ssbmv.f   ssyr2.f   strsm.f   \
+zgbmv.f   zher2.f   zsymm.f   ztrsm.f  \
+cgbmv.f  cher2.f   csscal.f  ctrmm.f  \
+dgbmv.f   dsbmv.f   dsyr.f    dtrmv.f   \
+lsame.f   \
+sgemm.f   sscal.f   ssyr2k.f  strsv.f   \
+zgemm.f   zher2k.f  zsyr2k.f  ztrsv.f   \
+cgemm.f  cher2k.f  cswap.f   ctrmv.f  \
+dgemm.f   dscal.f   dsyr2.f   dtrsm.f   \
+sasum.f   sgemv.f   sspmv.f   ssyrk.f   \
+xerbla.f  \
+zgemv.f   zherk.f   zsyrk.f \
+cgemv.f  cherk.f   csymm.f   ctrsm.f  \
+dgemv.f   dsdot.f   dsyr2k.f  dtrsv.f   \
+saxpy.f   sger.f    sspr.f    stbmv.f   \
+zaxpy.f   zgerc.f   zhpmv.f   ztbmv.f \
+cgerc.f  chpmv.f   csyr2k.f  ctrsv.f  \
+dger.f    dspmv.f   dsyrk.f   dzasum.f  \
+scasum.f  snrm2.f   sspr2.f   stbsv.f   \
+zcopy.f   zgeru.f   zhpr.f    ztbsv.f  \
+cgeru.f  chpr.f    csyrk.f   \
+dasum.f  dnrm2.f   dspr.f    dtbmv.f   dznrm2.f  \
+scnrm2.f  srot.f    sswap.f   stpmv.f   \
+zdotc.f   zhbmv.f   zhpr2.f   ztpmv.f \
+scabs1.f
+
+OBJECTS = $(patsubst %.f,%.o, $(FSOURCES))
+
+DEF_FILES = $(patsubst %.f,%.def, $(FSOURCES))
+LIB_DEFFILE = $(patsubst %.dll,%.def, $(LIBTARGET))
+
+all: $(LIBTARGET) $(STATICLIB)
+
+.SUFFIXES: .f .c .o .def
+
+%.o : %.f
+	$(F77) $(FFLAGS_XTRA) $(FFLAGS) -o $@ -c $<
+
+%.def : %.f
+	@echo "Making $@"
+	@sed -n \
+	     -e 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/' \
+	     -e 's/^\(      \|	\)\(.*function\|subroutine\|entry\)[ 	]*\([^ 	(]*\).*$$/\3_/p' < $< > $@
+
+$(LIB_DEFFILE): $(DEF_FILES)
+	echo "EXPORTS" > $@
+	cat $(DEF_FILES) >> $@
+
+$(STATICLIB): $(OBJECTS)
+	-$(RM) -f $@
+	$(AR) cr $@ $^
+	- $(RANLIB) $@
+
+$(LIBTARGET): $(OBJECTS) $(LIB_DEFFILE)
+	$(F77) -shared $(LDFLAGS) $(FLDFLAGS) -o $@ $(OBJECTS) $(LIB_DEFFILE) \
+		-Wl,--out-implib,$(IMPLIB) \
+		-Wl,--output-def,libblas.def \
+		-Wl,--no-whole-archive
+
+OTHER_CLEANFILES = $(patsubst %.dll, %.exp, $(LIBTARGET)) \
+		   $(patsubst %.dll, %.ilk, $(LIBTARGET)) \
+		   $(patsubst %.dll, %.lib, $(LIBTARGET)) \
+		   $(patsubst %.dll, %.pdb, $(LIBTARGET))
+
+clean:
+	$(RM) $(OBJECTS) $(CSOURCES)
+	$(RM) $(DEF_FILES) $(LIB_DEFFILE)
+	$(RM) $(LIBTARGET) $(OTHER_CLEANFILES)
+
+install: $(LIBTARGET) $(STATICLIB)
+	cp -uvp libblas.a       $(prefix)/lib
+	cp -uvp blas.dll        $(prefix)/bin
+	cp -uvp libblas.dll.a   $(prefix)/lib
