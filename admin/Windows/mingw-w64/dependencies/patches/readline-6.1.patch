diff --git a/bind.c b/bind.c
--- a/bind.c
+++ b/bind.c
@@ -849,10 +849,10 @@
       filename = SYS_INPUTRC;
     }
 
-#if defined (__MSDOS__)
+#if defined (__MSDOS__) || defined (_WIN32)
   if (_rl_read_init_file (filename, 0) == 0)
     return 0;
-  filename = "~/_inputrc";
+  filename = "~/.inputrc";
 #endif
   return (_rl_read_init_file (filename, 0));
 }
diff --git a/complete.c b/complete.c
--- a/complete.c
+++ b/complete.c
@@ -43,6 +43,10 @@
 
 #include <stdio.h>
 
+#if defined (_WIN32)
+#include <windows.h>
+#endif
+
 #include <errno.h>
 #if !defined (errno)
 extern int errno;
@@ -154,7 +158,7 @@
 int _rl_print_completions_horizontally;
 
 /* Non-zero means that case is not significant in filename completion. */
-#if defined (__MSDOS__) && !defined (__DJGPP__)
+#if (defined (__MSDOS__) || defined (_WIN32)) && !defined (__DJGPP__)
 int _rl_completion_case_fold = 1;
 #else
 int _rl_completion_case_fold;
@@ -596,7 +600,7 @@
     return (pathname);
 
   temp = strrchr (pathname, '/');
-#if defined (__MSDOS__)
+#if defined (__MSDOS__) || defined (_WIN32)
   if (temp == 0 && ISALPHA ((unsigned char)pathname[0]) && pathname[1] == ':')
     temp = pathname + 1;
 #endif
@@ -1953,11 +1957,16 @@
      const char *text;
      int state;
 {
-#if defined (__WIN32__) || defined (__OPENNT)
+#if defined (__OPENNT)
   return (char *)NULL;
-#else /* !__WIN32__ && !__OPENNT) */
+#else /* !__OPENNT */
   static char *username = (char *)NULL;
+#if defined (_WIN32)
+  char user_name[128];
+  unsigned user_len;
+#else
   static struct passwd *entry;
+#endif
   static int namelen, first_char, first_char_loc;
   char *value;
 
@@ -1970,9 +1979,12 @@
 
       username = savestring (&text[first_char_loc]);
       namelen = strlen (username);
+#if !defined (_WIN32)
       setpwent ();
+#endif
     }
 
+#if !defined (_WIN32)
 #if defined (HAVE_GETPWENT)
   while (entry = getpwent ())
     {
@@ -2002,7 +2014,22 @@
 
       return (value);
     }
-#endif /* !__WIN32__ && !__OPENNT */
+#else /* _WIN32 */
+  if (GetUserName (user_name, &user_len))
+    {
+      if (namelen == 0 || (!strnicmp (username, user_name, namelen)))
+	{
+	  value = (char *)xmalloc (2 + strlen (user_name));
+	  *value = *text;
+	  strcpy (value + first_char_loc, user_name);
+	  if (first_char == '~')
+	    rl_filename_completion_desired = 1;
+	  return (value);
+	}
+    }
+  return ((char *)NULL);
+#endif /* !_WIN32 */
+#endif /* !__OPENNT */
 }
 
 /* Okay, now we write the entry_function for filename completion.  In the
@@ -2044,7 +2071,7 @@
 
       temp = strrchr (dirname, '/');
 
-#if defined (__MSDOS__)
+#if defined (__MSDOS__) || defined (_WIN32)
       /* special hack for //X/... */
       if (dirname[0] == '/' && dirname[1] == '/' && ISALPHA ((unsigned char)dirname[2]) && dirname[3] == '/')
         temp = strrchr (dirname + 3, '/');
@@ -2055,7 +2082,7 @@
 	  strcpy (filename, ++temp);
 	  *temp = '\0';
 	}
-#if defined (__MSDOS__)
+#if defined (__MSDOS__) || defined (_WIN32)
       /* searches from current directory on the drive */
       else if (ISALPHA ((unsigned char)dirname[0]) && dirname[1] == ':')
         {
diff --git a/config.h.in b/config.h.in
--- a/config.h.in
+++ b/config.h.in
@@ -259,7 +259,7 @@
 #  define TERMIOS_MISSING
 #endif
 
-#if defined (__STDC__) && defined (HAVE_STDARG_H)
+#if (defined (__STDC__) || defined (_WIN32)) && defined (HAVE_STDARG_H)
 #  define PREFER_STDARG
 #  define USE_VARARGS
 #else
diff --git a/display.c b/display.c
--- a/display.c
+++ b/display.c
@@ -55,6 +55,11 @@
 #include "rlprivate.h"
 #include "xmalloc.h"
 
+#if defined (_WIN32)
+#include <windows.h>
+#define hStdout GetStdHandle(STD_OUTPUT_HANDLE)
+#endif
+
 #if !defined (strchr) && !defined (__STDC__)
 extern char *strchr (), *strrchr ();
 #endif /* !strchr && !__STDC__ */
@@ -1904,6 +1909,20 @@
   int cpos, dpos;		/* current and desired cursor positions */
   int adjust;
 
+#if defined (_WIN32)
+  CONSOLE_SCREEN_BUFFER_INFO     csbi;
+  if ( (_rl_last_c_pos != new)
+       && GetConsoleScreenBufferInfo(hStdout, &csbi) )
+    {
+      csbi.dwCursorPosition.X += new - _rl_last_c_pos;
+      if ( SetConsoleCursorPosition(hStdout, csbi.dwCursorPosition) )
+        {
+          _rl_last_c_pos = new;
+          return;
+        }
+    }
+#endif /* _WIN32 */
+
   woff = WRAP_OFFSET (_rl_last_v_pos, wrap_offset);
   cpos = _rl_last_c_pos;
 
@@ -2040,6 +2059,20 @@
 {
   register int delta, i;
 
+#if defined (_WIN32)
+  CONSOLE_SCREEN_BUFFER_INFO	csbi;
+  if ( (_rl_last_v_pos != to) && (to <= _rl_screenheight)
+       && GetConsoleScreenBufferInfo(hStdout, &csbi) )
+  {
+    csbi.dwCursorPosition.Y += to - _rl_last_v_pos;
+    if ( SetConsoleCursorPosition(hStdout, csbi.dwCursorPosition) )
+    {
+      _rl_last_v_pos = to;
+      return;
+    }
+  }
+#endif /* !_WIN32 */
+
   if (_rl_last_v_pos == to || to > _rl_screenheight)
     return;
 
@@ -2318,6 +2351,15 @@
 _rl_clear_to_eol (count)
      int count;
 {
+#if defined (_WIN32)
+  CONSOLE_SCREEN_BUFFER_INFO	csbi;
+  if (GetConsoleScreenBufferInfo(hStdout, &csbi))
+  {
+    DWORD written;
+    FillConsoleOutputCharacter(hStdout, ' ', count, csbi.dwCursorPosition, &written);
+    return;
+  }
+#endif /* !_WIN32 */
   if (_rl_term_clreol)
     tputs (_rl_term_clreol, 1, _rl_output_character_function);
   else if (count)
@@ -2341,6 +2383,32 @@
 void
 _rl_clear_screen ()
 {
+#if defined (_WIN32)
+  /* http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/getconsolescreenbufferinfo.asp */
+  COORD coordScreen = { 0, 0 };
+  DWORD cCharsWritten;
+  CONSOLE_SCREEN_BUFFER_INFO csbi; 
+  DWORD dwConSize;
+
+  if(GetConsoleScreenBufferInfo( hStdout, &csbi ))
+  {
+    dwConSize = csbi.dwSize.X * csbi.dwSize.Y;
+
+    if(FillConsoleOutputCharacter( hStdout, (TCHAR) ' ',
+        dwConSize, coordScreen, &cCharsWritten ))
+    {
+      if(GetConsoleScreenBufferInfo( hStdout, &csbi ))
+      {
+        if(FillConsoleOutputAttribute( hStdout, csbi.wAttributes,
+            dwConSize, coordScreen, &cCharsWritten ))
+        {
+          SetConsoleCursorPosition( hStdout, coordScreen );
+          return;
+        }
+      }
+    }
+  }
+#endif
   if (_rl_term_clrpag)
     tputs (_rl_term_clrpag, 1, _rl_output_character_function);
   else
diff --git a/examples/rlevent.c b/examples/rlevent.c
--- a/examples/rlevent.c
+++ b/examples/rlevent.c
@@ -61,7 +61,7 @@
 event_hook ()
 {
   fprintf (stderr, "ding!\n");
-  sleep (1);
+  _sleep (1);
   return 0;
 }
 
diff --git a/input.c b/input.c
--- a/input.c
+++ b/input.c
@@ -54,6 +54,11 @@
 #include <stdio.h>
 #include <errno.h>
 
+#if defined (_WIN32)
+#include <windows.h>
+#undef FIONREAD
+#endif
+
 #if !defined (errno)
 extern int errno;
 #endif /* !errno */
@@ -95,6 +100,9 @@
 static int pop_index, push_index;
 static unsigned char ibuffer[512];
 static int ibuffer_len = sizeof (ibuffer) - 1;
+#if defined(_WIN32)
+static HANDLE tty_reader_thread = NULL;
+#endif
 
 #define any_typein (push_index != pop_index)
 
@@ -160,6 +168,183 @@
   return (push_index != pop_index);
 }
 
+#if defined (_WIN32)
+#include <ctype.h>
+#define METAFY(c) \
+  if( rec.Event.KeyEvent.dwControlKeyState & (LEFT_ALT_PRESSED) ) { \
+    buf[bufidx++] = (c); \
+    return 0033; \
+  };
+
+static int win32_getch ()
+{
+  INPUT_RECORD rec;
+  DWORD evRead;
+  HANDLE hInput = _get_osfhandle (fileno (rl_instream));
+  static char buf[16] = {'0'};
+  static int bufidx = 0;
+
+  if (bufidx > 0)
+    return buf[--bufidx];
+
+  do
+    {
+      if (!ReadConsoleInput(hInput, &rec, 1, &evRead) || evRead != 1)
+        return EOF;
+      switch (rec.EventType)
+        {
+          case KEY_EVENT:
+            if ((rec.Event.KeyEvent.bKeyDown &&
+                 (rec.Event.KeyEvent.wVirtualKeyCode < VK_SHIFT ||
+                  rec.Event.KeyEvent.wVirtualKeyCode > VK_MENU)) ||
+                (!rec.Event.KeyEvent.bKeyDown &&
+                 rec.Event.KeyEvent.wVirtualKeyCode == VK_MENU &&
+                 rec.Event.KeyEvent.uChar.AsciiChar))
+              {
+                if (rec.Event.KeyEvent.uChar.AsciiChar)
+                  {
+                    if (rec.Event.KeyEvent.uChar.AsciiChar < 0 ||
+                        (rec.Event.KeyEvent.uChar.AsciiChar < 32 &&
+                         !(rec.Event.KeyEvent.dwControlKeyState & (RIGHT_CTRL_PRESSED|LEFT_CTRL_PRESSED))))
+                      {
+                        char c = rec.Event.KeyEvent.uChar.AsciiChar;
+                        if (GetOEMCP () == GetConsoleCP ())
+                          OemToCharBuff (&c, &c, 1);
+                        METAFY(c);
+                        return (int)(unsigned char)c;
+                      }
+                    else
+                      METAFY(rec.Event.KeyEvent.uChar.UnicodeChar);
+                      return (int)rec.Event.KeyEvent.uChar.UnicodeChar;
+                  }
+                else
+                  switch (rec.Event.KeyEvent.wVirtualKeyCode)
+                    {
+                      case VK_UP:
+                        buf[bufidx++] = 'A';
+                        buf[bufidx++] = '[';
+                        return 0033;
+                      case VK_DOWN:
+                        buf[bufidx++] = 'B';
+                        buf[bufidx++] = '[';
+                        return 0033;
+                      case VK_RIGHT:
+                        if (rec.Event.KeyEvent.dwControlKeyState & (RIGHT_CTRL_PRESSED|LEFT_CTRL_PRESSED)) {
+                          /* Ctrl-RIGHT */
+                          buf[bufidx++] = 'R';
+                        } else {
+                          buf[bufidx++] = 'C';
+                        }
+                        buf[bufidx++] = '[';
+                        return 0033;
+                      case VK_LEFT:
+                        if (rec.Event.KeyEvent.dwControlKeyState & (RIGHT_CTRL_PRESSED|LEFT_CTRL_PRESSED)) {
+                          /* Ctrl-RIGHT */
+                          buf[bufidx++] = 'L';
+                        } else {
+                          buf[bufidx++] = 'D';
+                        }
+                        buf[bufidx++] = '[';
+                        return 0033;
+                      case VK_HOME:
+                        buf[bufidx++] = 'H';
+                        buf[bufidx++] = '[';
+                        return 0033;
+                      case VK_END:
+                        buf[bufidx++] = 'F';
+                        buf[bufidx++] = '[';
+                        return 0033;
+                      case VK_DELETE:
+                        /* support for META-DEL: same as META-D */
+                        METAFY('d');
+                        /* otherwise DEL corresponds to Ctrl-D */
+                        return 4;
+                      default:
+                        break;
+                    }
+              }
+            break;
+          default:
+            break;
+        }
+    } while (1);
+}
+#undef METAFY
+
+static int win32_read (int fh, void *buf, int size)
+{
+  static HANDLE evt = NULL;
+  static int tried_with_event = 0;
+
+  if (evt || !tried_with_event)
+    {
+      tried_with_event = 1;
+      if (!evt)
+        {
+          char evt_name[128];
+          _snprintf (evt_name, 127, "readline-event-%d", GetCurrentProcessId ());
+          evt = OpenEvent (EVENT_MODIFY_STATE|SYNCHRONIZE, FALSE, evt_name);
+        }
+
+      if (evt)
+        {
+          DWORD waitResult;
+          if ((waitResult = WaitForSingleObject (evt, INFINITE)) == WAIT_OBJECT_0)
+            {
+              int result = read (fh, buf, size);
+              DWORD nb = 0;
+
+              if (PeekNamedPipe ((HANDLE)_get_osfhandle (fh), NULL, 0, NULL, &nb, NULL) && nb == 0)
+                ResetEvent (evt);
+              return result;
+            }
+          else
+            {
+              if (waitResult == WAIT_FAILED)
+                {
+                  int err = GetLastError();
+                  printf("%d\n", err);
+                }
+              return EOF;
+            }
+        }
+    }
+
+  return read (fh, buf, size);
+
+  /*
+  HANDLE hnd = _get_osfhandle (fh);
+  DWORD bytesRead;
+  BOOL ret;
+
+  ret = ReadFile (hnd, buf, size, &bytesRead, NULL);
+  if (ret)
+    return bytesRead;
+  else
+    return 0;
+    */
+}
+
+DWORD WINAPI tty_reader_proc (LPVOID param)
+{
+  int tty = fileno (rl_instream);
+
+  if (param == NULL)
+    {
+      int result;
+      unsigned char c;
+
+      result = win32_read (tty, &c, sizeof (unsigned char));
+      if (result == sizeof (unsigned char))
+        return c;
+      else
+        return EOF;
+    }
+  else
+    return win32_getch ();
+}
+#endif /* _WIN32 */
+
 /* If a character is available to be read, then read it and stuff it into
    IBUFFER.  Otherwise, just return.  Returns number of characters read
    (0 if none available) and -1 on error (EIO). */
@@ -216,11 +401,28 @@
     }
 #endif /* O_NDELAY */
 
-#if defined (__MINGW32__)
-  /* Use getch/_kbhit to check for available console input, in the same way
-     that we read it normally. */
-   chars_avail = isatty (tty) ? _kbhit () : 0;
-   result = 0;
+#if defined (_WIN32)
+     {
+       DWORD waitResult;
+       int is_tty = isatty (tty);
+
+       if (tty_reader_thread == NULL)
+         tty_reader_thread = CreateThread (NULL, 0, tty_reader_proc,
+             (LPVOID)is_tty, 0, NULL);
+       waitResult = WaitForMultipleObjects (1, &tty_reader_thread, FALSE, _keyboard_input_timeout/1000);
+       if (waitResult == WAIT_TIMEOUT)
+         return 0;
+       else if (waitResult == WAIT_OBJECT_0)
+         {
+           GetExitCodeThread (tty_reader_thread, (LPDWORD)&k);
+           CloseHandle(tty_reader_thread);
+           tty_reader_thread = NULL;
+           rl_stuff_char (k);
+           return 1;
+         }
+       else
+         return -1;
+     }
 #endif
 
   /* If there's nothing available, don't waste time trying to read
@@ -462,10 +664,33 @@
     {
       RL_CHECK_SIGNALS ();
 
-#if defined (__MINGW32__)
-      if (isatty (fileno (stream)))
-	return (getch ());
-#endif
+#if defined (_WIN32)
+        {
+          if (tty_reader_thread != NULL)
+            {
+              /* this may happen after resetting the event proc to NULL
+               * while the reader thread was still running
+               */
+              DWORD waitResult;
+
+              waitResult = WaitForSingleObject (tty_reader_thread, INFINITE);
+              if (waitResult == WAIT_OBJECT_0)
+                {
+                  int ch;
+
+                  GetExitCodeThread (tty_reader_thread, (LPDWORD)&ch);
+                  CloseHandle(tty_reader_thread);
+                  tty_reader_thread = NULL;
+                  return ch;
+                }
+              else
+                return (EOF);
+            }
+          else
+            return (win32_getch ());
+        }
+#endif /* _WIN32 */
+
       result = read (fileno (stream), &c, sizeof (unsigned char));
 
       if (result == sizeof (unsigned char))
diff --git a/nls.c b/nls.c
--- a/nls.c
+++ b/nls.c
@@ -45,6 +45,10 @@
 
 #include <ctype.h>
 
+#if defined (_WIN32)
+#include <windows.h>
+#endif
+
 #include "rldefs.h"
 #include "readline.h"
 #include "rlshell.h"
@@ -104,7 +108,14 @@
   char *lspec, *t;
 
   /* Set the LC_CTYPE locale category from environment variables. */
+#if defined (_WIN32)
+  char buf[16] = {0};
+  if (GetLocaleInfo (LOCALE_USER_DEFAULT, LOCALE_SABBREVLANGNAME, buf, 16))
+    lspec = buf;
+  else
+#else
   lspec = _rl_get_locale_var ("LC_CTYPE");
+#endif
   /* Since _rl_get_locale_var queries the right environment variables,
      we query the current locale settings with setlocale(), and, if
      that doesn't return anything, we set lspec to the empty string to
diff --git a/parens.c b/parens.c
--- a/parens.c
+++ b/parens.c
@@ -40,6 +40,10 @@
 
 #include "posixselect.h"
 
+#if defined (_WIN32)
+#include <windows.h>
+#endif
+
 #if defined (HAVE_STRING_H)
 #  include <string.h>
 #else /* !HAVE_STRING_H */
@@ -57,7 +61,7 @@
 
 /* Non-zero means try to blink the matching open parenthesis when the
    close parenthesis is inserted. */
-#if defined (HAVE_SELECT)
+#if defined (HAVE_SELECT) || defined (_WIN32)
 int rl_blink_matching_paren = 1;
 #else /* !HAVE_SELECT */
 int rl_blink_matching_paren = 0;
@@ -128,6 +132,23 @@
       (*rl_redisplay_function) ();
       ready = select (1, &readfds, (fd_set *)NULL, (fd_set *)NULL, &timer);
       rl_point = orig_point;
+#elif defined (_WIN32)
+      int orig_point, match_point, ready;
+
+      rl_insert (1, invoking_key);
+      (*rl_redisplay_function) ();
+      match_point =
+        find_matching_open (rl_line_buffer, rl_point - 2, invoking_key);
+
+      /* Emacs might message or ring the bell here, but I don't. */
+      if (match_point < 0)
+        return -1;
+
+      orig_point = rl_point;
+      rl_point = match_point;
+      (*rl_redisplay_function) ();
+      ready = (WaitForSingleObject (GetStdHandle(STD_INPUT_HANDLE), 500) == WAIT_OBJECT_0);
+      rl_point = orig_point;
 #else /* !HAVE_SELECT */
       _rl_insert_char (count, invoking_key);
 #endif /* !HAVE_SELECT */
diff --git a/readline.c b/readline.c
--- a/readline.c
+++ b/readline.c
@@ -95,6 +95,11 @@
 static int _rl_subseq_result PARAMS((int, Keymap, int, int));
 static int _rl_subseq_getchar PARAMS((int));
 
+#if defined(__MINGW32__)
+static int operate_and_get_next PARAMS((int, int));
+static int set_saved_history PARAMS((void));
+#endif
+
 /* **************************************************************** */
 /*								    */
 /*			Line editing input utility		    */
@@ -220,7 +225,11 @@
 
 /* The style of `bell' notification preferred.  This can be set to NO_BELL,
    AUDIBLE_BELL, or VISIBLE_BELL. */
+#if defined (_WIN32)
+int _rl_bell_preference = VISIBLE_BELL;
+#else
 int _rl_bell_preference = AUDIBLE_BELL;
+#endif
      
 /* String inserted into the line by rl_insert_comment (). */
 char *_rl_comment_begin;
@@ -998,6 +1007,11 @@
   /* Each line starts in insert mode (the default). */
   _rl_set_insert_mode (RL_IM_DEFAULT, 1);
 
+#if defined(__MINGW32__)
+  rl_add_defun ("operate-and-get-next", operate_and_get_next, -1);
+  rl_bind_key_if_unbound_in_map (CTRL ('O'), operate_and_get_next, emacs_standard_keymap);
+#endif
+
   return 0;
 }
 
@@ -1123,6 +1137,27 @@
     }
 }
 
+#if defined(_WIN32)
+static int
+_rl_update_terminal_size (count, key)
+    int count, key;
+{
+  int rows, cols, i, c;
+  char buf[128] = {0};
+
+  for (i=0; i<128; i++)
+    {
+      c = rl_read_key ();
+      buf[i] = (char)c;
+      if (c == '\0')
+        break;
+    }
+  sscanf (buf, "%dx%d", &cols, &rows);
+  sh_set_lines_and_columns (rows, cols);
+  rl_reset_screen_size ();
+}
+#endif
+
 /* Bind some common arrow key sequences in MAP. */
 static void
 bind_arrow_keys_internal (map)
@@ -1159,6 +1194,7 @@
   rl_bind_keyseq_if_unbound ("\340P", rl_get_next_history);
   rl_bind_keyseq_if_unbound ("\340M", rl_forward_char);
   rl_bind_keyseq_if_unbound ("\340K", rl_backward_char);
+  rl_bind_keyseq_if_unbound ("\033[X", _rl_update_terminal_size);
 #endif
 
   _rl_keymap = xkeymap;
@@ -1255,3 +1291,58 @@
 
   return (0);
 }
+
+/* 2011-Feb-18  Benjamin Lindner <lindnerb@users.sourceforge.net>
+   
+   Add the very cool feature of operate-and-get-next, and bind it to Ctrl-O
+   
+   Shamelessly copied verbatim from bashline.c from 
+   http://ftp.gnu.org/gnu/bash/bash-4.2.tar.gz
+ */
+
+#if defined(__MINGW32__)
+static rl_hook_func_t *old_rl_startup_hook = (rl_hook_func_t *)NULL;
+
+/* start verbatim copy from bashline.c */
+
+/* The equivalent of the Korn shell C-o operate-and-get-next-history-line
+   editing command. */
+static int saved_history_line_to_use = -1;
+
+static int
+set_saved_history ()
+{
+  if (saved_history_line_to_use >= 0)
+    rl_get_previous_history (history_length - saved_history_line_to_use, 0);
+  saved_history_line_to_use = -1;
+  rl_startup_hook = old_rl_startup_hook;
+  return (0);
+}
+
+static int
+operate_and_get_next (count, c)
+     int count, c;
+{
+  int where;
+
+  /* Accept the current line. */
+  rl_newline (1, c);
+
+  /* Find the current line, and find the next line to use. */
+  where = where_history ();
+
+  if ((history_is_stifled () && (history_length >= history_max_entries)) ||
+      (where >= history_length - 1))
+    saved_history_line_to_use = where;
+  else
+    saved_history_line_to_use = where + 1;
+
+  old_rl_startup_hook = rl_startup_hook;
+  rl_startup_hook = set_saved_history;
+
+  return 0;
+}
+
+/* end verbatim copy from bashline.c */
+
+#endif   /* defined(__MINGW32__) */
diff --git a/support/shobj-conf b/support/shobj-conf
--- a/support/shobj-conf
+++ b/support/shobj-conf
@@ -525,7 +525,7 @@
 	SHOBJ_LDFLAGS='-shared -Wl,--enable-auto-import -Wl,--enable-auto-image-base -Wl,--export-all -Wl,--out-implib=$(@).a'
 	SHLIB_LIBSUFF='dll'
 	SHLIB_LIBVERSION='$(SHLIB_DLLVERSION).$(SHLIB_LIBSUFF)'
-	SHLIB_LIBS='$(TERMCAP_LIB)'
+	SHLIB_LIBS='$(TERMCAP_LIB) -ladvapi32'
 
 	SHLIB_DOT=
 	# For official cygwin releases, DLLVERSION will be defined in the
diff --git a/terminal.c b/terminal.c
--- a/terminal.c
+++ b/terminal.c
@@ -429,8 +429,12 @@
   _rl_term_clrpag = _rl_term_cr = _rl_term_clreol = (char *)NULL;
   tty = rl_instream ? fileno (rl_instream) : 0;
 
+/* the win32 driver from ncurses expects either an empty TERM name
+   or "unknown". If it's empty, keep it empty (don't use "dumb") */
+#if !defined(__MINGW32__)
   if (term == 0)
     term = "dumb";
+#endif
 
   /* I've separated this out for later work on not calling tgetent at all
      if the calling application has supplied a custom redisplay function,
@@ -628,10 +632,12 @@
 {
   register int i;
 
+#if !defined (_WIN32)
   if (_rl_term_backspace)
     for (i = 0; i < count; i++)
       tputs (_rl_term_backspace, 1, _rl_output_character_function);
   else
+#endif
     for (i = 0; i < count; i++)
       putc ('\b', _rl_out_stream);
   return 0;
@@ -661,11 +667,16 @@
 	default:
 	  break;
 	case VISIBLE_BELL:
+#if defined (_WIN32)
+	  //MessageBeep(MB_OK);
+	  break;
+#else
 	  if (_rl_visible_bell)
 	    {
 	      tputs (_rl_visible_bell, 1, _rl_output_character_function);
 	      break;
 	    }
+#endif
 	  /* FALLTHROUGH */
 	case AUDIBLE_BELL:
 	  fprintf (stderr, "\007");
diff --git a/tilde.c b/tilde.c
--- a/tilde.c
+++ b/tilde.c
@@ -171,7 +171,7 @@
 
   for (i = 0; i < string_len; i++)
     {
-#if defined (__MSDOS__)
+#if defined (__MSDOS__) || defined (_WIN32)
       if (string[i] == '/' || string[i] == '\\' /* || !string[i] */)
 #else
       if (string[i] == '/' /* || !string[i] */)
@@ -271,7 +271,7 @@
   int i;
 
   ret = (char *)xmalloc (strlen (fname));
-#if defined (__MSDOS__)
+#if defined (__MSDOS__) || defined (_WIN32)
   for (i = 1; fname[i] && fname[i] != '/' && fname[i] != '\\'; i++)
 #else
   for (i = 1; fname[i] && fname[i] != '/'; i++)
