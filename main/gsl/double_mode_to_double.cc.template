DEFUN_DLD(GSL_OCTAVE_NAME, args, nargout, "\
function y = GSL_OCTAVE_NAME (x, MODE)\n\n\
GSL_FUNC_DOCSTRING
\n\
The second argument MODE must be an integer corresponding to\n\
\n\
0 = GSL_PREC_DOUBLE\n\
    Double-precision, a relative accuracy of approximately 2 * 10^-16.\n\
1 = GSL_PREC_SINGLE\n\
    Single-precision, a relative accuracy of approximately 10^-7.\n\
2 = GSL_PREC_APPROX\n\
    Approximate values, a relative accuracy of approximately 5 * 10^-4.\n\
\n\
This function is from the GNU Scientific Library,\n\
see http://www.gnu.org/software/gsl/ for documentation.\n\
")
{
    int i;
    
    gsl_set_error_handler (octave_gsl_errorhandler);
    
    if(args.length() != 2) {
	print_usage ("GSL_OCTAVE_NAME");
	return octave_value();
    }
    if(!args(0).is_real_type() || !args(1).is_real_type()) {
        error("The arguments must be real.");
	print_usage ("GSL_OCTAVE_NAME");	    
	return octave_value();
    }
    if(!args(1).is_scalar_type()) {
        error("The mode must be scalar.");
	print_usage ("GSL_OCTAVE_NAME");	    
	return octave_value();	
    }
    int mode = static_cast<int>((args(1).array_value())(0));
    if(mode < 0)
	mode = 0;
    else if(mode > 2)
	mode = 2;
    
    NDArray x = args(0).array_value();
    NDArray y(x.dims());
    int lx = x.length();
    if(nargout < 2) {
	for(i = 0; i < lx; i++) {
	    y.xelem(i) = GSL_FUNC_NAME (x.xelem(i), mode);
	}
	return octave_value(y);	    
    } else {
	NDArray err(x.dims());
	gsl_sf_result result;
	octave_value_list retval;
	for(i = 0; i < lx; i++) {
	    GSL_FUNC_NAME_e (x.xelem(i), mode, &result);
	    y.xelem(i) = result.val;
	    err.xelem(i) = result.err;
	}
	retval(0) = octave_value(y);
	retval.append(err);
	return retval;
    }

    return octave_value();

}

