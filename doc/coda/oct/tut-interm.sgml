<!--
     Copyright (C) 2001 Christoph L. Spiel
     Copyright (C) 2004 Stefan van der Walt <stefan@sun.ac.za>
     
     This file is part of "Da Coda Al Fine".
     
     Da Coda Al Fine (CODA) is free documentation; you can redistribute it
     and/or modify it under the terms of the GNU Free Documentation License as
     published by the Free Software Foundation; either version 1.1, or (at your
     option) any later version.
     
     CODA is distributed in the hope that it will be useful, but WITHOUT ANY
     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     FOR A PARTICULAR PURPOSE.  See the GNU Free Documentation License for more
     details.
     
     You should have received a copy of the GNU Free Documentation License
     along with CODA; see the file "gnufdl.sgml".  If not, write to the Free
     Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
     USA.
-->


<sect2 id = "sect-oct-tutorial-spice">
<title>Spicing up <function>matpow</function></title>

<para>
    The keen reader will have noticed that <function>matpow</function> is
    highly vulnerable to unexpected input.  We take care of this deficiency in
    <xref linkend = "sect-oct-tutorial-spice-input-check"></xref>.
    Also, the documentation is not ready for prime time, something we
    attend to in <xref linkend = "sect-oct-tutorial-spice-texinfo"></xref>.
</para>

<sect3 id = "sect-oct-tutorial-spice-input-check">
<title>Input parameter checking</title>

<para>
    Why do we need parameter checking at all?  A rule of thumb is to
    perform a <emphasis>complete</emphasis> parameter checking on
</para>

<itemizedlist>
    <listitem>
        <para>
            every function that is exposed to the user (e.g. at Octave's
            interpreter level), i.e. for every function created with <symbol
            role = "macro">DEFUN_DLD</symbol>, or
        </para>
    </listitem>

    <listitem>
        <para>
            any function that might be used in a different context than the
            writer intended  Functions that are used only internally do
            not require full parameter checking.
        </para>
    </listitem>
</itemizedlist>

<para>
    One problem which arises frequently with parameter checking of
    (interfacing) functions is that the checks easily take up more space than
    the routine itself, thereby distracting the reader from the function's
    original purpose.  Often, including all the checks into the main function
    bloats it beyond the desired maintainability.  Therefore, we have to take
    precautions against these problems by consistently factoring out all
    parameter checks.
</para>

<para> <!-- reference to: Fowler "Refactoring" -->
    The rule of thumb here is to group logically related tests together in
    separate functions.  The testing functions get the original functions'
    arguments <emphasis>by constant reference</emphasis> and return a boolean
    value. <emphasis>Constant referencing</emphasis> avoids any constructor
    calls and &ndash; in addition to that &ndash; protects the arguments
    against modification.  In our example a single test function is enough:
</para>

<programlisting role = "c++">
static bool any_bad_argument(const octave_value_list&amp; args);
</programlisting>

<para>
    <function>any_bad_argument</function> prints a detailed message, raises an
    Octave error, and returns <constant>true</constant> if the arguments fail
    any test; otherwise it returns <constant>false</constant> and we can
    continue processing.  The only thing we have to change in
    <function>matpow</function> is to add a call to
    <function>any_bad_argument</function> and on failure to return an Octave-void
    value, i.e. an empty <type>octave_value_list</type>.  The first few lines
    of <function>matpow</function> then take the following form:
</para>

<programlisting role = "c++">
DEFUN_DLD(matpow, args, ,
          "Return b = a^n for square matrix a, and non-negative, integral n.")
{
    if (any_bad_argument(args))
        return octave_value_list();

    const int n = args(1).int_value();

    <lineannotation>-- rest of matpow is unchanged</lineannotation>
}
</programlisting>

<para>
    As we are convinced that we have to check the input arguments, the question
    is how to do the checks.
</para>

<indexterm>
    <primary>tests</primary>
    <secondary>ordering of</secondary>
</indexterm>

<tip>
    <title>Ordering of Tests</title>

    <para>
        The correct ordering of tests is essential!
    </para>

    <orderedlist numeration = "arabic" spacing = "compact">
        <listitem> <!-- 1 -->
            <para>
                Actual number of arguments
            </para>
        </listitem>

        <listitem> <!-- 2 -->
            <para>
                Type of argument
            </para>
        </listitem>

        <listitem> <!-- 3 -->
            <para>
                Size of argument (where applicable)
            </para>
        </listitem>

        <listitem> <!-- 4 -->
            <para>
                Range of argument (where applicable and necessary)
            </para>
        </listitem>

        <listitem> <!-- 5 -->
            <para>
                Inter-argument relations (if necessary)
            </para>
        </listitem>
    </orderedlist>

    <para>
        Item&nbsp;1 always goes first.  Items&nbsp;2-4 usually repeat for each
        of the arguments.  The final tests check the relations between the
        arguments, i.e., belong to Item&nbsp;5.
    </para>
</tip>

<para>
    Octave supplies the user with all necessary type- and size-testing
    functions.  The type-tests (defined in OCT/src/<filename class =
    "headerfile">ov-base.h</filename>) share the common
    prefix&nbsp;<literal>is_</literal>.  Here are the most commonly used:
</para>

<classsynopsis language = "cpp">
    <ooclass>
        <classname>octave_base_value</classname>
    </ooclass>

    <ooclass> 
        <modifier>public</modifier>
        <classname>foo_value</classname>
    </ooclass>                          

    <!--
    <classsynopsisinfo>
        #include <filename class = "headerfile">foo.h</filename>
    </classsynopsisinfo>
    -->

    <methodsynopsis>
        <modifier>public</modifier>

        <type>bool</type> <methodname>is_real_scalar</methodname>

        <void></void>

        <modifier>const</modifier>
    </methodsynopsis>

    <methodsynopsis>
        <modifier>public</modifier>

        <type>bool</type> <methodname>is_complex_scalar</methodname>

        <void></void>

        <modifier>const</modifier>
    </methodsynopsis>

    <methodsynopsis>
        <modifier>public</modifier>

        <type>bool</type> <methodname>is_real_matrix</methodname>

        <void></void>

        <modifier>const</modifier>
    </methodsynopsis>

    <methodsynopsis>
        <modifier>public</modifier>

        <type>bool</type> <methodname>is_complex_matrix</methodname>

        <void></void>

        <modifier>const</modifier>
    </methodsynopsis>

</classsynopsis>

<para>
    To examine the sizes of different Octave objects, the following
    methods prove useful:
</para>

<classsynopsis language = "cpp">
    <ooclass>
        <classname>octave_list</classname>
    </ooclass>

    <ooclass> 
        <modifier>public</modifier>
        <classname>octave_base_value</classname>
    </ooclass>                          

    <methodsynopsis>
        <modifier>public</modifier>

        <type>int</type> <methodname>length</methodname>

        <void></void>

        <modifier>const</modifier>
    </methodsynopsis>
</classsynopsis>

<classsynopsis language = "cpp">
    <ooclass>
        <classname>octave_base_matrix</classname>
    </ooclass>

    <ooclass> 
        <modifier>public</modifier>
        <classname>octave_base_value</classname>
    </ooclass>                          

    <methodsynopsis>
        <modifier>public</modifier>

        <type>int</type> <methodname>rows</methodname>

        <void></void>

        <modifier>const</modifier>
    </methodsynopsis>

    <methodsynopsis>
        <modifier>public</modifier>

        <type>int</type> <methodname>columns</methodname>

        <void></void>

        <modifier>const</modifier>
    </methodsynopsis>

    <methodsynopsis>
        <modifier>public</modifier>

        <type>int</type> <methodname>length</methodname>

        <void></void>

        <modifier>const</modifier>
    </methodsynopsis>
</classsynopsis>

<para>
    Remember that the methods available depend on the underlying
    type.  For example, a ColumnVector only has a length (OCT/src/<filename class = "headerfile">ov-list.h</filename>),
    whereas a Matrix has a number of rows and columns
    (OCT/src/<filename class = "headerfile">ov-base-mat.h</filename>).
</para>

<para>
    We have all the knowledge we need to write the argument testing function to
    augment <function>matpow</function>.
</para>

<programlisting role = "c++">
static bool
any_bad_argument(const octave_value_list&amp; args)
{
    if (!args(0).is_real_matrix())
    {
        error("matpow: expecting base A (arg 1) to be a real matrix");
        return true;
    }

    if (args(0).rows() != args(0).columns())
    {
        error("matpow: expecting base A (arg 1) to be a square matrix");
        return true;
    }

    if (!args(1).is_real_scalar())
    {
        error("matpow: exponent N (arg 2) must be a real scalar.");
        return true;
    }

    if (args(1).scalar_value() &lt; 0.0)
    {
        error("matpow: exponent N (arg 2) must be non-negative.");
        return true;
    }

    if (floor(args(1).scalar_value()) != args(1).scalar_value())
    {
        error("matpow: exponent N (arg 2) must be an integer.");
        return true;
    }

    return false;
}
</programlisting>

<para>
    Out final duty is to update the test-frame and run it.  For brevity, we
    only list the new tests in <filename>testmp.m</filename>
</para>

<programlisting role = "octave">

###
### The following tests should trigger the error exits.
###

## number of arguments

unit_test_err("error exit, too few arguments",
              "matpow:", "matpow([1,1; 1,1])");
                                                                                                                            
unit_test_err("error exit, too few arguments",
              "matpow:", "matpow()");
                                                                                                                            
unit_test_err("error exit, too many arguments",
              "matpow:", "matpow([1,1; 1 1], 2, 1)");

## argument type and size
                                                                                                                           
unit_test_err("error exit, A not a matrix",
              "matpow:", "matpow(1, 1)");
                                                                                                                            
unit_test_err("error exit, A not a square matrix",
              "matpow:", "matpow([1 2 3; 4 5 6], 1)");
                                                                                                                            
unit_test_err("error exit, N not a real scalar(here: complex)",
              "matpow:", "matpow(a, 1+i)");
                                                                                                                            
unit_test_err("error exit, N not a real scalar(here: non-scalar)",
              "matpow:", "matpow(a, ones(2,2))");
                                                                                                                            
unit_test_err("error exit, N negative",
              "matpow:", "matpow(a, -1)");
                                                                                                                            
unit_test_err("error exit, N non-integral",
              "matpow:", "matpow(2.5)");

</programlisting>

<screen>
<prompt>$</prompt> <userinput>octave -q test_matpow.m</userinput>
................
# of testcases attempted   16
# of expected passes       16
# of expected failures     0
# of unexpected passes     0
# of unexpected failures   0
# of unresolved testcases  0
 
Unit testing completed successfully!
</screen>
</sect3>

<sect3 id = "sect-oct-tutorial-spice-texinfo">
<title>Texinfo documentation strings</title>

<para>
    Our much improved <function>matpow</function> still carries around the poor
    documentation string:
</para>

<literallayout>
"Return b = a^n for square matrix a, and non-negative, integral n."
</literallayout>

<para>
    Let us improve on this one!  &octave-app; supports documentation strings
    &ndash; docstrings for short &ndash; in Texinfo format.  The effect on the
    online documentation will be small, but the appearance of printed
    documentation will be greatly improved.
</para>

<para>
    The fundamental building block of Texinfo documentation strings is the
    Texinfo-macro&nbsp;<literal>@deftypefn</literal>, which takes two
    arguments: The class the function is in, and the function's signature.  For
    functions defined with <literal>DEFUN_DLD</literal>, the class is
    <literal>Loadable Function</literal>.  A skeletal Texinfo docstring
    therefore looks like this:
</para>

<example id = "ex-docstring-texinfo-skeleton">
    <title>Skeletal Texinfo Docstring</title>

    <programlisting role = "texinfo">
-*- texinfo -*- <co id = "co-texi-id"></co>
@deftypefn{Loadable Function}<co id = "co-texi-deftypefn"></co> {<replaceable>return_values</replaceable> =} <replaceable>function_name</replaceable>(<replaceable>arguments</replaceable>)

@cindex <replaceable>index term</replaceable> <co id = "co-texi-cindex"></co>

<replaceable>Help text in Texinfo format...</replaceable>
@end deftypefn
    </programlisting>

    <calloutlist>
        <callout arearefs = "co-texi-id">
            <para> 
                Tell the parser that the doc-string is in Texinfo format.
            </para> 
        </callout>

        <callout arearefs = "co-texi-deftypefn">
            <para> 
                <literal>@deftypefn{<replaceable>class</replaceable>} ... @end
                deftypefn</literal> encloses the whole doc-string, like a LaTeX
                environment or a DocBook element does.
            </para> 
        </callout>

        <callout arearefs = "co-texi-cindex">
            <para> 
                <literal>@cindex <replaceable>index
                entry</replaceable></literal> generates an index entry.  It can
                be used multiple times.
            </para> 
        </callout>
    </calloutlist>
</example>

<para>
    Texinfo has several macros which control the markup.  In the group of
    format changing commands, we note
    <literal>@var{<replaceable>variable_name</replaceable>}</literal>, and
    <literal>@code{<replaceable>code_piece</replaceable>}</literal>.  The
    Texinfo format has been designed to generate output for online viewing with
    text-terminals as well as generating high-quality printed output.  To these
    ends, Texinfo has commands which control the diversion of parts of the
    document into a particular output processor.  Two formats are of
    importance: info and TeX.  The first is selected with
</para>

<programlisting role = "texinfo">
@ifinfo
<replaceable>text for info only</replaceable>
@end ifinfo
</programlisting>

<para>
    the latter with
</para>

<programlisting role = "texinfo">
@iftex
@tex
<replaceable>text for TeX only</replaceable>
@end tex
@end iftex
</programlisting>

<para>
    If no specific output processor is chosen, by default, the test goes into
    both (or, more precisely: every) output processors.  Usually, neither
    <literal>@ifinfo</literal>, nor <literal>@iftex</literal> appear alone, but
    always in pairs, as the same information must be conveyed in every output
    format.
</para>

<example id = "ex-docstring-texinfo">
    <title>Documentation string in Texinfo format</title>

    <programlisting role = "texinfo">
-*- texinfo -*-
@deftypefn{Loadable Function} {@var{b} =} matpow(@var{a}, @var{n})

@cindex matrix power

Return matrix @var{a} raised to the @var{n}-th power.  Matrix @var{a} is
a square matrix and @var{n} a non-negative integer.
@iftex <co id =  "co-texi-iftex"></co>
@tex <co id = "co-texi-tex"></co>
$n = 0$
@end tex
@end iftex
@ifinfo <co id = "co-texi-ifinfo"></co>
n = 0
@end ifinfo
is explicitly allowed, returning a unit-matrix of the same size as
@var{a}.

Note: @code{matpow} <co id = "co-texi-code"></co> duplicates part of the functionality of the built-in
exponentiation operator
@iftex
@tex
``$\wedge$''.
@end tex
@end iftex
@ifinfo
`@code{^}'.
@end ifinfo


Example:
@example <co id = "co-texi-example"></co>
matpow([1, 2; 3, 4], 4)
@end example
@noindent
returns
@example
ans =

  199  290
  435  634
@end example

The algorithm takes
@iftex
@tex
$\lfloor \log_{2}(n) \rfloor$
@end tex
@end iftex
@ifinfo
floor(log2(n))
@end ifinfo
matrix multiplications to compute the result.
@end deftypefn
    </programlisting>

    <calloutlist>
        <callout arearefs = "co-texi-iftex">
            <para> 
                <literal>@iftex ... @end iftex</literal> selects text for
                conditional inclusion.  Only if the text is processed with an
                Tex the included section will be processed.
            </para> 
        </callout>

        <callout arearefs = "co-texi-tex">
            <para> 
                <literal>@tex ... @end tex</literal> wraps parts of the text
                that will be fed through TeX.
            </para> 
        </callout>

        <callout arearefs = "co-texi-ifinfo">
            <para> 
                <literal>@ifdoc ... @end ifdoc</literal> selects text for
                conditional inclusion.  Only if the text is processed with an
                info-tool the included section will be processed.
            </para> 
        </callout>

        <callout arearefs = "co-texi-code">
            <para> 
                <literal>@code{<replaceable>code
                sequence</replaceable>}</literal> marks up a a code sequence.
            </para> 
        </callout>

        <callout arearefs = "co-texi-example">
            <para> 
                <literal>@example ... @end example</literal> wraps examples.
            </para> 
        </callout>

    </calloutlist>
</example>

<para>
    For further information about Texinfo consult the Texinfo documentation.
    For TeX-beginners we recommend <quote>The Not So Short Introduction to
    LaTeX</quote> by Tobias Oetiker et. al.
</para>

<para>
    One thing we held back is the <emphasis></emphasis> true appearance of a
    Texinfo docstring &ndash; mainly because it looks so ugly.  The
    C++-language imposes the constraint that the docstring must be a
    string-constant.  Moreover, because <literal>DEFUN_DLD</literal> is a
    macro, every line-end has to be escaped with a backslash.  The backslash
    does not insert any whitespace and TeX separates paragraphs with empty
    lines, so that we have to put in new-lines as line-separators.  Thus, the
    Texinfo docstring in source form has each line end decorated with
    <quote><literal>\n\</literal></quote>.
</para>

<programlisting role = "c++">
DEFUN_DLD(matpow, args, ,
          "-*- texinfo -*-\n\
@deftypefn{Loadable Function} {@var{b}} = matpow(@var{a}, @var{n})\n\
\n\
@cindex matrix power\n\
\n\
Return matrix @var{a} raised to the @var{n}-th power.  Matrix @var{a} is\n\
a square matrix, and @var{n} a non-negative integer.\n\
...")
</programlisting>

<para>
    At least the formatted versions look much better.  The info-version, which
    will be used in Octave's online help has approximately the following
    appearance:
</para>

<screen>
b = matpow(a, n)                                        Loadable Function
Return matrix a raised to the n-th power. Matrix a is a square matrix, and
n a non-negative integer. n = 0 is explicitely allowed, returning a
unit-matrix of the same size as a.

Note: matpow duplicates part of the functionality of the built-in
exponentiation operator `^'.

Example:
matpow([1, 2; 3, 4], 4)

returns
ans =

  199  290
  435  634

The algorithm takes floor(log2(n)) matrix multiplications to compute the
result.
</screen>

<para>
    whereas the TeX-version will look like this:
</para>

<mediaobject>
    <imageobject>
        <imagedata fileref = "matpow" format = "EPS"></imagedata>
    </imageobject>

    <imageobject>
        <imagedata fileref = "matpow.png" format = "PNG"></imagedata>
    </imageobject>

    <textobject>
        <phrase>
            Docstring of <function>matpow</function> rendered with TeX
        </phrase>
    </textobject>

    <caption>
        <para>
            Docstring of <function>matpow</function> after rendering with TeX.
            Note the differences between the info-version and the TeX-version,
            that have been introduced with <literal>@ifinfo</literal> and
            <literal>@iftex</literal>.
        </para>
    </caption>
</mediaobject>
</sect3>
</sect2>
