/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.34
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIG_name_d      "sqlite3"
#define SWIG_name        sqlite3

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <octave/oct.h>
#include <octave/parse.h>
#include <octave/ov-fcn-handle.h>
#include <octave/Cell.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13





SWIGRUNTIME bool SWIG_check_num_args(const char *func_name, int num_args, int max_args, int min_args, int varargs) {
  if (num_args > max_args && !varargs)
    error("function %s takes at most %i arguments", func_name, max_args);
  else if (num_args < min_args)
    error("function %s requires at least %i arguments", func_name, max_args);
  else
    return true;
  return false;
}

SWIGRUNTIME octave_value_list *SWIG_Octave_AppendOutput(octave_value_list *ovl, const octave_value &ov) {
  ovl->append(ov);
  return ovl;
}

SWIGRUNTIME octave_value SWIG_ErrorType(int code) {
  switch (code) {
  case SWIG_MemoryError:
    return "SWIG_MemoryError";
  case SWIG_IOError:
    return "SWIG_IOError";
  case SWIG_RuntimeError:
    return "SWIG_RuntimeError";
  case SWIG_IndexError:
    return "SWIG_IndexError";
  case SWIG_TypeError:
    return "SWIG_TypeError";
  case SWIG_DivisionByZero:
    return "SWIG_DivisionByZero";
  case SWIG_OverflowError:
    return "SWIG_OverflowError";
  case SWIG_SyntaxError:
    return "SWIG_SyntaxError";
  case SWIG_ValueError:
    return "SWIG_ValueError";
  case SWIG_SystemError:
    return "SWIG_SystemError";
  case SWIG_AttributeError:
    return "SWIG_AttributeError";
  }
  return "SWIG unknown error";
}

SWIGRUNTIME octave_value SWIG_Error(int code, const char *msg) {
  octave_value type(SWIG_ErrorType(code));
  std::string r = msg;
  r += " (" + type.string_value() + ")";
  error(r.c_str());
  return octave_value(r);
}

#define SWIG_fail                                       goto fail

#define SWIG_Octave_ConvertPtr(obj, pptr, type, flags)  SWIG_Octave_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Octave_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Octave_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Octave_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Octave_NewPointerObj(ptr, type, flags)
#define swig_owntype                                    int

#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Octave_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Octave_NewPackedObj(ptr, sz, type)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Octave_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Octave_NewPackedObj(ptr, sz, type)

#define SWIG_GetModule(clientdata) SWIG_Octave_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) SWIG_Octave_SetModule(clientdata,pointer);
#define SWIG_MODULE_CLIENTDATA_TYPE void*

#define Octave_Error_Occurred() 0
#define SWIG_Octave_AddErrorMsg(msg) {;}

// For backward compatibility only
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      0

SWIGRUNTIME swig_module_info *SWIG_Octave_GetModule(void *clientdata) {
  octave_value tmp = get_global_value("__SWIG_MODULE__", true);
  if (!tmp.is_defined() || !tmp.is_uint64_type())
    return 0;
  unsigned long r = tmp.uint64_scalar_value().value();
  assert(sizeof(r) == sizeof(swig_module_info *));
  return (swig_module_info *) r;
}

SWIGRUNTIME void SWIG_Octave_SetModule(void *clientdata, swig_module_info *pointer) {
  unsigned long r = (unsigned long) pointer;
  assert(sizeof(r) == sizeof(swig_module_info *));
  const char *module_var = "__SWIG_MODULE__";
  link_to_global_variable(curr_sym_tab->lookup(module_var, true));
  set_global_value(module_var, octave_uint64(r));
}

// Runtime API implementation

#include <map>
#include <vector>
#include <string>
#include <ext/hash_map>

namespace {

  typedef octave_value_list(*octave_func) (const octave_value_list &, int);
  class octave_swig_type;

  namespace Swig {
    class Director;

    void swig_register_director(octave_swig_type *self, void *ptr, Director *d);
    void swig_director_destroyed(octave_swig_type *self, Director *d);
    void swig_director_set_self(Director *d, octave_swig_type *self);

    octave_base_value *swig_value_ref(octave_swig_type *ost);
    octave_swig_type *swig_value_deref(const octave_value &ov);
    octave_swig_type *swig_value_deref(const octave_base_value &ov);

    struct hash_voidptr {
      int operator() (void *p) const {
	return (int) p;
      }
    };
    typedef __gnu_cxx::hash_map < void *, Director *, hash_voidptr > rtdir_map;

    using namespace __gnu_cxx;
    SWIGINTERN rtdir_map &get_rtdir_map() {
      static swig_module_info *module = 0;
      if (!module)
	module = SWIG_GetModule(0);
      assert(module);
      if (!module->clientdata)
	module->clientdata = new rtdir_map;
      return *(rtdir_map *) module->clientdata;
    }

    SWIGINTERNINLINE void set_rtdir(void *vptr, Director *d) {
      get_rtdir_map()[vptr] = d;
    }

    SWIGINTERNINLINE void erase_rtdir(void *vptr) {
      get_rtdir_map().erase(vptr);
    }

    SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
      rtdir_map::const_iterator pos = get_rtdir_map().find(vptr);
      Director *rtdir = (pos != get_rtdir_map().end())? pos->second : 0;
      return rtdir;
    }
  }

  struct swig_octave_member {
    const char *name;
    octave_func method;
    octave_func get_method;
    octave_func set_method;
    int flags;			// 1 static, 2 global
    const char *doc;
    bool is_static() const {
      return flags &1;
    } bool is_global() const {
      return flags &2;
    }
  };

  struct swig_octave_class {
    const char *name;
    swig_type_info **type;
    int director;
    octave_func constructor;
    octave_func destructor;
    const swig_octave_member *members;
    const char **base_names;
    const swig_type_info **base;
  };

  // octave_swig_type plays the role of both the shadow class and the class 
  // representation within Octave, since there is no support for classes.
  //
  // These should really be decoupled, with the class support added to Octave
  // and the shadow class given by an m-file script. That would dramatically 
  // reduce the runtime complexity, and be more in line w/ other modules.

  class octave_swig_type:public octave_base_value {
    struct cpp_ptr {
      void *ptr;
      bool destroyed;
      cpp_ptr(void *_ptr):ptr(_ptr), destroyed(false) {
      }};
    typedef std::pair < const swig_type_info *, cpp_ptr > type_ptr_pair;

    swig_module_info *module;

    const swig_type_info *construct_type;	// type of special type object
    std::vector < type_ptr_pair > types;	// our c++ base classes
    int own;			// whether we call c++ destructors when we die

    typedef std::pair < const swig_octave_member *, octave_value > member_value_pair;
    typedef std::map < std::string, member_value_pair > member_map;
    member_map members;

    const swig_octave_member *find_member(const swig_type_info *type, const std::string &name) {
      if (!type->clientdata)
	return 0;
      swig_octave_class *c = (swig_octave_class *) type->clientdata;
      const swig_octave_member *m;
      for (m = c->members; m->name; ++m)
	if (m->name == name)
	  return m;
      for (int j = 0; c->base_names[j]; ++j) {
	if (!c->base[j]) {
	  if (!module)
	    module = SWIG_GetModule(0);
	  assert(module);
	  c->base[j] = SWIG_MangledTypeQueryModule(module, module, c->base_names[j]);
	}
	if (!c->base[j])
	  return 0;
	if ((m = find_member(c->base[j], name)))
	  return m;
      }
      return 0;
    }

    member_value_pair *find_member(const std::string &name, bool insert_if_not_found) {
      member_map::iterator it = members.find(name);
      if (it != members.end())
	return &it->second;
      const swig_octave_member *m;
      for (unsigned int j = 0; j < types.size(); ++j)
	if ((m = find_member(types[j].first, name)))
	  return &members.insert(std::make_pair(name, std::make_pair(m, octave_value()))).first->second;
      if (!insert_if_not_found)
	return 0;
      return &members[name];
    }

    const swig_type_info *find_base(const std::string &name, const swig_type_info *base) {
      if (!base) {
	for (unsigned int j = 0; j < types.size(); ++j) {
	  assert(types[j].first->clientdata);
	  swig_octave_class *cj = (swig_octave_class *) types[j].first->clientdata;
	  if (cj->name == name)
	    return types[j].first;
	}
	return 0;
      }
      assert(base->clientdata);
      swig_octave_class *c = (swig_octave_class *) base->clientdata;
      for (int j = 0; c->base_names[j]; ++j) {
	if (!c->base[j]) {
	  if (!module)
	    module = SWIG_GetModule(0);
	  assert(module);
	  c->base[j] = SWIG_MangledTypeQueryModule(module, module, c->base_names[j]);
	}
	if (!c->base[j])
	  return 0;
	assert(c->base[j]->clientdata);
	swig_octave_class *cj = (swig_octave_class *) c->base[j]->clientdata;
	if (cj->name == name)
	  return c->base[j];
      }
      return 0;
    }

    octave_value_list member_invoke(member_value_pair *m, const octave_value_list &args, int nargout) {
      if (m->second.is_defined())
	return m->second.subsref("(", std::list < octave_value_list > (1, args), nargout);
      else if (m->first && m->first->method)
	return m->first->method(args, nargout);
      error("member not defined or not invocable");
      return octave_value_list();
    }

    bool dispatch_unary_op(const std::string &symbol, octave_value &ret) {
      member_value_pair *m = find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(as_value());
      octave_value_list argout(member_invoke(m, args, 1));
      if (argout.length() < 1)
	return false;
      ret = argout(0);
      return true;
    }

    bool dispatch_binary_op(const std::string &symbol, const octave_base_value &rhs, octave_value &ret) {
      member_value_pair *m = find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(as_value());
      args.append(make_value_hack(rhs));
      octave_value_list argout(member_invoke(m, args, 1));
      if (argout.length() < 1)
	return false;
      ret = argout(0);
      return true;
    }

    bool dispatch_index_op(const std::string &symbol, const octave_value_list &rhs, octave_value_list &ret) {
      member_value_pair *m = find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(as_value());
      args.append(rhs);
      octave_value_list argout(member_invoke(m, args, 1));
      if (argout.length() >= 1)
	ret = argout(0);
      return true;
    }

    octave_value_list member_deref(member_value_pair *m, const octave_value_list &args) {
      if (m->second.is_defined())
	return m->second;
      else if (m->first) {
	if (m->first->get_method)
	  return m->first->get_method(args, 1);
	else if (m->first->method)
	  return octave_value(new octave_builtin(m->first->method));
      }
      error("undefined member");
      return octave_value_list();
    }

    static octave_value make_value_hack(const octave_base_value &x) {
      ((octave_swig_type &) x).count++;
      return octave_value((octave_base_value *) &x);
    }

    octave_swig_type(const octave_swig_type &x);
    octave_swig_type &operator=(const octave_swig_type &rhs);
  public:

    octave_swig_type(void *_ptr = 0, const swig_type_info *_type = 0, int _own = 0)
      :	module(0), construct_type(_ptr ? 0 : _type), own(_own) {
      if (_type || _ptr)
	types.push_back(std::make_pair(_type, _ptr));
      if (_ptr) {
	Swig::Director *d = Swig::get_rtdir(_ptr);
	if (d)
	  Swig::swig_director_set_self(d, this);
      }
    }

    ~octave_swig_type() {
      if (own) {
	++count;
	for (unsigned int j = 0; j < types.size(); ++j) {
	  if (!types[j].first || !types[j].first->clientdata)
	    continue;
	  swig_octave_class *c = (swig_octave_class *) types[j].first->clientdata;
	  if (c->destructor && !types[j].second.destroyed && types[j].second.ptr) {
	    c->destructor(as_value(), 0);
	  }
	}
      }
      for (unsigned int j = 0; j < types.size(); ++j)
	Swig::erase_rtdir(types[j].second.ptr);
    }

    octave_value as_value() {
      ++count;
      return Swig::swig_value_ref(this);
    }

    void incref() {
      ++count;
    }

    void decref() {
      if (!--count)
	delete this;
    }

    long swig_this() const {
      if (!types.size())
	return (long) this;
      return (long) types[0].second.ptr;
    }

    std::string swig_type_name() const {
      // * need some way to manually name subclasses.
      // * eg optional first arg to subclass(), or named_subclass()
      std::string ret;
      for (unsigned int j = 0; j < types.size(); ++j) {
	if (j)
	  ret += "_";
	if (types[j].first->clientdata) {
	  swig_octave_class *c = (swig_octave_class *) types[j].first->clientdata;
	  ret += c->name;
	} else
	  ret += types[j].first->name;
      }
      return ret;
    }

    void merge(octave_swig_type &rhs) {
      rhs.own = 0;
      for (unsigned int j = 0; j < rhs.types.size(); ++j) {
	assert(!rhs.types[j].second.destroyed);
	Swig::Director *d = Swig::get_rtdir(rhs.types[j].second.ptr);
	if (d)
	  Swig::swig_director_set_self(d, this);
      }
      types.insert(types.end(), rhs.types.begin(), rhs.types.end());
      members.insert(rhs.members.begin(), rhs.members.end());
      rhs.types.clear();
      rhs.members.clear();
    }

    void install_global() {
      for (member_map::const_iterator it = members.begin(); it != members.end(); ++it) {
	if (it->second.first && it->second.first->method)
	  install_builtin_function(it->second.first->method, it->first,
				   /*it->second.first->doc?it->second.first->doc:*/std::string());
	else if (it->second.second.is_defined()) {
	  link_to_global_variable(curr_sym_tab->lookup(it->first, true));
	  set_global_value(it->first, it->second.second);
	}
      }
    }

    void *cast(swig_type_info *type, int *_own, int flags) {
      if (_own)
	*_own = own;
      if (flags &SWIG_POINTER_DISOWN)
	own = 0;
      if (!type && types.size())
	return types[0].second.ptr;
      for (unsigned int j = 0; j < types.size(); ++j)
	if (type == types[j].first)
	  return types[j].second.ptr;
      for (unsigned int j = 0; j < types.size(); ++j) {
	swig_cast_info *tc = SWIG_TypeCheck(types[j].first->name, type);
	if (!tc)
	  continue;
	int newmemory = 0;
	void *vptr = SWIG_TypeCast(tc, types[j].second.ptr, &newmemory);
	assert(!newmemory);	// newmemory handling not yet implemented
	return vptr;
      }
      return 0;
    }

    bool is_owned() const {
      return own;
    }

    void director_destroyed(Swig::Director *d) {
      bool found = false;
      for (unsigned int j = 0; j < types.size(); ++j) {
	Swig::Director *dj = Swig::get_rtdir(types[j].second.ptr);
	if (dj == d) {
	  types[j].second.destroyed = true;
	  found = true;
	}
      }
      assert(found);
    }

    void assign(const std::string &name, const octave_value &ov) {
      members[name] = std::make_pair((const swig_octave_member *) 0, ov);
    }

    void assign(const std::string &name, const swig_octave_member *m) {
      members[name] = std::make_pair(m, octave_value());
    }

    octave_base_value *clone() const {
      // pass-by-value is probably not desired, and is harder;
      // requires calling copy constructors of contained types etc.
      assert(0);
      *(int *) 0 = 0;
      return 0;
    }

    octave_base_value *empty_clone() const {
      return new octave_swig_type();
    }

    bool is_defined() const {
      return true;
    }

    virtual bool is_map() const {
      return true;
    }

    virtual octave_value subsref(const std::string &ops, const std::list < octave_value_list > &idx) {
      octave_value_list ovl = subsref(ops, idx, 1);
      return ovl.length()? ovl(0) : octave_value();
    }

    virtual octave_value_list subsref(const std::string &ops, const std::list < octave_value_list > &idx, int nargout) {
      assert(ops.size() > 0);
      assert(ops.size() == idx.size());

      std::list < octave_value_list >::const_iterator idx_it = idx.begin();
      int skip = 0;
      octave_value_list sub_ovl;

      // constructor invocation
      if (ops[skip] == '(' && construct_type) {
	assert(construct_type->clientdata);
	swig_octave_class *c = (swig_octave_class *) construct_type->clientdata;
	if (!c->constructor) {
	  error("cannot create instance");
	  return octave_value_list();
	}
	octave_value_list args;
	if (c->director)
	  args.append(Swig::swig_value_ref(new octave_swig_type(this, 0, 0)));
	args.append(*idx_it++);
	++skip;
	sub_ovl = c->constructor(args, nargout);
      }
      // member dereference or invocation
      else if (ops[skip] == '.') {
	std::string subname;
	const swig_type_info *base = 0;	// eg, a.base.base_cpp_mem
	for (;;) {
	  octave_value_list subname_ovl(*idx_it++);
	  ++skip;
	  assert(subname_ovl.length() == 1 && subname_ovl(0).is_string());
	  subname = subname_ovl(0).string_value();

	  const swig_type_info *next_base = find_base(subname, base);
	  if (!next_base || skip >= (int) ops.size() || ops[skip] != '.')
	    break;
	  base = next_base;
	}

	member_value_pair tmp, *m = &tmp;
	if (!base || !(m->first = find_member(base, subname)))
	  m = find_member(subname, false);
	if (!m) {
	  error("member not found");
	  return octave_value_list();
	}

	octave_value_list args;
	if (!m->first || (!m->first->is_static() && !m->first->is_global()))
	  args.append(as_value());
	if (skip < (int) ops.size() && ops[skip] == '(' && ((m->first && m->first->method) || m->second.is_function() || m->second.is_function_handle())) {
	  args.append(*idx_it++);
	  ++skip;
	  sub_ovl = member_invoke(m, args, nargout);
	} else {
	  sub_ovl = member_deref(m, args);
	}
      }
      // index operator
      else {
	if (ops[skip] == '(' || ops[skip] == '{') {
	  const char *op_name = ops[skip] == '(' ? "__paren" : "__brace";
	  octave_value_list args;
	  args.append(*idx_it++);
	  ++skip;
	  if (!dispatch_index_op(op_name, args, sub_ovl)) {
	    error("error evaluating index operator");
	    return octave_value_list();
	  }
	} else {
	  error("unsupported subsref");
	  return octave_value_list();
	}
      }

      if (skip >= (int) ops.size())
	return sub_ovl;
      if (sub_ovl.length() < 1) {
	error("bad subs ref");
	return octave_value_list();
      }
      return sub_ovl(0).next_subsref(nargout, ops, idx, skip);
    }

    octave_value subsasgn(const std::string &ops, const std::list < octave_value_list > &idx, const octave_value &rhs) {
      assert(ops.size() > 0);
      assert(ops.size() == idx.size());

      std::list < octave_value_list >::const_iterator idx_it = idx.begin();
      int skip = 0;

      if (ops.size() > 1) {
	std::list < octave_value_list >::const_iterator last = idx.end();
	--last;
	std::list < octave_value_list > next_idx(idx.begin(), last);
	octave_value next_ov = subsref(ops.substr(0, ops.size() - 1), next_idx);
	next_ov.subsasgn(ops.substr(ops.size() - 1), std::list < octave_value_list > (1, *last), rhs);
      }

      else if (ops[skip] == '(' || ops[skip] == '{') {
	const char *op_name = ops[skip] == '(' ? "__paren_asgn" : "__brace_asgn";
	member_value_pair *m = find_member(op_name, false);
	if (m) {
	  octave_value_list args;
	  args.append(as_value());
	  args.append(*idx_it);
	  args.append(rhs);
	  member_invoke(m, args, 1);
	} else
	  error("%s member not found", op_name);
      }

      else if (ops[skip] == '.') {
	octave_value_list subname_ovl(*idx_it++);
	++skip;
	assert(subname_ovl.length() == 1 &&subname_ovl(0).is_string());
	std::string subname = subname_ovl(0).string_value();

	member_value_pair *m = find_member(subname, true);
	if (!m->first || !m->first->set_method) {
	  m->first = 0;
	  m->second = rhs;
	} else if (m->first->set_method) {
	  octave_value_list args;
	  if (!m->first->is_static() && !m->first->is_global())
	    args.append(as_value());
	  args.append(rhs);
	  m->first->set_method(args, 1);
	} else
	  error("member not assignable");
      } else
	error("unsupported subsasgn");

      return as_value();
    }

    virtual bool is_string() const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      return !!nc_this->find_member("__str", false);
    }

    virtual std::string string_value(bool force = false) const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      member_value_pair *m = nc_this->find_member("__str", false);
      if (!m) {
	error("__str method not defined");
	return std::string();
      }
      octave_value_list outarg = nc_this->member_invoke(m, octave_value_list(nc_this->as_value()), 1);
      if (outarg.length() < 1 || !outarg(0).is_string()) {
	error("__str method did not return a string");
	return std::string();
      }
      return outarg(0).string_value();
    }

    virtual octave_value convert_to_str(bool pad = false, bool force = false, char type = '"') const {
      return string_value();
    }

    virtual octave_value convert_to_str_internal(bool pad, bool force, char type) const {
      return string_value();
    }

    static bool dispatch_global_op(const std::string &symbol, const octave_value_list &args, octave_value &ret) {
      // we assume that "op_"-prefixed functions are installed in global namespace
      // (rather than any module namespace).

      octave_value fcn = get_global_value(symbol, true);
      if (!fcn.is_function() && !fcn.is_function_handle())
	return false;
      ret = fcn.subsref("(", std::list < octave_value_list > (1, args));
      return true;
    }

    static octave_value dispatch_unary_op(const octave_base_value &x, const char *op_name) {
      octave_swig_type *ost = Swig::swig_value_deref(x);
      assert(ost);

      octave_value ret;
      if (ost->dispatch_unary_op(std::string("__") + op_name, ret))
	return ret;
      std::string symbol = "op_" + ost->swig_type_name() + "_" + op_name;
      octave_value_list args;
      args.append(make_value_hack(x));
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      error("could not dispatch unary operator");
      return octave_value();
    }

    static octave_value dispatch_binary_op(const octave_base_value &lhs, const octave_base_value &rhs, const char *op_name) {
      octave_swig_type *lhs_ost = Swig::swig_value_deref(lhs);
      octave_swig_type *rhs_ost = Swig::swig_value_deref(rhs);

      octave_value ret;
      if (lhs_ost && lhs_ost->dispatch_binary_op(std::string("__") + op_name, rhs, ret))
	return ret;

      std::string symbol;
      octave_value_list args;
      args.append(make_value_hack(lhs));
      args.append(make_value_hack(rhs));

      symbol = "op_";
      symbol += lhs_ost ? lhs_ost->swig_type_name() : lhs.type_name();
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += rhs_ost ? rhs_ost->swig_type_name() : rhs.type_name();
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      symbol = "op_";
      symbol += lhs_ost ? lhs_ost->swig_type_name() : lhs.type_name();
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += "any";
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      symbol = "op_";
      symbol += "any";
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += rhs_ost ? rhs_ost->swig_type_name() : rhs.type_name();
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      error("could not dispatch binary operator");
      return octave_value();
    }

    void print(std::ostream &os, bool pr_as_read_syntax = false) const {
      if (is_string()) {
	os << string_value();
	return;
      }

      os << "{" << std::endl;
      for (unsigned int j = 0; j < types.size(); ++j) {
	if (types[j].first->clientdata) {
	  const swig_octave_class *c = (const swig_octave_class *) types[j].first->clientdata;
	  os << "  " << c->name << ", ptr = " << types[j].second.ptr << std::endl;
	} else {
	  os << "  " << types[j].first->name << ", ptr = " << types[j].second.ptr << std::endl;
	}
      }
      for (member_map::const_iterator it = members.begin(); it != members.end(); ++it) {
	if (it->second.first) {
	  const char *objtype = it->second.first->method ? "method" : "variable";
	  const char *modifier = (it->second.first->flags &1) ? "static" : (it->second.first->flags &2) ? "global" : "";
	  os << it->second.first->name << " (c++ " << modifier << " " << objtype << ")" << std::endl;
	  assert(it->second.first->name == it->first);
	} else {
	  os << it->first << " (octave value)" << std::endl;
	}
      }
      os << "}" << std::endl;
    }
  };

  // Octave tries hard to preserve pass-by-value semantics. Eg, assignments
  // will call clone() via make_unique() if there is more than one outstanding 
  // reference to the lhs, and forces the clone's reference count to 1 
  // (so you can't just increment your own count and return this).
  //
  // One way to fix this (without modifying Octave) is to add a level of
  // indirection such that clone copies ref-counted pointer and we keep 
  // pass-by-ref semantics (which are more natural/expected for C++ bindings).
  //
  // Supporting both pass-by-{ref,value} and toggling via %feature/option 
  // might be nice.

  class octave_swig_ref:public octave_base_value {
    octave_swig_type *ptr;
  public:
    octave_swig_ref(octave_swig_type *_ptr = 0)
      :ptr(_ptr) { }

    ~octave_swig_ref()
      { if (ptr) ptr->decref(); }

    octave_swig_type *get_ptr() const
      { return ptr; }

    octave_base_value *clone() const
      { if (ptr) ptr->incref(); return new octave_swig_ref(ptr); }

    octave_base_value *empty_clone() const
      { return new octave_swig_ref(0); }

    bool is_defined() const
      { return ptr->is_defined(); }

    virtual bool is_map() const 
      { return ptr->is_map(); }

    virtual octave_value subsref(const std::string &ops, const std::list < octave_value_list > &idx) 
      { return ptr->subsref(ops, idx); }

    virtual octave_value_list subsref(const std::string &ops, const std::list < octave_value_list > &idx, int nargout)
      { return ptr->subsref(ops, idx, nargout); }

    octave_value subsasgn(const std::string &ops, const std::list < octave_value_list > &idx, const octave_value &rhs)
      { return ptr->subsasgn(ops, idx, rhs); }

    virtual bool is_string() const 
      { return ptr->is_string(); }

    virtual std::string string_value(bool force = false) const 
      { return ptr->string_value(force); }

    virtual octave_value convert_to_str(bool pad = false, bool force = false, char type = '"') const
      { return ptr->convert_to_str(pad, force, type); }

    virtual octave_value convert_to_str_internal(bool pad, bool force, char type) const
      { return ptr->convert_to_str_internal(pad, force, type); }

    void print(std::ostream &os, bool pr_as_read_syntax = false) const
      { return ptr->print(os, pr_as_read_syntax); }

  private:
    DECLARE_OCTAVE_ALLOCATOR;
    DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA;
  };
  DEFINE_OCTAVE_ALLOCATOR(octave_swig_ref);
  DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_swig_ref, "swig_ref", "swig_ref");

  class octave_swig_packed:public octave_base_value {
    swig_type_info *type;
    std::vector < char > buf;
  public:

    octave_swig_packed(swig_type_info *_type = 0, const char *_buf = 0, size_t _buf_len = 0)
      :	type(_type), buf(_buf, _buf + _buf_len) {
    }

    bool copy(swig_type_info *outtype, char *ptr, size_t sz) {
      if (outtype && outtype != type)
	return false;
      assert(sz <= buf.size());
      std::copy(&buf[0], &buf[sz], ptr);
      return true;
    }

    octave_base_value *clone() const {
      return new octave_swig_packed(*this);
    }

    octave_base_value *empty_clone() const {
      return new octave_swig_packed();
    }

    bool is_defined() const {
      return true;
    }

    void print(std::ostream &os, bool pr_as_read_syntax = false) const {
      os << "swig packed type: name = " << type->name << ", len = " << buf.size() << std::endl;
    }
  private:
    DECLARE_OCTAVE_ALLOCATOR;
    DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA;
  };
  DEFINE_OCTAVE_ALLOCATOR(octave_swig_packed);
  DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_swig_packed, "swig_packed", "swig_packed");

  static octave_value_list octave_set_immutable(const octave_value_list &args, int nargout) {
    error("attempt to set immutable member variable");
    return octave_value_list();
  }

  struct octave_value_ref {
    const octave_value_list &ovl;
    int j;

    octave_value_ref(const octave_value_list &_ovl, int _j)
      :ovl(_ovl), j(_j) { }

    operator  octave_value() const {
      return ovl(j);
    }

    octave_value operator*() const {
      return ovl(j);
    }
  };

  octave_value_list swig_subclass(const octave_value_list &args, int nargout) {
    octave_swig_type *top = new octave_swig_type;
    for (int j = 0; j < args.length(); ++j) {
      if (args(j).type_id() == octave_swig_ref::static_type_id()) {
	octave_swig_ref *osr = static_cast < octave_swig_ref *>(args(j).internal_rep());
	octave_swig_type *ost = osr->get_ptr();
	if (!ost->is_owned()) {
	  error("cannot subclass object not constructed on octave side");
	  return octave_value_list();
	}
	top->merge(*ost);
      } else if (args(j).is_function_handle()) {
	top->assign(args(j).fcn_handle_value()->fcn_name(), args(j));
      } else if (args(j).is_string()) {
	if (j + 1 >= args.length()) {
	  error("member assignments must be of string,value form");
	  return octave_value_list();
	}
	top->assign(args(j).string_value(), args(j + 1));
	++j;
      } else {
	error("invalid arguments to subclass");
	return octave_value_list();
      }
    }
    return octave_value(Swig::swig_value_ref(top));
  }

  octave_value_list swig_type(const octave_value_list &args, int nargout) {
    if (args.length() != 1) {
      error("swig_typeinfo must be called with only a single object");
      return octave_value_list();
    }
    octave_swig_type *ost = Swig::swig_value_deref(args(0));
    if (!ost) {
      error("object is not a swig_ref");
      return octave_value_list();
    }
    return octave_value(ost->swig_type_name());
  }

  octave_value_list swig_typequery(const octave_value_list &args, int nargout) {
    if (args.length() != 1 || !args(0).is_string()) {
      error("swig_typeinfo must be called with single string argument");
      return octave_value_list();
    }
    swig_module_info *module = SWIG_GetModule(0);
    swig_type_info *type = SWIG_TypeQueryModule(module, module, args(0).string_value().c_str());
    if (!type)
      return octave_value("<unknown>");
    return octave_value(type->name);
  }

  octave_value_list swig_this(const octave_value_list &args, int nargout) {
    if (args.length() != 1) {
      error("swig_typeinfo must be called with only a single object");
      return octave_value_list();
    }
    octave_swig_type *ost = Swig::swig_value_deref(args(0));
    if (!ost) {
      error("object is not a swig_ref");
      return octave_value_list();
    }
    return octave_value(octave_uint64((unsigned long long) ost->swig_this()));
  }


#define SWIG_DIRECTORS

  struct Director;
  class octave_swig_type;

  namespace Swig {
    class Director {
      octave_swig_type *self;
      bool disowned;

      Director(const Director &x);
      Director &operator=(const Director &rhs);
    public:

      Director(void *vptr):self(0), disowned(false) {
	set_rtdir(vptr, this);
      }

      ~Director() {
	swig_director_destroyed(self, this);
	if (disowned)
	  self->decref();
      }

      void swig_set_self(octave_swig_type *new_self) {
	assert(!disowned);
	self = new_self;
      }

      octave_swig_type *swig_get_self() const {
	return self;
      }

      void swig_disown() {
	if (disowned)
	  return;
	disowned = true;
	self->incref();
      }
    };

    struct DirectorTypeMismatchException {
      static void raise(const char *msg) {
	// ... todo
	throw(DirectorTypeMismatchException());
      }

      static void raise(const octave_value &ov, const char *msg) {
	// ... todo
	raise(msg);
      }
    };
    struct DirectorPureVirtualException {
      static void raise(const char *msg) {
	// ... todo
	throw(DirectorPureVirtualException());
      }

      static void raise(const octave_value &ov, const char *msg) {
	// ... todo
	raise(msg);
      }
    };

  }

  void swig_acquire_ownership(void *vptr) {
    //  assert(0);
    // ... todo
  }

  void swig_acquire_ownership_array(void *vptr) {
    //  assert(0);
    // ... todo
  }

  void swig_acquire_ownership_obj(void *vptr, int own) {
    //  assert(0);
    // ... todo
  }

  namespace Swig {
    void swig_director_destroyed(octave_swig_type *self, Director *d) {
      self->director_destroyed(d);
    }

    void swig_director_set_self(Director *d, octave_swig_type *self) {
      d->swig_set_self(self);
    }

    octave_base_value *swig_value_ref(octave_swig_type *ost) {
      return new octave_swig_ref(ost);
    }

    octave_swig_type *swig_value_deref(const octave_value &ov) {
      return swig_value_deref(*ov.internal_rep());
    }

    octave_swig_type *swig_value_deref(const octave_base_value &ov) {
      if (ov.type_id() != octave_swig_ref::static_type_id())
	return 0;
      const octave_swig_ref *osr = static_cast < const octave_swig_ref *>(&ov);
      return osr->get_ptr();
    }

  }

  SWIGRUNTIME octave_value SWIG_Octave_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
    int own = (flags &SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;

    Swig::Director *d = Swig::get_rtdir(ptr);
    if (d && d->swig_get_self())
      return d->swig_get_self()->as_value();
    return Swig::swig_value_ref(new octave_swig_type(ptr, type, own));
  }

  SWIGRUNTIME int SWIG_Octave_ConvertPtrAndOwn(const octave_value &ov, void **ptr, swig_type_info *type, int flags, int *own) {
    if (!ov.is_defined()) {
      if (ptr)
	*ptr = 0;
      return SWIG_OK;
    }
    if (ov.type_id() != octave_swig_ref::static_type_id())
      return SWIG_TypeError;
    octave_swig_ref *osr = static_cast < octave_swig_ref *>(ov.internal_rep());
    octave_swig_type *ost = osr->get_ptr();
    void *vptr = ost->cast(type, own, flags);
    if (!vptr)
      return SWIG_TypeError;
    if (ptr)
      *ptr = vptr;
    return SWIG_OK;
  }

  SWIGRUNTIMEINLINE octave_value SWIG_Octave_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
    return new octave_swig_packed(type, (char *) ptr, sz);
  }

  SWIGRUNTIME int SWIG_Octave_ConvertPacked(const octave_value &ov, void *ptr, size_t sz, swig_type_info *type) {
    if (!ov.is_defined())
      return SWIG_TypeError;
    if (ov.type_id() != octave_swig_packed::static_type_id())
      return SWIG_TypeError;
    octave_swig_packed *ost = static_cast < octave_swig_packed *>(ov.internal_rep());
    return ost->copy(type, (char *) ptr, sz) ? SWIG_OK : SWIG_TypeError;
  }

  void SWIG_Octave_SetConstant(octave_swig_type *module_ns, const std::string &name, const octave_value &ov) {
    module_ns->assign(name, ov);
  }


#define swig_unary_op(name) \
octave_value swig_unary_op_##name(const octave_base_value &x) { \
  return octave_swig_type::dispatch_unary_op(x,#name); \
}
#define swig_binary_op(name) \
octave_value swig_binary_op_##name(const octave_base_value&lhs,const octave_base_value &rhs) { \
  return octave_swig_type::dispatch_binary_op(lhs,rhs,#name); \
}
#define swigreg_unary_op(name) \
if (!octave_value_typeinfo::lookup_unary_op(octave_value::op_##name,tid)) \
octave_value_typeinfo::register_unary_op(octave_value::op_##name,tid,swig_unary_op_##name);
#define swigreg_binary_op(name) \
if (!octave_value_typeinfo::lookup_binary_op(octave_value::op_##name,tid1,tid2)) \
octave_value_typeinfo::register_binary_op(octave_value::op_##name,tid1,tid2,swig_binary_op_##name);

  swig_unary_op(not);
  swig_unary_op(uplus);
  swig_unary_op(uminus);
  swig_unary_op(transpose);
  swig_unary_op(hermitian);
  swig_unary_op(incr);
  swig_unary_op(decr);

  swig_binary_op(add);
  swig_binary_op(sub);
  swig_binary_op(mul);
  swig_binary_op(div);
  swig_binary_op(pow);
  swig_binary_op(ldiv);
  swig_binary_op(lshift);
  swig_binary_op(rshift);
  swig_binary_op(lt);
  swig_binary_op(le);
  swig_binary_op(eq);
  swig_binary_op(ge);
  swig_binary_op(gt);
  swig_binary_op(ne);
  swig_binary_op(el_mul);
  swig_binary_op(el_div);
  swig_binary_op(el_pow);
  swig_binary_op(el_ldiv);
  swig_binary_op(el_and);
  swig_binary_op(el_or);

  void swig_install_unary_ops(int tid) {
    swigreg_unary_op(not);
    swigreg_unary_op(uplus);
    swigreg_unary_op(uminus);
    swigreg_unary_op(transpose);
    swigreg_unary_op(hermitian);
    swigreg_unary_op(incr);
    swigreg_unary_op(decr);
  }
  void swig_install_binary_ops(int tid1, int tid2) {
    swigreg_binary_op(add);
    swigreg_binary_op(sub);
    swigreg_binary_op(mul);
    swigreg_binary_op(div);
    swigreg_binary_op(pow);
    swigreg_binary_op(ldiv);
    swigreg_binary_op(lshift);
    swigreg_binary_op(rshift);
    swigreg_binary_op(lt);
    swigreg_binary_op(le);
    swigreg_binary_op(eq);
    swigreg_binary_op(ge);
    swigreg_binary_op(gt);
    swigreg_binary_op(ne);
    swigreg_binary_op(el_mul);
    swigreg_binary_op(el_div);
    swigreg_binary_op(el_pow);
    swigreg_binary_op(el_ldiv);
    swigreg_binary_op(el_and);
    swigreg_binary_op(el_or);
  }
  void swig_install_ops(int tid) {
    // here we assume that tid are conseq integers increasing from zero, and 
    // that our tid is the last one. might be better to have explicit string 
    // list of types we should bind to, and use lookup_type to resolve their tid.

    swig_install_unary_ops(tid);
    swig_install_binary_ops(tid, tid);
    for (int j = 0; j < tid; ++j) {
      swig_install_binary_ops(j, tid);
      swig_install_binary_ops(tid, j);
    }
  }

}



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Mem swig_types[0]
#define SWIGTYPE_p_char swig_types[1]
#define SWIGTYPE_p_f_p_sqlite3_context__void swig_types[2]
#define SWIGTYPE_p_f_p_sqlite3_context_int_p_p_Mem__void swig_types[3]
#define SWIGTYPE_p_f_p_sqlite3_p_void_int_p_q_const__p_q_const__char_p_p_sqlite3_vtab_p_p_char__int swig_types[4]
#define SWIGTYPE_p_f_p_sqlite3_vtab__int swig_types[5]
#define SWIGTYPE_p_f_p_sqlite3_vtab_cursor__int swig_types[6]
#define SWIGTYPE_p_f_p_sqlite3_vtab_cursor_int_p_q_const__char_int_p_p_Mem__int swig_types[7]
#define SWIGTYPE_p_f_p_sqlite3_vtab_cursor_p_long_long__int swig_types[8]
#define SWIGTYPE_p_f_p_sqlite3_vtab_cursor_p_sqlite3_context_int__int swig_types[9]
#define SWIGTYPE_p_f_p_sqlite3_vtab_int_p_p_Mem_p_long_long__int swig_types[10]
#define SWIGTYPE_p_f_p_sqlite3_vtab_int_p_q_const__char_p_p_f_p_sqlite3_context_int_p_p_Mem__void_p_p_void__int swig_types[11]
#define SWIGTYPE_p_f_p_sqlite3_vtab_p_p_sqlite3_vtab_cursor__int swig_types[12]
#define SWIGTYPE_p_f_p_sqlite3_vtab_p_q_const__char__int swig_types[13]
#define SWIGTYPE_p_f_p_sqlite3_vtab_p_sqlite3_index_info__int swig_types[14]
#define SWIGTYPE_p_f_p_void__int swig_types[15]
#define SWIGTYPE_p_f_p_void__void swig_types[16]
#define SWIGTYPE_p_f_p_void_int__int swig_types[17]
#define SWIGTYPE_p_f_p_void_int_p_p_char_p_p_char__int swig_types[18]
#define SWIGTYPE_p_f_p_void_int_p_q_const__char_p_q_const__char_long_long__void swig_types[19]
#define SWIGTYPE_p_f_p_void_int_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char__int swig_types[20]
#define SWIGTYPE_p_f_p_void_int_p_q_const__void_int_p_q_const__void__int swig_types[21]
#define SWIGTYPE_p_f_p_void_p_q_const__char__void swig_types[22]
#define SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_long_long__void swig_types[23]
#define SWIGTYPE_p_f_p_void_p_sqlite3_int_p_q_const__char__void swig_types[24]
#define SWIGTYPE_p_f_p_void_p_sqlite3_int_p_q_const__void__void swig_types[25]
#define SWIGTYPE_p_generic_db swig_types[26]
#define SWIGTYPE_p_int swig_types[27]
#define SWIGTYPE_p_long_long swig_types[28]
#define SWIGTYPE_p_p_char swig_types[29]
#define SWIGTYPE_p_p_p_char swig_types[30]
#define SWIGTYPE_p_p_sqlite3 swig_types[31]
#define SWIGTYPE_p_p_sqlite3_blob swig_types[32]
#define SWIGTYPE_p_p_sqlite3_stmt swig_types[33]
#define SWIGTYPE_p_p_void swig_types[34]
#define SWIGTYPE_p_sqlite3 swig_types[35]
#define SWIGTYPE_p_sqlite3_blob swig_types[36]
#define SWIGTYPE_p_sqlite3_context swig_types[37]
#define SWIGTYPE_p_sqlite3_db swig_types[38]
#define SWIGTYPE_p_sqlite3_index_info swig_types[39]
#define SWIGTYPE_p_sqlite3_index_info_aConstraintUsage swig_types[40]
#define SWIGTYPE_p_sqlite3_module swig_types[41]
#define SWIGTYPE_p_sqlite3_stmt swig_types[42]
#define SWIGTYPE_p_sqlite3_vtab swig_types[43]
#define SWIGTYPE_p_sqlite3_vtab_cursor swig_types[44]
#define SWIGTYPE_p_unsigned_char swig_types[45]
#define SWIGTYPE_p_unsigned_long_long swig_types[46]
#define SWIGTYPE_p_va_list swig_types[47]
#define SWIGTYPE_p_void swig_types[48]
static swig_type_info *swig_types[50];
static swig_module_info swig_module = {swig_types, 49, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#define SWIGVERSION 0x010334 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>


#include <sqlite3.h>
#include "generic_db.h"


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE octave_value
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return std::string(carray,carray+size);
}


SWIGINTERNINLINE octave_value 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


  SWIGINTERNINLINE octave_value SWIG_From_long    (long value)
    {    
      return octave_value(value);
    }


SWIGINTERNINLINE octave_value
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(const octave_value& ov, char** cptr, size_t* psize, int *alloc)
{
  if (!ov.is_string())
    return SWIG_TypeError;
  
  std::string str=ov.string_value();
  size_t len=str.size();
  char* cstr=(char*)str.c_str();
  if (alloc) {
    *cptr = (char*)(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
    *alloc = SWIG_NEWOBJ;
  } else if (cptr)
    *cptr = cstr;
  if (psize)
    *psize = len + 1;
  return SWIG_OK;
}





#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  SWIGINTERN int SWIG_AsVal_long (const octave_value& ov, long* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (ov.is_double_type()||ov.is_single_type()) {
	double v=ov.double_value();
	if (v!=floor(v))
	  return SWIG_TypeError;
      }
      if (val)
	*val = ov.long_value();
      return SWIG_OK;
    }


SWIGINTERN int
SWIG_AsVal_int (octave_value obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (int)(v);
    }
  }  
  return res;
}


  SWIGINTERNINLINE octave_value SWIG_From_long_SS_long    (long long value)
    {    
      return octave_int64(value);
    }


  SWIGINTERN int SWIG_AsVal_double (const octave_value& ov, double* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (val)
	*val = ov.double_value();
      return SWIG_OK;
    }


  SWIGINTERN int SWIG_AsVal_long_SS_long (const octave_value& ov, long long* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (ov.is_double_type()||ov.is_single_type()) {
	double v=ov.double_value();
	if (v!=floor(v))
	  return SWIG_TypeError;
      }
      if (val) {
	if (ov.is_int64_type())
	  *val = ov.int64_scalar_value().value();
	else if (ov.is_uint64_type())
	  *val = ov.uint64_scalar_value().value();
	else
	  *val = ov.long_value();
      }
      return SWIG_OK;
    }


  SWIGINTERNINLINE octave_value SWIG_From_double    (double value)
    {    
      return octave_value(value);
    }


typedef struct {
    int argvIndex;           /* if >0, constraint is part of argv to xFilter */
    unsigned char omit;      /* Do not code a test for this constraint */
  } sqlite3_index_info_aConstraintUsage;



  SWIGINTERN int SWIG_AsVal_unsigned_SS_long (const octave_value& ov, unsigned long* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (ov.is_double_type()||ov.is_single_type()) {
	double v=ov.double_value();
	if (v<0)
	  return SWIG_OverflowError;  
	if (v!=floor(v))
	  return SWIG_TypeError;
      }
      if (ov.is_int8_type()||ov.is_int16_type()||
	  ov.is_int32_type()) {
	long v=ov.long_value();
	if (v<0)
	  return SWIG_OverflowError;  
      }
      if (ov.is_int64_type()) {
	long long v=ov.int64_scalar_value().value();
	if (v<0)
	  return SWIG_OverflowError;  
      }
      if (val)
	*val = ov.ulong_value();
      return SWIG_OK;
    }


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (octave_value obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned char)(v);
    }
  }  
  return res;
}


  SWIGINTERNINLINE octave_value SWIG_From_unsigned_SS_long    (unsigned long value)
    {    
      return octave_value(value);
    }


SWIGINTERNINLINE octave_value
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}



  bool error_check(sqlite3* db,int r) {
    if (r!=0) {
      error(sqlite3_errmsg(db));
      return false;
    }
    return true;
  }

  struct sqlite3_db : public generic_db {
    sqlite3* db;
    sqlite3_db(const char* name=":memory:") {
      error_check(db,sqlite3_open(name,&db));
    }
    ~sqlite3_db() {
      error_check(db,sqlite3_close(db));
    }

    Cell sql(const char* query) {
      sqlite3_stmt* stmt = 0;
      const char* tail = 0;
      if (!error_check(db,sqlite3_prepare
		       (db,query,strlen(query),&stmt,&tail)))
	return Cell();
      std::vector<octave_value> results;
      int n=-1;
      for (;;) {
	int r=sqlite3_step(stmt);
	if (r==101)
	  break;
	if (r!=100) {
	  error_check(db,r);
	  return Cell();
	}
	if (n<0)
	  n=sqlite3_column_count(stmt);
	for (int j=0;j<n;++j) {
	  switch (sqlite3_column_type(stmt,j)) {
	  case 1:
	    results.push_back(sqlite3_column_int(stmt,j));
	    break;
	  case 2:
	    results.push_back(sqlite3_column_double(stmt,j));
	    break;
	  case 3: {
	    const char* text=(const char*)sqlite3_column_text(stmt,j);
	    int text_len=sqlite3_column_bytes(stmt,j);
	    results.push_back(std::string(text,text_len));
	    break;
	  }
	  case 5:
	    results.push_back(SWIG_NewPointerObj(0,SWIGTYPE_p_void,0));
	    break;
	  case 4: {
	    const char* data=(const char*)sqlite3_column_text(stmt,j);
	    int data_len=sqlite3_column_bytes(stmt,j);
	    results.push_back(charMatrix(std::string(data,data_len)));
	    break;
	  }
	  }
	}
      }
      error_check(db,sqlite3_finalize(stmt));
      assert(results.size()%n==0);
      int m=results.size()/n;
      Cell c(m,n);
      for (int j=0,l=0;j<m;++j)
	for (int k=0;k<n;++k)
	  c.elem(j,k)=results[l++];
      return c;
    }
  };


SWIGINTERNINLINE octave_value
  SWIG_From_bool  (bool value)
{
  return octave_value(value);
}

static octave_value_list _wrap_sqlite3_version_set(const octave_value_list& args,int nargout) {
  if (!SWIG_check_num_args("sqlite3_version_set",args.length(),1,1,0)) return octave_value_list();
  
  return octave_set_immutable(args,nargout);
}


static octave_value_list _wrap_sqlite3_version_get(const octave_value_list& args,int nargout) {
  octave_value obj;
  
  obj = SWIG_FromCharPtr(sqlite3_version);
  return obj;
}


static octave_value_list _wrap_sqlite3_libversion (const octave_value_list& args, int nargout) {
  char *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_libversion",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (char *)sqlite3_libversion();
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_libversion_number (const octave_value_list& args, int nargout) {
  int result;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_libversion_number",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (int)sqlite3_libversion_number();
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_close (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_close",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_close" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  result = (int)sqlite3_close(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_exec (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  int (*arg3)(void *,int,char **,char **) = (int (*)(void *,int,char **,char **)) 0 ;
  void *arg4 = (void *) 0 ;
  char **arg5 = (char **) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_exec",args.length(),5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_exec" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_exec" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  {
    int res = SWIG_ConvertFunctionPtr(args(2), (void**)(&arg3), SWIGTYPE_p_f_p_void_int_p_p_char_p_p_char__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_exec" "', argument " "3"" of type '" "int (*)(void *,int,char **,char **)""'"); 
    }
  }
  res4 = SWIG_ConvertPtr(args(3),SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "sqlite3_exec" "', argument " "4"" of type '" "void *""'"); 
  }
  res5 = SWIG_ConvertPtr(args(4), &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "sqlite3_exec" "', argument " "5"" of type '" "char **""'"); 
  }
  arg5 = (char **)(argp5);
  result = (int)sqlite3_exec(arg1,(char const *)arg2,arg3,arg4,arg5);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_extended_result_codes (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_extended_result_codes",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_extended_result_codes" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_extended_result_codes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)sqlite3_extended_result_codes(arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_last_insert_rowid (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  sqlite_int64 result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_last_insert_rowid",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_last_insert_rowid" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  result = (sqlite_int64)sqlite3_last_insert_rowid(arg1);
  _outv = SWIG_From_long_SS_long((long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_changes (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_changes",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_changes" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  result = (int)sqlite3_changes(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_total_changes (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_total_changes",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_total_changes" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  result = (int)sqlite3_total_changes(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_interrupt (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_interrupt",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_interrupt" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  sqlite3_interrupt(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_complete (const octave_value_list& args, int nargout) {
  char *arg1 = (char *) 0 ;
  int result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_complete",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_complete" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  result = (int)sqlite3_complete((char const *)arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_complete16 (const octave_value_list& args, int nargout) {
  void *arg1 = (void *) 0 ;
  int result;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_complete16",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_complete16" "', argument " "1"" of type '" "void const *""'"); 
  }
  result = (int)sqlite3_complete16((void const *)arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_busy_handler (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  int (*arg2)(void *,int) = (int (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_busy_handler",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_busy_handler" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_void_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_busy_handler" "', argument " "2"" of type '" "int (*)(void *,int)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args(2),SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_busy_handler" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (int)sqlite3_busy_handler(arg1,arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_busy_timeout (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_busy_timeout",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_busy_timeout" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_busy_timeout" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)sqlite3_busy_timeout(arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_get_table (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  char ***arg3 = (char ***) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  char **arg6 = (char **) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_get_table",args.length(),6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_get_table" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_get_table" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args(2), &argp3,SWIGTYPE_p_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_get_table" "', argument " "3"" of type '" "char ***""'"); 
  }
  arg3 = (char ***)(argp3);
  res4 = SWIG_ConvertPtr(args(3), &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "sqlite3_get_table" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = (int *)(argp4);
  res5 = SWIG_ConvertPtr(args(4), &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "sqlite3_get_table" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = (int *)(argp5);
  res6 = SWIG_ConvertPtr(args(5), &argp6,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "sqlite3_get_table" "', argument " "6"" of type '" "char **""'"); 
  }
  arg6 = (char **)(argp6);
  result = (int)sqlite3_get_table(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_free_table (const octave_value_list& args, int nargout) {
  char **arg1 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_free_table",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_free_table" "', argument " "1"" of type '" "char **""'"); 
  }
  arg1 = (char **)(argp1);
  sqlite3_free_table(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_mprintf (const octave_value_list& args, int nargout) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  char *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_mprintf",args.length(),1,1,1)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_mprintf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  result = (char *)sqlite3_mprintf((char const *)arg1,arg2);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_vmprintf (const octave_value_list& args, int nargout) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  char *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_vmprintf",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_vmprintf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_va_list,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_vmprintf" "', argument " "2"" of type '" "va_list""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sqlite3_vmprintf" "', argument " "2"" of type '" "va_list""'");
    } else {
      arg2 = *((va_list *)(argp2));
    }
  }
  result = (char *)sqlite3_vmprintf((char const *)arg1,arg2);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_snprintf (const octave_value_list& args, int nargout) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  char *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_snprintf",args.length(),3,3,1)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sqlite3_snprintf" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_snprintf" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_snprintf" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  result = (char *)sqlite3_snprintf(arg1,arg2,(char const *)arg3,arg4);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_malloc (const octave_value_list& args, int nargout) {
  int arg1 ;
  void *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_malloc",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sqlite3_malloc" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (void *)sqlite3_malloc(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_realloc (const octave_value_list& args, int nargout) {
  void *arg1 = (void *) 0 ;
  int arg2 ;
  void *result = 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_realloc",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_realloc" "', argument " "1"" of type '" "void *""'"); 
  }
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_realloc" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (void *)sqlite3_realloc(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_free (const octave_value_list& args, int nargout) {
  void *arg1 = (void *) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_free",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_free" "', argument " "1"" of type '" "void *""'"); 
  }
  sqlite3_free(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_set_authorizer (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  int (*arg2)(void *,int,char const *,char const *,char const *,char const *) = (int (*)(void *,int,char const *,char const *,char const *,char const *)) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_set_authorizer",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_set_authorizer" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_void_int_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_set_authorizer" "', argument " "2"" of type '" "int (*)(void *,int,char const *,char const *,char const *,char const *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args(2),SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_set_authorizer" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (int)sqlite3_set_authorizer(arg1,arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_trace (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  void (*arg2)(void *,char const *) = (void (*)(void *,char const *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_trace",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_trace" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_void_p_q_const__char__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_trace" "', argument " "2"" of type '" "void (*)(void *,char const *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args(2),SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_trace" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (void *)sqlite3_trace(arg1,arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_profile (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  void (*arg2)(void *,char const *,sqlite_uint64) = (void (*)(void *,char const *,sqlite_uint64)) 0 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_profile",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_profile" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_void_p_q_const__char_unsigned_long_long__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_profile" "', argument " "2"" of type '" "void (*)(void *,char const *,sqlite_uint64)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args(2),SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_profile" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (void *)sqlite3_profile(arg1,arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_progress_handler (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  int arg2 ;
  int (*arg3)(void *) = (int (*)(void *)) 0 ;
  void *arg4 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res4 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_progress_handler",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_progress_handler" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_progress_handler" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    int res = SWIG_ConvertFunctionPtr(args(2), (void**)(&arg3), SWIGTYPE_p_f_p_void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_progress_handler" "', argument " "3"" of type '" "int (*)(void *)""'"); 
    }
  }
  res4 = SWIG_ConvertPtr(args(3),SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "sqlite3_progress_handler" "', argument " "4"" of type '" "void *""'"); 
  }
  sqlite3_progress_handler(arg1,arg2,arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_open (const octave_value_list& args, int nargout) {
  char *arg1 = (char *) 0 ;
  sqlite3 **arg2 = (sqlite3 **) 0 ;
  int result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  sqlite3 *tmp2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  arg2=&tmp2;
  if (!SWIG_check_num_args("sqlite3_open",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_open" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  result = (int)sqlite3_open((char const *)arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj(SWIG_as_voidptr(result == SQLITE_OK ? *arg2 : 0), SWIGTYPE_p_sqlite3, 1));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_open16 (const octave_value_list& args, int nargout) {
  void *arg1 = (void *) 0 ;
  sqlite3 **arg2 = (sqlite3 **) 0 ;
  int result;
  int res1 ;
  sqlite3 *tmp2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  arg2=&tmp2;
  if (!SWIG_check_num_args("sqlite3_open16",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_open16" "', argument " "1"" of type '" "void const *""'"); 
  }
  result = (int)sqlite3_open16((void const *)arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj(SWIG_as_voidptr(result == SQLITE_OK ? *arg2 : 0), SWIGTYPE_p_sqlite3, 1));
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_errcode (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_errcode",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_errcode" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  result = (int)sqlite3_errcode(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_errmsg (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_errmsg",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_errmsg" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  result = (char *)sqlite3_errmsg(arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_errmsg16 (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_errmsg16",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_errmsg16" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  result = (void *)sqlite3_errmsg16(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_prepare (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  sqlite3_stmt **arg4 = (sqlite3_stmt **) 0 ;
  char **arg5 = (char **) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string tmp2 ;
  sqlite3_stmt *tmp4 = 0 ;
  char *tmp5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  arg4=&tmp4;
  arg5=&tmp5;
  if (!SWIG_check_num_args("sqlite3_prepare",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_prepare" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  if (!args(1).is_string()) {
    error("sql arg must be a string"); SWIG_fail;
  }
  tmp2=args(1).string_value();
  arg2=(char*)tmp2.c_str();
  arg3=tmp2.size();
  result = (int)sqlite3_prepare(arg1,(char const *)arg2,arg3,arg4,(char const **)arg5);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj(SWIG_as_voidptr(result == SQLITE_OK ? *arg4 : 0), SWIGTYPE_p_sqlite3_stmt, 1));
  _outp = SWIG_Octave_AppendOutput(_outp, std::string(*arg5?*arg5:""));
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_prepare_v2 (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  sqlite3_stmt **arg4 = (sqlite3_stmt **) 0 ;
  char **arg5 = (char **) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string tmp2 ;
  sqlite3_stmt *tmp4 = 0 ;
  char *tmp5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  arg4=&tmp4;
  arg5=&tmp5;
  if (!SWIG_check_num_args("sqlite3_prepare_v2",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_prepare_v2" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  if (!args(1).is_string()) {
    error("sql arg must be a string"); SWIG_fail;
  }
  tmp2=args(1).string_value();
  arg2=(char*)tmp2.c_str();
  arg3=tmp2.size();
  result = (int)sqlite3_prepare_v2(arg1,(char const *)arg2,arg3,arg4,(char const **)arg5);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj(SWIG_as_voidptr(result == SQLITE_OK ? *arg4 : 0), SWIGTYPE_p_sqlite3_stmt, 1));
  _outp = SWIG_Octave_AppendOutput(_outp, std::string(*arg5?*arg5:""));
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_prepare16 (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  sqlite3_stmt **arg4 = (sqlite3_stmt **) 0 ;
  void **arg5 = (void **) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  sqlite3_stmt *tmp4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  arg4=&tmp4;
  if (!SWIG_check_num_args("sqlite3_prepare16",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_prepare16" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_prepare16" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_prepare16" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  res5 = SWIG_ConvertPtr(args(3), &argp5,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "sqlite3_prepare16" "', argument " "5"" of type '" "void const **""'"); 
  }
  arg5 = (void **)(argp5);
  result = (int)sqlite3_prepare16(arg1,(void const *)arg2,arg3,arg4,(void const **)arg5);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj(SWIG_as_voidptr(result == SQLITE_OK ? *arg4 : 0), SWIGTYPE_p_sqlite3_stmt, 1));
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_prepare16_v2 (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  sqlite3_stmt **arg4 = (sqlite3_stmt **) 0 ;
  void **arg5 = (void **) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  sqlite3_stmt *tmp4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  arg4=&tmp4;
  if (!SWIG_check_num_args("sqlite3_prepare16_v2",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_prepare16_v2" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_prepare16_v2" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_prepare16_v2" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  res5 = SWIG_ConvertPtr(args(3), &argp5,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "sqlite3_prepare16_v2" "', argument " "5"" of type '" "void const **""'"); 
  }
  arg5 = (void **)(argp5);
  result = (int)sqlite3_prepare16_v2(arg1,(void const *)arg2,arg3,arg4,(void const **)arg5);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj(SWIG_as_voidptr(result == SQLITE_OK ? *arg4 : 0), SWIGTYPE_p_sqlite3_stmt, 1));
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_bind_blob (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void (*arg5)(void *) = (void (*)(void *)) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_bind_blob",args.length(),5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_bind_blob" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_bind_blob" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args(2),SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_bind_blob" "', argument " "3"" of type '" "void const *""'"); 
  }
  ecode4 = SWIG_AsVal_int(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sqlite3_bind_blob" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    int res = SWIG_ConvertFunctionPtr(args(4), (void**)(&arg5), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_bind_blob" "', argument " "5"" of type '" "void (*)(void *)""'"); 
    }
  }
  result = (int)sqlite3_bind_blob(arg1,arg2,(void const *)arg3,arg4,arg5);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_bind_double (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  double arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_bind_double",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_bind_double" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_bind_double" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_bind_double" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = (double)(val3);
  result = (int)sqlite3_bind_double(arg1,arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_bind_int (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_bind_int",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_bind_int" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_bind_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_bind_int" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)sqlite3_bind_int(arg1,arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_bind_int64 (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  sqlite_int64 arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long long val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_bind_int64",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_bind_int64" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_bind_int64" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_long_SS_long(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_bind_int64" "', argument " "3"" of type '" "sqlite_int64""'");
  } 
  arg3 = (sqlite_int64)(val3);
  result = (int)sqlite3_bind_int64(arg1,arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_bind_null (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_bind_null",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_bind_null" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_bind_null" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)sqlite3_bind_null(arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_bind_text (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void (*arg5)(void *) = (void (*)(void *)) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_bind_text",args.length(),5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_bind_text" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_bind_text" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_bind_text" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  ecode4 = SWIG_AsVal_int(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sqlite3_bind_text" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    int res = SWIG_ConvertFunctionPtr(args(4), (void**)(&arg5), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_bind_text" "', argument " "5"" of type '" "void (*)(void *)""'"); 
    }
  }
  result = (int)sqlite3_bind_text(arg1,arg2,(char const *)arg3,arg4,arg5);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_bind_text16 (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void (*arg5)(void *) = (void (*)(void *)) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_bind_text16",args.length(),5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_bind_text16" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_bind_text16" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args(2),SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_bind_text16" "', argument " "3"" of type '" "void const *""'"); 
  }
  ecode4 = SWIG_AsVal_int(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sqlite3_bind_text16" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    int res = SWIG_ConvertFunctionPtr(args(4), (void**)(&arg5), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_bind_text16" "', argument " "5"" of type '" "void (*)(void *)""'"); 
    }
  }
  result = (int)sqlite3_bind_text16(arg1,arg2,(void const *)arg3,arg4,arg5);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_bind_value (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  sqlite3_value *arg3 = (sqlite3_value *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_bind_value",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_bind_value" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_bind_value" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args(2), &argp3,SWIGTYPE_p_Mem, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_bind_value" "', argument " "3"" of type '" "sqlite3_value const *""'"); 
  }
  arg3 = (sqlite3_value *)(argp3);
  result = (int)sqlite3_bind_value(arg1,arg2,(Mem const *)arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_bind_zeroblob (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_bind_zeroblob",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_bind_zeroblob" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_bind_zeroblob" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_bind_zeroblob" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)sqlite3_bind_zeroblob(arg1,arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_bind_parameter_count (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_bind_parameter_count",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_bind_parameter_count" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  result = (int)sqlite3_bind_parameter_count(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_bind_parameter_name (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_bind_parameter_name",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_bind_parameter_name" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_bind_parameter_name" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (char *)sqlite3_bind_parameter_name(arg1,arg2);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_bind_parameter_index (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_bind_parameter_index",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_bind_parameter_index" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_bind_parameter_index" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (int)sqlite3_bind_parameter_index(arg1,(char const *)arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_clear_bindings (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_clear_bindings",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_clear_bindings" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  result = (int)sqlite3_clear_bindings(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_count (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_count",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_count" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  result = (int)sqlite3_column_count(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_name (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_name",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_name" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_name" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (char *)sqlite3_column_name(arg1,arg2);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_name16 (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_name16",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_name16" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_name16" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (void *)sqlite3_column_name16(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_database_name (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_database_name",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_database_name" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_database_name" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (char *)sqlite3_column_database_name(arg1,arg2);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_database_name16 (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_database_name16",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_database_name16" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_database_name16" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (void *)sqlite3_column_database_name16(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_table_name (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_table_name",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_table_name" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_table_name" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (char *)sqlite3_column_table_name(arg1,arg2);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_table_name16 (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_table_name16",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_table_name16" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_table_name16" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (void *)sqlite3_column_table_name16(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_origin_name (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_origin_name",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_origin_name" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_origin_name" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (char *)sqlite3_column_origin_name(arg1,arg2);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_origin_name16 (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_origin_name16",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_origin_name16" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_origin_name16" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (void *)sqlite3_column_origin_name16(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_decltype (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_decltype",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_decltype" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_decltype" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (char *)sqlite3_column_decltype(arg1,arg2);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_decltype16 (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_decltype16",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_decltype16" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_decltype16" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (void *)sqlite3_column_decltype16(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_step (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_step",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_step" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  result = (int)sqlite3_step(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_data_count (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_data_count",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_data_count" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  result = (int)sqlite3_data_count(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_blob (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_blob",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_blob" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_blob" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (void *)sqlite3_column_blob(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_bytes (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_bytes",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_bytes" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_bytes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)sqlite3_column_bytes(arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_bytes16 (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_bytes16",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_bytes16" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_bytes16" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)sqlite3_column_bytes16(arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_double (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_double",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_double" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_double" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (double)sqlite3_column_double(arg1,arg2);
  _outv = SWIG_From_double((double)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_int (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_int",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_int" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)sqlite3_column_int(arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_int64 (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  sqlite_int64 result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_int64",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_int64" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_int64" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (sqlite_int64)sqlite3_column_int64(arg1,arg2);
  _outv = SWIG_From_long_SS_long((long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_text (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_text",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_text" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_text" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (unsigned char *)sqlite3_column_text(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_text16 (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_text16",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_text16" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_text16" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (void *)sqlite3_column_text16(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_type (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_type",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_type" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_type" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)sqlite3_column_type(arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_column_value (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int arg2 ;
  sqlite3_value *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_column_value",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_column_value" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_column_value" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (sqlite3_value *)sqlite3_column_value(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mem, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_finalize (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_finalize",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_finalize" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  result = (int)sqlite3_finalize(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_reset (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_reset",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_reset" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  result = (int)sqlite3_reset(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_create_function (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void (*arg6)(sqlite3_context *,int,sqlite3_value **) = (void (*)(sqlite3_context *,int,sqlite3_value **)) 0 ;
  void (*arg7)(sqlite3_context *,int,sqlite3_value **) = (void (*)(sqlite3_context *,int,sqlite3_value **)) 0 ;
  void (*arg8)(sqlite3_context *) = (void (*)(sqlite3_context *)) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_create_function",args.length(),8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_create_function" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_create_function" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_create_function" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sqlite3_create_function" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  res5 = SWIG_ConvertPtr(args(4),SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "sqlite3_create_function" "', argument " "5"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(5), (void**)(&arg6), SWIGTYPE_p_f_p_sqlite3_context_int_p_p_Mem__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_create_function" "', argument " "6"" of type '" "void (*)(sqlite3_context *,int,sqlite3_value **)""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(6), (void**)(&arg7), SWIGTYPE_p_f_p_sqlite3_context_int_p_p_Mem__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_create_function" "', argument " "7"" of type '" "void (*)(sqlite3_context *,int,sqlite3_value **)""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(7), (void**)(&arg8), SWIGTYPE_p_f_p_sqlite3_context__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_create_function" "', argument " "8"" of type '" "void (*)(sqlite3_context *)""'"); 
    }
  }
  result = (int)sqlite3_create_function(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_create_function16 (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void (*arg6)(sqlite3_context *,int,sqlite3_value **) = (void (*)(sqlite3_context *,int,sqlite3_value **)) 0 ;
  void (*arg7)(sqlite3_context *,int,sqlite3_value **) = (void (*)(sqlite3_context *,int,sqlite3_value **)) 0 ;
  void (*arg8)(sqlite3_context *) = (void (*)(sqlite3_context *)) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_create_function16",args.length(),8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_create_function16" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_create_function16" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_create_function16" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sqlite3_create_function16" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  res5 = SWIG_ConvertPtr(args(4),SWIG_as_voidptrptr(&arg5), 0, 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "sqlite3_create_function16" "', argument " "5"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(5), (void**)(&arg6), SWIGTYPE_p_f_p_sqlite3_context_int_p_p_Mem__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_create_function16" "', argument " "6"" of type '" "void (*)(sqlite3_context *,int,sqlite3_value **)""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(6), (void**)(&arg7), SWIGTYPE_p_f_p_sqlite3_context_int_p_p_Mem__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_create_function16" "', argument " "7"" of type '" "void (*)(sqlite3_context *,int,sqlite3_value **)""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(7), (void**)(&arg8), SWIGTYPE_p_f_p_sqlite3_context__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_create_function16" "', argument " "8"" of type '" "void (*)(sqlite3_context *)""'"); 
    }
  }
  result = (int)sqlite3_create_function16(arg1,(void const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_aggregate_count (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_aggregate_count",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_aggregate_count" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  result = (int)sqlite3_aggregate_count(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_expired (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_expired",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_expired" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  result = (int)sqlite3_expired(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_transfer_bindings (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  sqlite3_stmt *arg2 = (sqlite3_stmt *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_transfer_bindings",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_transfer_bindings" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_transfer_bindings" "', argument " "2"" of type '" "sqlite3_stmt *""'"); 
  }
  arg2 = (sqlite3_stmt *)(argp2);
  result = (int)sqlite3_transfer_bindings(arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_global_recover (const octave_value_list& args, int nargout) {
  int result;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_global_recover",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (int)sqlite3_global_recover();
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_value_blob (const octave_value_list& args, int nargout) {
  sqlite3_value *arg1 = (sqlite3_value *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_value_blob",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_Mem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_value_blob" "', argument " "1"" of type '" "sqlite3_value *""'"); 
  }
  arg1 = (sqlite3_value *)(argp1);
  result = (void *)sqlite3_value_blob(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_value_bytes (const octave_value_list& args, int nargout) {
  sqlite3_value *arg1 = (sqlite3_value *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_value_bytes",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_Mem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_value_bytes" "', argument " "1"" of type '" "sqlite3_value *""'"); 
  }
  arg1 = (sqlite3_value *)(argp1);
  result = (int)sqlite3_value_bytes(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_value_bytes16 (const octave_value_list& args, int nargout) {
  sqlite3_value *arg1 = (sqlite3_value *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_value_bytes16",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_Mem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_value_bytes16" "', argument " "1"" of type '" "sqlite3_value *""'"); 
  }
  arg1 = (sqlite3_value *)(argp1);
  result = (int)sqlite3_value_bytes16(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_value_double (const octave_value_list& args, int nargout) {
  sqlite3_value *arg1 = (sqlite3_value *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_value_double",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_Mem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_value_double" "', argument " "1"" of type '" "sqlite3_value *""'"); 
  }
  arg1 = (sqlite3_value *)(argp1);
  result = (double)sqlite3_value_double(arg1);
  _outv = SWIG_From_double((double)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_value_int (const octave_value_list& args, int nargout) {
  sqlite3_value *arg1 = (sqlite3_value *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_value_int",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_Mem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_value_int" "', argument " "1"" of type '" "sqlite3_value *""'"); 
  }
  arg1 = (sqlite3_value *)(argp1);
  result = (int)sqlite3_value_int(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_value_int64 (const octave_value_list& args, int nargout) {
  sqlite3_value *arg1 = (sqlite3_value *) 0 ;
  sqlite_int64 result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_value_int64",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_Mem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_value_int64" "', argument " "1"" of type '" "sqlite3_value *""'"); 
  }
  arg1 = (sqlite3_value *)(argp1);
  result = (sqlite_int64)sqlite3_value_int64(arg1);
  _outv = SWIG_From_long_SS_long((long long)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_value_text (const octave_value_list& args, int nargout) {
  sqlite3_value *arg1 = (sqlite3_value *) 0 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_value_text",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_Mem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_value_text" "', argument " "1"" of type '" "sqlite3_value *""'"); 
  }
  arg1 = (sqlite3_value *)(argp1);
  result = (unsigned char *)sqlite3_value_text(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_value_text16 (const octave_value_list& args, int nargout) {
  sqlite3_value *arg1 = (sqlite3_value *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_value_text16",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_Mem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_value_text16" "', argument " "1"" of type '" "sqlite3_value *""'"); 
  }
  arg1 = (sqlite3_value *)(argp1);
  result = (void *)sqlite3_value_text16(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_value_text16le (const octave_value_list& args, int nargout) {
  sqlite3_value *arg1 = (sqlite3_value *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_value_text16le",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_Mem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_value_text16le" "', argument " "1"" of type '" "sqlite3_value *""'"); 
  }
  arg1 = (sqlite3_value *)(argp1);
  result = (void *)sqlite3_value_text16le(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_value_text16be (const octave_value_list& args, int nargout) {
  sqlite3_value *arg1 = (sqlite3_value *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_value_text16be",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_Mem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_value_text16be" "', argument " "1"" of type '" "sqlite3_value *""'"); 
  }
  arg1 = (sqlite3_value *)(argp1);
  result = (void *)sqlite3_value_text16be(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_value_type (const octave_value_list& args, int nargout) {
  sqlite3_value *arg1 = (sqlite3_value *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_value_type",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_Mem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_value_type" "', argument " "1"" of type '" "sqlite3_value *""'"); 
  }
  arg1 = (sqlite3_value *)(argp1);
  result = (int)sqlite3_value_type(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_value_numeric_type (const octave_value_list& args, int nargout) {
  sqlite3_value *arg1 = (sqlite3_value *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_value_numeric_type",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_Mem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_value_numeric_type" "', argument " "1"" of type '" "sqlite3_value *""'"); 
  }
  arg1 = (sqlite3_value *)(argp1);
  result = (int)sqlite3_value_numeric_type(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_aggregate_context (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  int arg2 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_aggregate_context",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_aggregate_context" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_aggregate_context" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (void *)sqlite3_aggregate_context(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_user_data (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_user_data",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_user_data" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  result = (void *)sqlite3_user_data(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_get_auxdata (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  int arg2 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_get_auxdata",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_get_auxdata" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_get_auxdata" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (void *)sqlite3_get_auxdata(arg1,arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_set_auxdata (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  void (*arg4)(void *) = (void (*)(void *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_set_auxdata",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_set_auxdata" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_set_auxdata" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args(2),SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_set_auxdata" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(3), (void**)(&arg4), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_set_auxdata" "', argument " "4"" of type '" "void (*)(void *)""'"); 
    }
  }
  sqlite3_set_auxdata(arg1,arg2,arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_result_blob (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void (*arg4)(void *) = (void (*)(void *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_result_blob",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_result_blob" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_result_blob" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_result_blob" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    int res = SWIG_ConvertFunctionPtr(args(3), (void**)(&arg4), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_result_blob" "', argument " "4"" of type '" "void (*)(void *)""'"); 
    }
  }
  sqlite3_result_blob(arg1,(void const *)arg2,arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_result_double (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_result_double",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_result_double" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_result_double" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  sqlite3_result_double(arg1,arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_result_error (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_result_error",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_result_error" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_result_error" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_result_error" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  sqlite3_result_error(arg1,(char const *)arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_result_error16 (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_result_error16",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_result_error16" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_result_error16" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_result_error16" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  sqlite3_result_error16(arg1,(void const *)arg2,arg3);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_result_error_toobig (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_result_error_toobig",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_result_error_toobig" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  sqlite3_result_error_toobig(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_result_int (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_result_int",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_result_int" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_result_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  sqlite3_result_int(arg1,arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_result_int64 (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  sqlite_int64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_result_int64",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_result_int64" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_result_int64" "', argument " "2"" of type '" "sqlite_int64""'");
  } 
  arg2 = (sqlite_int64)(val2);
  sqlite3_result_int64(arg1,arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_result_null (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_result_null",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_result_null" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  sqlite3_result_null(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_result_text (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void (*arg4)(void *) = (void (*)(void *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_result_text",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_result_text" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_result_text" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_result_text" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    int res = SWIG_ConvertFunctionPtr(args(3), (void**)(&arg4), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_result_text" "', argument " "4"" of type '" "void (*)(void *)""'"); 
    }
  }
  sqlite3_result_text(arg1,(char const *)arg2,arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_result_text16 (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void (*arg4)(void *) = (void (*)(void *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_result_text16",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_result_text16" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_result_text16" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_result_text16" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    int res = SWIG_ConvertFunctionPtr(args(3), (void**)(&arg4), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_result_text16" "', argument " "4"" of type '" "void (*)(void *)""'"); 
    }
  }
  sqlite3_result_text16(arg1,(void const *)arg2,arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_result_text16le (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void (*arg4)(void *) = (void (*)(void *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_result_text16le",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_result_text16le" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_result_text16le" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_result_text16le" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    int res = SWIG_ConvertFunctionPtr(args(3), (void**)(&arg4), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_result_text16le" "', argument " "4"" of type '" "void (*)(void *)""'"); 
    }
  }
  sqlite3_result_text16le(arg1,(void const *)arg2,arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_result_text16be (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  void (*arg4)(void *) = (void (*)(void *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_result_text16be",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_result_text16be" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_result_text16be" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_result_text16be" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    int res = SWIG_ConvertFunctionPtr(args(3), (void**)(&arg4), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_result_text16be" "', argument " "4"" of type '" "void (*)(void *)""'"); 
    }
  }
  sqlite3_result_text16be(arg1,(void const *)arg2,arg3,arg4);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_result_value (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  sqlite3_value *arg2 = (sqlite3_value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_result_value",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_result_value" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_Mem, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_result_value" "', argument " "2"" of type '" "sqlite3_value *""'"); 
  }
  arg2 = (sqlite3_value *)(argp2);
  sqlite3_result_value(arg1,arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_result_zeroblob (const octave_value_list& args, int nargout) {
  sqlite3_context *arg1 = (sqlite3_context *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_result_zeroblob",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_result_zeroblob" "', argument " "1"" of type '" "sqlite3_context *""'"); 
  }
  arg1 = (sqlite3_context *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_result_zeroblob" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  sqlite3_result_zeroblob(arg1,arg2);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_create_collation (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int (*arg5)(void *,int,void const *,int,void const *) = (int (*)(void *,int,void const *,int,void const *)) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_create_collation",args.length(),5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_create_collation" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_create_collation" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_create_collation" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  res4 = SWIG_ConvertPtr(args(3),SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "sqlite3_create_collation" "', argument " "4"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(4), (void**)(&arg5), SWIGTYPE_p_f_p_void_int_p_q_const__void_int_p_q_const__void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_create_collation" "', argument " "5"" of type '" "int (*)(void *,int,void const *,int,void const *)""'"); 
    }
  }
  result = (int)sqlite3_create_collation(arg1,(char const *)arg2,arg3,arg4,arg5);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_create_collation_v2 (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int (*arg5)(void *,int,void const *,int,void const *) = (int (*)(void *,int,void const *,int,void const *)) 0 ;
  void (*arg6)(void *) = (void (*)(void *)) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_create_collation_v2",args.length(),6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_create_collation_v2" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_create_collation_v2" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_create_collation_v2" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  res4 = SWIG_ConvertPtr(args(3),SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "sqlite3_create_collation_v2" "', argument " "4"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(4), (void**)(&arg5), SWIGTYPE_p_f_p_void_int_p_q_const__void_int_p_q_const__void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_create_collation_v2" "', argument " "5"" of type '" "int (*)(void *,int,void const *,int,void const *)""'"); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(5), (void**)(&arg6), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_create_collation_v2" "', argument " "6"" of type '" "void (*)(void *)""'"); 
    }
  }
  result = (int)sqlite3_create_collation_v2(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_create_collation16 (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int (*arg5)(void *,int,void const *,int,void const *) = (int (*)(void *,int,void const *,int,void const *)) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_create_collation16",args.length(),5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_create_collation16" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_create_collation16" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_create_collation16" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  res4 = SWIG_ConvertPtr(args(3),SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "sqlite3_create_collation16" "', argument " "4"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(4), (void**)(&arg5), SWIGTYPE_p_f_p_void_int_p_q_const__void_int_p_q_const__void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_create_collation16" "', argument " "5"" of type '" "int (*)(void *,int,void const *,int,void const *)""'"); 
    }
  }
  result = (int)sqlite3_create_collation16(arg1,(char const *)arg2,arg3,arg4,arg5);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_collation_needed (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  void *arg2 = (void *) 0 ;
  void (*arg3)(void *,sqlite3 *,int,char const *) = (void (*)(void *,sqlite3 *,int,char const *)) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_collation_needed",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_collation_needed" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_collation_needed" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(2), (void**)(&arg3), SWIGTYPE_p_f_p_void_p_sqlite3_int_p_q_const__char__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_collation_needed" "', argument " "3"" of type '" "void (*)(void *,sqlite3 *,int,char const *)""'"); 
    }
  }
  result = (int)sqlite3_collation_needed(arg1,arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_collation_needed16 (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  void *arg2 = (void *) 0 ;
  void (*arg3)(void *,sqlite3 *,int,void const *) = (void (*)(void *,sqlite3 *,int,void const *)) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_collation_needed16",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_collation_needed16" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_collation_needed16" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(2), (void**)(&arg3), SWIGTYPE_p_f_p_void_p_sqlite3_int_p_q_const__void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_collation_needed16" "', argument " "3"" of type '" "void (*)(void *,sqlite3 *,int,void const *)""'"); 
    }
  }
  result = (int)sqlite3_collation_needed16(arg1,arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_sleep (const octave_value_list& args, int nargout) {
  int arg1 ;
  int result;
  int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_sleep",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sqlite3_sleep" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (int)sqlite3_sleep(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_temp_directory_set(const octave_value_list& args,int nargout) {
  if (!SWIG_check_num_args("sqlite3_temp_directory_set",args.length(),1,1,0)) return octave_value_list();
  
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(args(0), &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""sqlite3_temp_directory""' of type '""char *""'");
    }
    if (sqlite3_temp_directory) delete[] sqlite3_temp_directory;
    if (alloc == SWIG_NEWOBJ) {
      sqlite3_temp_directory = cptr;
    } else {
      sqlite3_temp_directory = csize ? (char *)(char*)(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
fail:
  return octave_value_list();
}


static octave_value_list _wrap_sqlite3_temp_directory_get(const octave_value_list& args,int nargout) {
  octave_value obj;
  
  obj = SWIG_FromCharPtr(sqlite3_temp_directory);
  return obj;
}


static octave_value_list _wrap_sqlite3_get_autocommit (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_get_autocommit",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_get_autocommit" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  result = (int)sqlite3_get_autocommit(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_db_handle (const octave_value_list& args, int nargout) {
  sqlite3_stmt *arg1 = (sqlite3_stmt *) 0 ;
  sqlite3 *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_db_handle",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_stmt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_db_handle" "', argument " "1"" of type '" "sqlite3_stmt *""'"); 
  }
  arg1 = (sqlite3_stmt *)(argp1);
  result = (sqlite3 *)sqlite3_db_handle(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sqlite3, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_commit_hook (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  int (*arg2)(void *) = (int (*)(void *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_commit_hook",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_commit_hook" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_commit_hook" "', argument " "2"" of type '" "int (*)(void *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args(2),SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_commit_hook" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (void *)sqlite3_commit_hook(arg1,arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_rollback_hook (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  void (*arg2)(void *) = (void (*)(void *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_rollback_hook",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_rollback_hook" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_rollback_hook" "', argument " "2"" of type '" "void (*)(void *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args(2),SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_rollback_hook" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (void *)sqlite3_rollback_hook(arg1,arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_update_hook (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  void (*arg2)(void *,int,char const *,char const *,sqlite_int64) = (void (*)(void *,int,char const *,char const *,sqlite_int64)) 0 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_update_hook",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_update_hook" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_void_int_p_q_const__char_p_q_const__char_long_long__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_update_hook" "', argument " "2"" of type '" "void (*)(void *,int,char const *,char const *,sqlite_int64)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(args(2),SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_update_hook" "', argument " "3"" of type '" "void *""'"); 
  }
  result = (void *)sqlite3_update_hook(arg1,arg2,arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_enable_shared_cache (const octave_value_list& args, int nargout) {
  int arg1 ;
  int result;
  int val1 ;
  int ecode1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_enable_shared_cache",args.length(),1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(args(0), &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sqlite3_enable_shared_cache" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (int)sqlite3_enable_shared_cache(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_thread_cleanup (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_thread_cleanup",args.length(),0,0,0)) {
    SWIG_fail;
  }
  sqlite3_thread_cleanup();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_table_column_metadata (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char **arg5 = (char **) 0 ;
  char **arg6 = (char **) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_table_column_metadata",args.length(),9,9,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_table_column_metadata" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_table_column_metadata" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_table_column_metadata" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "sqlite3_table_column_metadata" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  res5 = SWIG_ConvertPtr(args(4), &argp5,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "sqlite3_table_column_metadata" "', argument " "5"" of type '" "char const **""'"); 
  }
  arg5 = (char **)(argp5);
  res6 = SWIG_ConvertPtr(args(5), &argp6,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "sqlite3_table_column_metadata" "', argument " "6"" of type '" "char const **""'"); 
  }
  arg6 = (char **)(argp6);
  res7 = SWIG_ConvertPtr(args(6), &argp7,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "sqlite3_table_column_metadata" "', argument " "7"" of type '" "int *""'"); 
  }
  arg7 = (int *)(argp7);
  res8 = SWIG_ConvertPtr(args(7), &argp8,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "sqlite3_table_column_metadata" "', argument " "8"" of type '" "int *""'"); 
  }
  arg8 = (int *)(argp8);
  res9 = SWIG_ConvertPtr(args(8), &argp9,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "sqlite3_table_column_metadata" "', argument " "9"" of type '" "int *""'"); 
  }
  arg9 = (int *)(argp9);
  result = (int)sqlite3_table_column_metadata(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const **)arg5,(char const **)arg6,arg7,arg8,arg9);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_load_extension (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char **arg4 = (char **) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_load_extension",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_load_extension" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_load_extension" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_load_extension" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_ConvertPtr(args(3), &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "sqlite3_load_extension" "', argument " "4"" of type '" "char **""'"); 
  }
  arg4 = (char **)(argp4);
  result = (int)sqlite3_load_extension(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_enable_load_extension (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_enable_load_extension",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_enable_load_extension" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_enable_load_extension" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (int)sqlite3_enable_load_extension(arg1,arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_auto_extension (const octave_value_list& args, int nargout) {
  void *arg1 = (void *) 0 ;
  int result;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_auto_extension",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_auto_extension" "', argument " "1"" of type '" "void *""'"); 
  }
  result = (int)sqlite3_auto_extension(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_reset_auto_extension (const octave_value_list& args, int nargout) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_reset_auto_extension",args.length(),0,0,0)) {
    SWIG_fail;
  }
  sqlite3_reset_auto_extension();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_iVersion_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_iVersion_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_iVersion_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_module_iVersion_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->iVersion = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_iVersion_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_iVersion_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_iVersion_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int) ((arg1)->iVersion);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xCreate_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3 *,void *,int,char const *const *,sqlite3_vtab **,char **) = (int (*)(sqlite3 *,void *,int,char const *const *,sqlite3_vtab **,char **)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xCreate_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xCreate_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_p_void_int_p_q_const__p_q_const__char_p_p_sqlite3_vtab_p_p_char__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xCreate_set" "', argument " "2"" of type '" "int (*)(sqlite3 *,void *,int,char const *const *,sqlite3_vtab **,char **)""'"); 
    }
  }
  if (arg1) (arg1)->xCreate = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xCreate_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3 *,void *,int,char const *const *,sqlite3_vtab **,char **) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xCreate_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xCreate_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3 *,void *,int,char const *const *,sqlite3_vtab **,char **)) ((arg1)->xCreate);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_p_void_int_p_q_const__p_q_const__char_p_p_sqlite3_vtab_p_p_char__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xConnect_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3 *,void *,int,char const *const *,sqlite3_vtab **,char **) = (int (*)(sqlite3 *,void *,int,char const *const *,sqlite3_vtab **,char **)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xConnect_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xConnect_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_p_void_int_p_q_const__p_q_const__char_p_p_sqlite3_vtab_p_p_char__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xConnect_set" "', argument " "2"" of type '" "int (*)(sqlite3 *,void *,int,char const *const *,sqlite3_vtab **,char **)""'"); 
    }
  }
  if (arg1) (arg1)->xConnect = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xConnect_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3 *,void *,int,char const *const *,sqlite3_vtab **,char **) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xConnect_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xConnect_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3 *,void *,int,char const *const *,sqlite3_vtab **,char **)) ((arg1)->xConnect);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_p_void_int_p_q_const__p_q_const__char_p_p_sqlite3_vtab_p_p_char__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xBestIndex_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab *,sqlite3_index_info *) = (int (*)(sqlite3_vtab *,sqlite3_index_info *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xBestIndex_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xBestIndex_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab_p_sqlite3_index_info__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xBestIndex_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab *,sqlite3_index_info *)""'"); 
    }
  }
  if (arg1) (arg1)->xBestIndex = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xBestIndex_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab *,sqlite3_index_info *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xBestIndex_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xBestIndex_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab *,sqlite3_index_info *)) ((arg1)->xBestIndex);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab_p_sqlite3_index_info__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xDisconnect_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab *) = (int (*)(sqlite3_vtab *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xDisconnect_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xDisconnect_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xDisconnect_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab *)""'"); 
    }
  }
  if (arg1) (arg1)->xDisconnect = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xDisconnect_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xDisconnect_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xDisconnect_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab *)) ((arg1)->xDisconnect);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xDestroy_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab *) = (int (*)(sqlite3_vtab *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xDestroy_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xDestroy_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xDestroy_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab *)""'"); 
    }
  }
  if (arg1) (arg1)->xDestroy = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xDestroy_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xDestroy_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xDestroy_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab *)) ((arg1)->xDestroy);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xOpen_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab *,sqlite3_vtab_cursor **) = (int (*)(sqlite3_vtab *,sqlite3_vtab_cursor **)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xOpen_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xOpen_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab_p_p_sqlite3_vtab_cursor__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xOpen_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab *,sqlite3_vtab_cursor **)""'"); 
    }
  }
  if (arg1) (arg1)->xOpen = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xOpen_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab *,sqlite3_vtab_cursor **) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xOpen_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xOpen_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab *,sqlite3_vtab_cursor **)) ((arg1)->xOpen);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab_p_p_sqlite3_vtab_cursor__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xClose_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab_cursor *) = (int (*)(sqlite3_vtab_cursor *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xClose_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xClose_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab_cursor__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xClose_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab_cursor *)""'"); 
    }
  }
  if (arg1) (arg1)->xClose = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xClose_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab_cursor *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xClose_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xClose_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab_cursor *)) ((arg1)->xClose);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab_cursor__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xFilter_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab_cursor *,int,char const *,int,sqlite3_value **) = (int (*)(sqlite3_vtab_cursor *,int,char const *,int,sqlite3_value **)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xFilter_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xFilter_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab_cursor_int_p_q_const__char_int_p_p_Mem__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xFilter_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab_cursor *,int,char const *,int,sqlite3_value **)""'"); 
    }
  }
  if (arg1) (arg1)->xFilter = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xFilter_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab_cursor *,int,char const *,int,sqlite3_value **) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xFilter_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xFilter_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab_cursor *,int,char const *,int,sqlite3_value **)) ((arg1)->xFilter);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab_cursor_int_p_q_const__char_int_p_p_Mem__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xNext_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab_cursor *) = (int (*)(sqlite3_vtab_cursor *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xNext_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xNext_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab_cursor__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xNext_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab_cursor *)""'"); 
    }
  }
  if (arg1) (arg1)->xNext = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xNext_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab_cursor *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xNext_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xNext_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab_cursor *)) ((arg1)->xNext);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab_cursor__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xEof_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab_cursor *) = (int (*)(sqlite3_vtab_cursor *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xEof_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xEof_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab_cursor__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xEof_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab_cursor *)""'"); 
    }
  }
  if (arg1) (arg1)->xEof = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xEof_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab_cursor *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xEof_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xEof_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab_cursor *)) ((arg1)->xEof);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab_cursor__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xColumn_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab_cursor *,sqlite3_context *,int) = (int (*)(sqlite3_vtab_cursor *,sqlite3_context *,int)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xColumn_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xColumn_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab_cursor_p_sqlite3_context_int__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xColumn_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab_cursor *,sqlite3_context *,int)""'"); 
    }
  }
  if (arg1) (arg1)->xColumn = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xColumn_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab_cursor *,sqlite3_context *,int) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xColumn_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xColumn_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab_cursor *,sqlite3_context *,int)) ((arg1)->xColumn);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab_cursor_p_sqlite3_context_int__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xRowid_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab_cursor *,sqlite_int64 *) = (int (*)(sqlite3_vtab_cursor *,sqlite_int64 *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xRowid_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xRowid_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab_cursor_p_long_long__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xRowid_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab_cursor *,sqlite_int64 *)""'"); 
    }
  }
  if (arg1) (arg1)->xRowid = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xRowid_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab_cursor *,sqlite_int64 *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xRowid_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xRowid_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab_cursor *,sqlite_int64 *)) ((arg1)->xRowid);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab_cursor_p_long_long__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xUpdate_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab *,int,sqlite3_value **,sqlite_int64 *) = (int (*)(sqlite3_vtab *,int,sqlite3_value **,sqlite_int64 *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xUpdate_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xUpdate_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab_int_p_p_Mem_p_long_long__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xUpdate_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab *,int,sqlite3_value **,sqlite_int64 *)""'"); 
    }
  }
  if (arg1) (arg1)->xUpdate = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xUpdate_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab *,int,sqlite3_value **,sqlite_int64 *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xUpdate_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xUpdate_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab *,int,sqlite3_value **,sqlite_int64 *)) ((arg1)->xUpdate);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab_int_p_p_Mem_p_long_long__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xBegin_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab *) = (int (*)(sqlite3_vtab *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xBegin_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xBegin_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xBegin_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab *)""'"); 
    }
  }
  if (arg1) (arg1)->xBegin = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xBegin_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xBegin_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xBegin_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab *)) ((arg1)->xBegin);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xSync_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab *) = (int (*)(sqlite3_vtab *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xSync_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xSync_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xSync_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab *)""'"); 
    }
  }
  if (arg1) (arg1)->xSync = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xSync_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xSync_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xSync_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab *)) ((arg1)->xSync);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xCommit_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab *) = (int (*)(sqlite3_vtab *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xCommit_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xCommit_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xCommit_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab *)""'"); 
    }
  }
  if (arg1) (arg1)->xCommit = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xCommit_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xCommit_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xCommit_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab *)) ((arg1)->xCommit);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xRollback_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab *) = (int (*)(sqlite3_vtab *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xRollback_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xRollback_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xRollback_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab *)""'"); 
    }
  }
  if (arg1) (arg1)->xRollback = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xRollback_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xRollback_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xRollback_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab *)) ((arg1)->xRollback);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xFindFunction_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab *,int,char const *,void (**)(sqlite3_context *,int,sqlite3_value **),void **) = (int (*)(sqlite3_vtab *,int,char const *,void (**)(sqlite3_context *,int,sqlite3_value **),void **)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xFindFunction_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xFindFunction_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab_int_p_q_const__char_p_p_f_p_sqlite3_context_int_p_p_Mem__void_p_p_void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xFindFunction_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab *,int,char const *,void (**)(sqlite3_context *,int,sqlite3_value **),void **)""'"); 
    }
  }
  if (arg1) (arg1)->xFindFunction = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xFindFunction_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab *,int,char const *,void (**)(sqlite3_context *,int,sqlite3_value **),void **) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xFindFunction_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xFindFunction_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab *,int,char const *,void (**)(sqlite3_context *,int,sqlite3_value **),void **)) ((arg1)->xFindFunction);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab_int_p_q_const__char_p_p_f_p_sqlite3_context_int_p_p_Mem__void_p_p_void__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xRename_set (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*arg2)(sqlite3_vtab *,char const *) = (int (*)(sqlite3_vtab *,char const *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xRename_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xRename_set" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args(1), (void**)(&arg2), SWIGTYPE_p_f_p_sqlite3_vtab_p_q_const__char__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_module_xRename_set" "', argument " "2"" of type '" "int (*)(sqlite3_vtab *,char const *)""'"); 
    }
  }
  if (arg1) (arg1)->xRename = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_module_xRename_get (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  int (*result)(sqlite3_vtab *,char const *) = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_module_xRename_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_module_xRename_get" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  result = (int (*)(sqlite3_vtab *,char const *)) ((arg1)->xRename);
  _outv = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_sqlite3_vtab_p_q_const__char__int);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_sqlite3_module (const octave_value_list& args, int nargout) {
  sqlite3_module *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_sqlite3_module",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (sqlite3_module *)new sqlite3_module();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sqlite3_module, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_sqlite3_module (const octave_value_list& args, int nargout) {
  sqlite3_module *arg1 = (sqlite3_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_sqlite3_module",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sqlite3_module" "', argument " "1"" of type '" "sqlite3_module *""'"); 
  }
  arg1 = (sqlite3_module *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_sqlite3_module_members[] = {
{"iVersion",0,_wrap_sqlite3_module_iVersion_get,_wrap_sqlite3_module_iVersion_set,0,0},
{"xCreate",0,_wrap_sqlite3_module_xCreate_get,_wrap_sqlite3_module_xCreate_set,0,0},
{"xConnect",0,_wrap_sqlite3_module_xConnect_get,_wrap_sqlite3_module_xConnect_set,0,0},
{"xBestIndex",0,_wrap_sqlite3_module_xBestIndex_get,_wrap_sqlite3_module_xBestIndex_set,0,0},
{"xDisconnect",0,_wrap_sqlite3_module_xDisconnect_get,_wrap_sqlite3_module_xDisconnect_set,0,0},
{"xDestroy",0,_wrap_sqlite3_module_xDestroy_get,_wrap_sqlite3_module_xDestroy_set,0,0},
{"xOpen",0,_wrap_sqlite3_module_xOpen_get,_wrap_sqlite3_module_xOpen_set,0,0},
{"xClose",0,_wrap_sqlite3_module_xClose_get,_wrap_sqlite3_module_xClose_set,0,0},
{"xFilter",0,_wrap_sqlite3_module_xFilter_get,_wrap_sqlite3_module_xFilter_set,0,0},
{"xNext",0,_wrap_sqlite3_module_xNext_get,_wrap_sqlite3_module_xNext_set,0,0},
{"xEof",0,_wrap_sqlite3_module_xEof_get,_wrap_sqlite3_module_xEof_set,0,0},
{"xColumn",0,_wrap_sqlite3_module_xColumn_get,_wrap_sqlite3_module_xColumn_set,0,0},
{"xRowid",0,_wrap_sqlite3_module_xRowid_get,_wrap_sqlite3_module_xRowid_set,0,0},
{"xUpdate",0,_wrap_sqlite3_module_xUpdate_get,_wrap_sqlite3_module_xUpdate_set,0,0},
{"xBegin",0,_wrap_sqlite3_module_xBegin_get,_wrap_sqlite3_module_xBegin_set,0,0},
{"xSync",0,_wrap_sqlite3_module_xSync_get,_wrap_sqlite3_module_xSync_set,0,0},
{"xCommit",0,_wrap_sqlite3_module_xCommit_get,_wrap_sqlite3_module_xCommit_set,0,0},
{"xRollback",0,_wrap_sqlite3_module_xRollback_get,_wrap_sqlite3_module_xRollback_set,0,0},
{"xFindFunction",0,_wrap_sqlite3_module_xFindFunction_get,_wrap_sqlite3_module_xFindFunction_set,0,0},
{"xRename",0,_wrap_sqlite3_module_xRename_get,_wrap_sqlite3_module_xRename_set,0,0},
{0,0,0,0}
};
static const char *swig_sqlite3_module_base_names[] = {0};
static const swig_type_info *swig_sqlite3_module_base[] = {0};
static swig_octave_class _wrap_class_sqlite3_module = {"sqlite3_module", &SWIGTYPE_p_sqlite3_module,0,_wrap_new_sqlite3_module,_wrap_delete_sqlite3_module,swig_sqlite3_module_members,swig_sqlite3_module_base_names,swig_sqlite3_module_base };

static octave_value_list _wrap_sqlite3_index_info_nConstraint_get (const octave_value_list& args, int nargout) {
  sqlite3_index_info *arg1 = (sqlite3_index_info *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_nConstraint_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_nConstraint_get" "', argument " "1"" of type '" "sqlite3_index_info *""'"); 
  }
  arg1 = (sqlite3_index_info *)(argp1);
  result = (int)(int) ((arg1)->nConstraint);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_nOrderBy_get (const octave_value_list& args, int nargout) {
  sqlite3_index_info *arg1 = (sqlite3_index_info *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_nOrderBy_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_nOrderBy_get" "', argument " "1"" of type '" "sqlite3_index_info *""'"); 
  }
  arg1 = (sqlite3_index_info *)(argp1);
  result = (int)(int) ((arg1)->nOrderBy);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_idxNum_set (const octave_value_list& args, int nargout) {
  sqlite3_index_info *arg1 = (sqlite3_index_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_idxNum_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_idxNum_set" "', argument " "1"" of type '" "sqlite3_index_info *""'"); 
  }
  arg1 = (sqlite3_index_info *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_index_info_idxNum_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->idxNum = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_idxNum_get (const octave_value_list& args, int nargout) {
  sqlite3_index_info *arg1 = (sqlite3_index_info *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_idxNum_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_idxNum_get" "', argument " "1"" of type '" "sqlite3_index_info *""'"); 
  }
  arg1 = (sqlite3_index_info *)(argp1);
  result = (int) ((arg1)->idxNum);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_idxStr_set (const octave_value_list& args, int nargout) {
  sqlite3_index_info *arg1 = (sqlite3_index_info *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_idxStr_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_idxStr_set" "', argument " "1"" of type '" "sqlite3_index_info *""'"); 
  }
  arg1 = (sqlite3_index_info *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_index_info_idxStr_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->idxStr) delete[] arg1->idxStr;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->idxStr = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->idxStr = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_idxStr_get (const octave_value_list& args, int nargout) {
  sqlite3_index_info *arg1 = (sqlite3_index_info *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_idxStr_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_idxStr_get" "', argument " "1"" of type '" "sqlite3_index_info *""'"); 
  }
  arg1 = (sqlite3_index_info *)(argp1);
  result = (char *) ((arg1)->idxStr);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_needToFreeIdxStr_set (const octave_value_list& args, int nargout) {
  sqlite3_index_info *arg1 = (sqlite3_index_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_needToFreeIdxStr_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_needToFreeIdxStr_set" "', argument " "1"" of type '" "sqlite3_index_info *""'"); 
  }
  arg1 = (sqlite3_index_info *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_index_info_needToFreeIdxStr_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->needToFreeIdxStr = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_needToFreeIdxStr_get (const octave_value_list& args, int nargout) {
  sqlite3_index_info *arg1 = (sqlite3_index_info *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_needToFreeIdxStr_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_needToFreeIdxStr_get" "', argument " "1"" of type '" "sqlite3_index_info *""'"); 
  }
  arg1 = (sqlite3_index_info *)(argp1);
  result = (int) ((arg1)->needToFreeIdxStr);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_orderByConsumed_set (const octave_value_list& args, int nargout) {
  sqlite3_index_info *arg1 = (sqlite3_index_info *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_orderByConsumed_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_orderByConsumed_set" "', argument " "1"" of type '" "sqlite3_index_info *""'"); 
  }
  arg1 = (sqlite3_index_info *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_index_info_orderByConsumed_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->orderByConsumed = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_orderByConsumed_get (const octave_value_list& args, int nargout) {
  sqlite3_index_info *arg1 = (sqlite3_index_info *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_orderByConsumed_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_orderByConsumed_get" "', argument " "1"" of type '" "sqlite3_index_info *""'"); 
  }
  arg1 = (sqlite3_index_info *)(argp1);
  result = (int) ((arg1)->orderByConsumed);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_estimatedCost_set (const octave_value_list& args, int nargout) {
  sqlite3_index_info *arg1 = (sqlite3_index_info *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_estimatedCost_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_estimatedCost_set" "', argument " "1"" of type '" "sqlite3_index_info *""'"); 
  }
  arg1 = (sqlite3_index_info *)(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_index_info_estimatedCost_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = (double)(val2);
  if (arg1) (arg1)->estimatedCost = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_estimatedCost_get (const octave_value_list& args, int nargout) {
  sqlite3_index_info *arg1 = (sqlite3_index_info *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_estimatedCost_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_estimatedCost_get" "', argument " "1"" of type '" "sqlite3_index_info *""'"); 
  }
  arg1 = (sqlite3_index_info *)(argp1);
  result = (double) ((arg1)->estimatedCost);
  _outv = SWIG_From_double((double)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_aConstraintUsage_get (const octave_value_list& args, int nargout) {
  sqlite3_index_info *arg1 = (sqlite3_index_info *) 0 ;
  sqlite3_index_info_aConstraintUsage *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_aConstraintUsage_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_aConstraintUsage_get" "', argument " "1"" of type '" "sqlite3_index_info *""'"); 
  }
  arg1 = (sqlite3_index_info *)(argp1);
  result = (sqlite3_index_info_aConstraintUsage *)(sqlite3_index_info_aConstraintUsage *) ((arg1)->aConstraintUsage);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sqlite3_index_info_aConstraintUsage, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_sqlite3_index_info (const octave_value_list& args, int nargout) {
  sqlite3_index_info *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_sqlite3_index_info",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (sqlite3_index_info *)new sqlite3_index_info();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sqlite3_index_info, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_sqlite3_index_info (const octave_value_list& args, int nargout) {
  sqlite3_index_info *arg1 = (sqlite3_index_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_sqlite3_index_info",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sqlite3_index_info" "', argument " "1"" of type '" "sqlite3_index_info *""'"); 
  }
  arg1 = (sqlite3_index_info *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_sqlite3_index_info_members[] = {
{"nConstraint",0,_wrap_sqlite3_index_info_nConstraint_get,octave_set_immutable,0,0},
{"nOrderBy",0,_wrap_sqlite3_index_info_nOrderBy_get,octave_set_immutable,0,0},
{"idxNum",0,_wrap_sqlite3_index_info_idxNum_get,_wrap_sqlite3_index_info_idxNum_set,0,0},
{"idxStr",0,_wrap_sqlite3_index_info_idxStr_get,_wrap_sqlite3_index_info_idxStr_set,0,0},
{"needToFreeIdxStr",0,_wrap_sqlite3_index_info_needToFreeIdxStr_get,_wrap_sqlite3_index_info_needToFreeIdxStr_set,0,0},
{"orderByConsumed",0,_wrap_sqlite3_index_info_orderByConsumed_get,_wrap_sqlite3_index_info_orderByConsumed_set,0,0},
{"estimatedCost",0,_wrap_sqlite3_index_info_estimatedCost_get,_wrap_sqlite3_index_info_estimatedCost_set,0,0},
{"aConstraintUsage",0,_wrap_sqlite3_index_info_aConstraintUsage_get,octave_set_immutable,0,0},
{0,0,0,0}
};
static const char *swig_sqlite3_index_info_base_names[] = {0};
static const swig_type_info *swig_sqlite3_index_info_base[] = {0};
static swig_octave_class _wrap_class_sqlite3_index_info = {"sqlite3_index_info", &SWIGTYPE_p_sqlite3_index_info,0,_wrap_new_sqlite3_index_info,_wrap_delete_sqlite3_index_info,swig_sqlite3_index_info_members,swig_sqlite3_index_info_base_names,swig_sqlite3_index_info_base };

static octave_value_list _wrap_sqlite3_index_info_aConstraintUsage_argvIndex_set (const octave_value_list& args, int nargout) {
  sqlite3_index_info_aConstraintUsage *arg1 = (sqlite3_index_info_aConstraintUsage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_aConstraintUsage_argvIndex_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info_aConstraintUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_aConstraintUsage_argvIndex_set" "', argument " "1"" of type '" "sqlite3_index_info_aConstraintUsage *""'"); 
  }
  arg1 = (sqlite3_index_info_aConstraintUsage *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_index_info_aConstraintUsage_argvIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->argvIndex = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_aConstraintUsage_argvIndex_get (const octave_value_list& args, int nargout) {
  sqlite3_index_info_aConstraintUsage *arg1 = (sqlite3_index_info_aConstraintUsage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_aConstraintUsage_argvIndex_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info_aConstraintUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_aConstraintUsage_argvIndex_get" "', argument " "1"" of type '" "sqlite3_index_info_aConstraintUsage *""'"); 
  }
  arg1 = (sqlite3_index_info_aConstraintUsage *)(argp1);
  result = (int) ((arg1)->argvIndex);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_aConstraintUsage_omit_set (const octave_value_list& args, int nargout) {
  sqlite3_index_info_aConstraintUsage *arg1 = (sqlite3_index_info_aConstraintUsage *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_aConstraintUsage_omit_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info_aConstraintUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_aConstraintUsage_omit_set" "', argument " "1"" of type '" "sqlite3_index_info_aConstraintUsage *""'"); 
  }
  arg1 = (sqlite3_index_info_aConstraintUsage *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_index_info_aConstraintUsage_omit_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = (unsigned char)(val2);
  if (arg1) (arg1)->omit = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_index_info_aConstraintUsage_omit_get (const octave_value_list& args, int nargout) {
  sqlite3_index_info_aConstraintUsage *arg1 = (sqlite3_index_info_aConstraintUsage *) 0 ;
  unsigned char result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_index_info_aConstraintUsage_omit_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info_aConstraintUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_index_info_aConstraintUsage_omit_get" "', argument " "1"" of type '" "sqlite3_index_info_aConstraintUsage *""'"); 
  }
  arg1 = (sqlite3_index_info_aConstraintUsage *)(argp1);
  result = (unsigned char) ((arg1)->omit);
  _outv = SWIG_From_unsigned_SS_char((unsigned char)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_sqlite3_index_info_aConstraintUsage (const octave_value_list& args, int nargout) {
  sqlite3_index_info_aConstraintUsage *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_sqlite3_index_info_aConstraintUsage",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (sqlite3_index_info_aConstraintUsage *)new sqlite3_index_info_aConstraintUsage();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sqlite3_index_info_aConstraintUsage, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_sqlite3_index_info_aConstraintUsage (const octave_value_list& args, int nargout) {
  sqlite3_index_info_aConstraintUsage *arg1 = (sqlite3_index_info_aConstraintUsage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_sqlite3_index_info_aConstraintUsage",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_index_info_aConstraintUsage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sqlite3_index_info_aConstraintUsage" "', argument " "1"" of type '" "sqlite3_index_info_aConstraintUsage *""'"); 
  }
  arg1 = (sqlite3_index_info_aConstraintUsage *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_sqlite3_index_info_aConstraintUsage_members[] = {
{"argvIndex",0,_wrap_sqlite3_index_info_aConstraintUsage_argvIndex_get,_wrap_sqlite3_index_info_aConstraintUsage_argvIndex_set,0,0},
{"omit",0,_wrap_sqlite3_index_info_aConstraintUsage_omit_get,_wrap_sqlite3_index_info_aConstraintUsage_omit_set,0,0},
{0,0,0,0}
};
static const char *swig_sqlite3_index_info_aConstraintUsage_base_names[] = {0};
static const swig_type_info *swig_sqlite3_index_info_aConstraintUsage_base[] = {0};
static swig_octave_class _wrap_class_sqlite3_index_info_aConstraintUsage = {"sqlite3_index_info_aConstraintUsage", &SWIGTYPE_p_sqlite3_index_info_aConstraintUsage,0,_wrap_new_sqlite3_index_info_aConstraintUsage,_wrap_delete_sqlite3_index_info_aConstraintUsage,swig_sqlite3_index_info_aConstraintUsage_members,swig_sqlite3_index_info_aConstraintUsage_base_names,swig_sqlite3_index_info_aConstraintUsage_base };

static octave_value_list _wrap_sqlite3_create_module (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  sqlite3_module *arg3 = (sqlite3_module *) 0 ;
  void *arg4 = (void *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_create_module",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_create_module" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_create_module" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args(2), &argp3,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_create_module" "', argument " "3"" of type '" "sqlite3_module const *""'"); 
  }
  arg3 = (sqlite3_module *)(argp3);
  res4 = SWIG_ConvertPtr(args(3),SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "sqlite3_create_module" "', argument " "4"" of type '" "void *""'"); 
  }
  result = (int)sqlite3_create_module(arg1,(char const *)arg2,(sqlite3_module const *)arg3,arg4);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_create_module_v2 (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  sqlite3_module *arg3 = (sqlite3_module *) 0 ;
  void *arg4 = (void *) 0 ;
  void (*arg5)(void *) = (void (*)(void *)) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_create_module_v2",args.length(),5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_create_module_v2" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_create_module_v2" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_ConvertPtr(args(2), &argp3,SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_create_module_v2" "', argument " "3"" of type '" "sqlite3_module const *""'"); 
  }
  arg3 = (sqlite3_module *)(argp3);
  res4 = SWIG_ConvertPtr(args(3),SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "sqlite3_create_module_v2" "', argument " "4"" of type '" "void *""'"); 
  }
  {
    int res = SWIG_ConvertFunctionPtr(args(4), (void**)(&arg5), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "sqlite3_create_module_v2" "', argument " "5"" of type '" "void (*)(void *)""'"); 
    }
  }
  result = (int)sqlite3_create_module_v2(arg1,(char const *)arg2,(sqlite3_module const *)arg3,arg4,arg5);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_vtab_pModule_set (const octave_value_list& args, int nargout) {
  sqlite3_vtab *arg1 = (sqlite3_vtab *) 0 ;
  sqlite3_module *arg2 = (sqlite3_module *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_vtab_pModule_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_vtab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_vtab_pModule_set" "', argument " "1"" of type '" "sqlite3_vtab *""'"); 
  }
  arg1 = (sqlite3_vtab *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_sqlite3_module, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_vtab_pModule_set" "', argument " "2"" of type '" "sqlite3_module const *""'"); 
  }
  arg2 = (sqlite3_module *)(argp2);
  if (arg1) (arg1)->pModule = (sqlite3_module const *)arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_vtab_pModule_get (const octave_value_list& args, int nargout) {
  sqlite3_vtab *arg1 = (sqlite3_vtab *) 0 ;
  sqlite3_module *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_vtab_pModule_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_vtab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_vtab_pModule_get" "', argument " "1"" of type '" "sqlite3_vtab *""'"); 
  }
  arg1 = (sqlite3_vtab *)(argp1);
  result = (sqlite3_module *) ((arg1)->pModule);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sqlite3_module, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_vtab_nRef_set (const octave_value_list& args, int nargout) {
  sqlite3_vtab *arg1 = (sqlite3_vtab *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_vtab_nRef_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_vtab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_vtab_nRef_set" "', argument " "1"" of type '" "sqlite3_vtab *""'"); 
  }
  arg1 = (sqlite3_vtab *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sqlite3_vtab_nRef_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  if (arg1) (arg1)->nRef = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_vtab_nRef_get (const octave_value_list& args, int nargout) {
  sqlite3_vtab *arg1 = (sqlite3_vtab *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_vtab_nRef_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_vtab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_vtab_nRef_get" "', argument " "1"" of type '" "sqlite3_vtab *""'"); 
  }
  arg1 = (sqlite3_vtab *)(argp1);
  result = (int) ((arg1)->nRef);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_vtab_zErrMsg_set (const octave_value_list& args, int nargout) {
  sqlite3_vtab *arg1 = (sqlite3_vtab *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_vtab_zErrMsg_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_vtab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_vtab_zErrMsg_set" "', argument " "1"" of type '" "sqlite3_vtab *""'"); 
  }
  arg1 = (sqlite3_vtab *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_vtab_zErrMsg_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = (char *)(buf2);
  if (arg1->zErrMsg) delete[] arg1->zErrMsg;
  if (arg2) {
    size_t size = strlen((const char *)(arg2)) + 1;
    arg1->zErrMsg = (char *)(char*)(memcpy((new char[size]), (const char *)(arg2), sizeof(char)*(size)));
  } else {
    arg1->zErrMsg = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_vtab_zErrMsg_get (const octave_value_list& args, int nargout) {
  sqlite3_vtab *arg1 = (sqlite3_vtab *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_vtab_zErrMsg_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_vtab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_vtab_zErrMsg_get" "', argument " "1"" of type '" "sqlite3_vtab *""'"); 
  }
  arg1 = (sqlite3_vtab *)(argp1);
  result = (char *) ((arg1)->zErrMsg);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_sqlite3_vtab (const octave_value_list& args, int nargout) {
  sqlite3_vtab *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_sqlite3_vtab",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (sqlite3_vtab *)new sqlite3_vtab();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sqlite3_vtab, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_sqlite3_vtab (const octave_value_list& args, int nargout) {
  sqlite3_vtab *arg1 = (sqlite3_vtab *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_sqlite3_vtab",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_vtab, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sqlite3_vtab" "', argument " "1"" of type '" "sqlite3_vtab *""'"); 
  }
  arg1 = (sqlite3_vtab *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_sqlite3_vtab_members[] = {
{"pModule",0,_wrap_sqlite3_vtab_pModule_get,_wrap_sqlite3_vtab_pModule_set,0,0},
{"nRef",0,_wrap_sqlite3_vtab_nRef_get,_wrap_sqlite3_vtab_nRef_set,0,0},
{"zErrMsg",0,_wrap_sqlite3_vtab_zErrMsg_get,_wrap_sqlite3_vtab_zErrMsg_set,0,0},
{0,0,0,0}
};
static const char *swig_sqlite3_vtab_base_names[] = {0};
static const swig_type_info *swig_sqlite3_vtab_base[] = {0};
static swig_octave_class _wrap_class_sqlite3_vtab = {"sqlite3_vtab", &SWIGTYPE_p_sqlite3_vtab,0,_wrap_new_sqlite3_vtab,_wrap_delete_sqlite3_vtab,swig_sqlite3_vtab_members,swig_sqlite3_vtab_base_names,swig_sqlite3_vtab_base };

static octave_value_list _wrap_sqlite3_vtab_cursor_pVtab_set (const octave_value_list& args, int nargout) {
  sqlite3_vtab_cursor *arg1 = (sqlite3_vtab_cursor *) 0 ;
  sqlite3_vtab *arg2 = (sqlite3_vtab *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_vtab_cursor_pVtab_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_vtab_cursor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_vtab_cursor_pVtab_set" "', argument " "1"" of type '" "sqlite3_vtab_cursor *""'"); 
  }
  arg1 = (sqlite3_vtab_cursor *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_sqlite3_vtab, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_vtab_cursor_pVtab_set" "', argument " "2"" of type '" "sqlite3_vtab *""'"); 
  }
  arg2 = (sqlite3_vtab *)(argp2);
  if (arg1) (arg1)->pVtab = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_vtab_cursor_pVtab_get (const octave_value_list& args, int nargout) {
  sqlite3_vtab_cursor *arg1 = (sqlite3_vtab_cursor *) 0 ;
  sqlite3_vtab *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_vtab_cursor_pVtab_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_vtab_cursor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_vtab_cursor_pVtab_get" "', argument " "1"" of type '" "sqlite3_vtab_cursor *""'"); 
  }
  arg1 = (sqlite3_vtab_cursor *)(argp1);
  result = (sqlite3_vtab *) ((arg1)->pVtab);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sqlite3_vtab, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_sqlite3_vtab_cursor (const octave_value_list& args, int nargout) {
  sqlite3_vtab_cursor *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_sqlite3_vtab_cursor",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (sqlite3_vtab_cursor *)new sqlite3_vtab_cursor();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sqlite3_vtab_cursor, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_sqlite3_vtab_cursor (const octave_value_list& args, int nargout) {
  sqlite3_vtab_cursor *arg1 = (sqlite3_vtab_cursor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_sqlite3_vtab_cursor",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_vtab_cursor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sqlite3_vtab_cursor" "', argument " "1"" of type '" "sqlite3_vtab_cursor *""'"); 
  }
  arg1 = (sqlite3_vtab_cursor *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static swig_octave_member swig_sqlite3_vtab_cursor_members[] = {
{"pVtab",0,_wrap_sqlite3_vtab_cursor_pVtab_get,_wrap_sqlite3_vtab_cursor_pVtab_set,0,0},
{0,0,0,0}
};
static const char *swig_sqlite3_vtab_cursor_base_names[] = {0};
static const swig_type_info *swig_sqlite3_vtab_cursor_base[] = {0};
static swig_octave_class _wrap_class_sqlite3_vtab_cursor = {"sqlite3_vtab_cursor", &SWIGTYPE_p_sqlite3_vtab_cursor,0,_wrap_new_sqlite3_vtab_cursor,_wrap_delete_sqlite3_vtab_cursor,swig_sqlite3_vtab_cursor_members,swig_sqlite3_vtab_cursor_base_names,swig_sqlite3_vtab_cursor_base };

static octave_value_list _wrap_sqlite3_declare_vtab (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_declare_vtab",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_declare_vtab" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_declare_vtab" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (int)sqlite3_declare_vtab(arg1,(char const *)arg2);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_overload_function (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_overload_function",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_overload_function" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_overload_function" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_overload_function" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (int)sqlite3_overload_function(arg1,(char const *)arg2,arg3);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_blob_open (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  sqlite_int64 arg5 ;
  int arg6 ;
  sqlite3_blob **arg7 = (sqlite3_blob **) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  long long val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_blob_open",args.length(),7,7,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_blob_open" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_blob_open" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sqlite3_blob_open" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = (char *)(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "sqlite3_blob_open" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = (char *)(buf4);
  ecode5 = SWIG_AsVal_long_SS_long(args(4), &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "sqlite3_blob_open" "', argument " "5"" of type '" "sqlite_int64""'");
  } 
  arg5 = (sqlite_int64)(val5);
  ecode6 = SWIG_AsVal_int(args(5), &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "sqlite3_blob_open" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = (int)(val6);
  res7 = SWIG_ConvertPtr(args(6), &argp7,SWIGTYPE_p_p_sqlite3_blob, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "sqlite3_blob_open" "', argument " "7"" of type '" "sqlite3_blob **""'"); 
  }
  arg7 = (sqlite3_blob **)(argp7);
  result = (int)sqlite3_blob_open(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_blob_close (const octave_value_list& args, int nargout) {
  sqlite3_blob *arg1 = (sqlite3_blob *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_blob_close",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_blob_close" "', argument " "1"" of type '" "sqlite3_blob *""'"); 
  }
  arg1 = (sqlite3_blob *)(argp1);
  result = (int)sqlite3_blob_close(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_blob_bytes (const octave_value_list& args, int nargout) {
  sqlite3_blob *arg1 = (sqlite3_blob *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_blob_bytes",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_blob_bytes" "', argument " "1"" of type '" "sqlite3_blob *""'"); 
  }
  arg1 = (sqlite3_blob *)(argp1);
  result = (int)sqlite3_blob_bytes(arg1);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_blob_read (const octave_value_list& args, int nargout) {
  sqlite3_blob *arg1 = (sqlite3_blob *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_blob_read",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_blob_read" "', argument " "1"" of type '" "sqlite3_blob *""'"); 
  }
  arg1 = (sqlite3_blob *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_blob_read" "', argument " "2"" of type '" "void *""'"); 
  }
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_blob_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sqlite3_blob_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (int)sqlite3_blob_read(arg1,arg2,arg3,arg4);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_blob_write (const octave_value_list& args, int nargout) {
  sqlite3_blob *arg1 = (sqlite3_blob *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_blob_write",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_blob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_blob_write" "', argument " "1"" of type '" "sqlite3_blob *""'"); 
  }
  arg1 = (sqlite3_blob *)(argp1);
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_blob_write" "', argument " "2"" of type '" "void const *""'"); 
  }
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sqlite3_blob_write" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args(3), &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "sqlite3_blob_write" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  result = (int)sqlite3_blob_write(arg1,(void const *)arg2,arg3,arg4);
  _outv = SWIG_From_int((int)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_delete_generic_db (const octave_value_list& args, int nargout) {
  generic_db *arg1 = (generic_db *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_generic_db",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_generic_db, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_generic_db" "', argument " "1"" of type '" "generic_db *""'"); 
  }
  arg1 = (generic_db *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_generic_db_sql (const octave_value_list& args, int nargout) {
  generic_db *arg1 = (generic_db *) 0 ;
  char *arg2 = (char *) 0 ;
  Cell result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("generic_db_sql",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_generic_db, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_db_sql" "', argument " "1"" of type '" "generic_db *""'"); 
  }
  arg1 = (generic_db *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generic_db_sql" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (arg1)->sql((char const *)arg2);
  _outv=result;
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static swig_octave_member swig_generic_db_members[] = {
{"sql",_wrap_generic_db_sql,0,0,0,0},
{0,0,0,0}
};
static const char *swig_generic_db_base_names[] = {0};
static const swig_type_info *swig_generic_db_base[] = {0};
static swig_octave_class _wrap_class_generic_db = {"generic_db", &SWIGTYPE_p_generic_db,0,0,_wrap_delete_generic_db,swig_generic_db_members,swig_generic_db_base_names,swig_generic_db_base };

static octave_value_list _wrap_error_check (const octave_value_list& args, int nargout) {
  sqlite3 *arg1 = (sqlite3 *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("error_check",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "error_check" "', argument " "1"" of type '" "sqlite3 *""'"); 
  }
  arg1 = (sqlite3 *)(argp1);
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "error_check" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (bool)error_check(arg1,arg2);
  _outv = SWIG_From_bool((bool)(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_db_db_set (const octave_value_list& args, int nargout) {
  sqlite3_db *arg1 = (sqlite3_db *) 0 ;
  sqlite3 *arg2 = (sqlite3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_db_db_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_db, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_db_db_set" "', argument " "1"" of type '" "sqlite3_db *""'"); 
  }
  arg1 = (sqlite3_db *)(argp1);
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_sqlite3, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_db_db_set" "', argument " "2"" of type '" "sqlite3 *""'"); 
  }
  arg2 = (sqlite3 *)(argp2);
  if (arg1) (arg1)->db = arg2;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_db_db_get (const octave_value_list& args, int nargout) {
  sqlite3_db *arg1 = (sqlite3_db *) 0 ;
  sqlite3 *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_db_db_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_db, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_db_db_get" "', argument " "1"" of type '" "sqlite3_db *""'"); 
  }
  arg1 = (sqlite3_db *)(argp1);
  result = (sqlite3 *) ((arg1)->db);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sqlite3, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_sqlite3_db__SWIG_0 (const octave_value_list& args, int nargout) {
  char *arg1 = (char *) 0 ;
  sqlite3_db *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_sqlite3_db",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_sqlite3_db" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  result = (sqlite3_db *)new sqlite3_db((char const *)arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sqlite3_db, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
fail:
  return _out;
}


static octave_value_list _wrap_new_sqlite3_db__SWIG_1 (const octave_value_list& args, int nargout) {
  sqlite3_db *result = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("new_sqlite3_db",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (sqlite3_db *)new sqlite3_db();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sqlite3_db, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_new_sqlite3_db (const octave_value_list& args, int nargout) {
  int argc = args.length();
  octave_value_ref argv[1]={
    octave_value_ref(args,0)
  };
  
  if (argc == 0) {
    return _wrap_new_sqlite3_db__SWIG_1(args, nargout);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_sqlite3_db__SWIG_0(args, nargout);
    }
  }
  
  error("No matching function for overload");
  return octave_value_list();
}


static octave_value_list _wrap_delete_sqlite3_db (const octave_value_list& args, int nargout) {
  sqlite3_db *arg1 = (sqlite3_db *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_sqlite3_db",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_db, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sqlite3_db" "', argument " "1"" of type '" "sqlite3_db *""'"); 
  }
  arg1 = (sqlite3_db *)(argp1);
  delete arg1;
  
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
fail:
  return _out;
}


static octave_value_list _wrap_sqlite3_db_sql (const octave_value_list& args, int nargout) {
  sqlite3_db *arg1 = (sqlite3_db *) 0 ;
  char *arg2 = (char *) 0 ;
  Cell result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("sqlite3_db_sql",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_sqlite3_db, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqlite3_db_sql" "', argument " "1"" of type '" "sqlite3_db *""'"); 
  }
  arg1 = (sqlite3_db *)(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sqlite3_db_sql" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = (char *)(buf2);
  result = (arg1)->sql((char const *)arg2);
  _outv=result;
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
fail:
  return _out;
}


static swig_octave_member swig_sqlite3_db_members[] = {
{"db",0,_wrap_sqlite3_db_db_get,_wrap_sqlite3_db_db_set,0,0},
{"sql",_wrap_sqlite3_db_sql,0,0,0,0},
{0,0,0,0}
};
static const char *swig_sqlite3_db_base_names[] = {"_p_generic_db",0};
static const swig_type_info *swig_sqlite3_db_base[] = {0,0};
static swig_octave_class _wrap_class_sqlite3_db = {"sqlite3_db", &SWIGTYPE_p_sqlite3_db,0,_wrap_new_sqlite3_db,_wrap_delete_sqlite3_db,swig_sqlite3_db_members,swig_sqlite3_db_base_names,swig_sqlite3_db_base };


static const struct swig_octave_member swig_globals[] = {
{"sqlite3_version",0,_wrap_sqlite3_version_get,_wrap_sqlite3_version_set,2,0},
{"sqlite3_libversion",_wrap_sqlite3_libversion,0,0,2,0},
{"sqlite3_libversion_number",_wrap_sqlite3_libversion_number,0,0,2,0},
{"sqlite3_close",_wrap_sqlite3_close,0,0,2,0},
{"sqlite3_exec",_wrap_sqlite3_exec,0,0,2,0},
{"sqlite3_extended_result_codes",_wrap_sqlite3_extended_result_codes,0,0,2,0},
{"sqlite3_last_insert_rowid",_wrap_sqlite3_last_insert_rowid,0,0,2,0},
{"sqlite3_changes",_wrap_sqlite3_changes,0,0,2,0},
{"sqlite3_total_changes",_wrap_sqlite3_total_changes,0,0,2,0},
{"sqlite3_interrupt",_wrap_sqlite3_interrupt,0,0,2,0},
{"sqlite3_complete",_wrap_sqlite3_complete,0,0,2,0},
{"sqlite3_complete16",_wrap_sqlite3_complete16,0,0,2,0},
{"sqlite3_busy_handler",_wrap_sqlite3_busy_handler,0,0,2,0},
{"sqlite3_busy_timeout",_wrap_sqlite3_busy_timeout,0,0,2,0},
{"sqlite3_get_table",_wrap_sqlite3_get_table,0,0,2,0},
{"sqlite3_free_table",_wrap_sqlite3_free_table,0,0,2,0},
{"sqlite3_mprintf",_wrap_sqlite3_mprintf,0,0,2,0},
{"sqlite3_vmprintf",_wrap_sqlite3_vmprintf,0,0,2,0},
{"sqlite3_snprintf",_wrap_sqlite3_snprintf,0,0,2,0},
{"sqlite3_malloc",_wrap_sqlite3_malloc,0,0,2,0},
{"sqlite3_realloc",_wrap_sqlite3_realloc,0,0,2,0},
{"sqlite3_free",_wrap_sqlite3_free,0,0,2,0},
{"sqlite3_set_authorizer",_wrap_sqlite3_set_authorizer,0,0,2,0},
{"sqlite3_trace",_wrap_sqlite3_trace,0,0,2,0},
{"sqlite3_profile",_wrap_sqlite3_profile,0,0,2,0},
{"sqlite3_progress_handler",_wrap_sqlite3_progress_handler,0,0,2,0},
{"sqlite3_open",_wrap_sqlite3_open,0,0,2,0},
{"sqlite3_open16",_wrap_sqlite3_open16,0,0,2,0},
{"sqlite3_errcode",_wrap_sqlite3_errcode,0,0,2,0},
{"sqlite3_errmsg",_wrap_sqlite3_errmsg,0,0,2,0},
{"sqlite3_errmsg16",_wrap_sqlite3_errmsg16,0,0,2,0},
{"sqlite3_prepare",_wrap_sqlite3_prepare,0,0,2,0},
{"sqlite3_prepare_v2",_wrap_sqlite3_prepare_v2,0,0,2,0},
{"sqlite3_prepare16",_wrap_sqlite3_prepare16,0,0,2,0},
{"sqlite3_prepare16_v2",_wrap_sqlite3_prepare16_v2,0,0,2,0},
{"sqlite3_bind_blob",_wrap_sqlite3_bind_blob,0,0,2,0},
{"sqlite3_bind_double",_wrap_sqlite3_bind_double,0,0,2,0},
{"sqlite3_bind_int",_wrap_sqlite3_bind_int,0,0,2,0},
{"sqlite3_bind_int64",_wrap_sqlite3_bind_int64,0,0,2,0},
{"sqlite3_bind_null",_wrap_sqlite3_bind_null,0,0,2,0},
{"sqlite3_bind_text",_wrap_sqlite3_bind_text,0,0,2,0},
{"sqlite3_bind_text16",_wrap_sqlite3_bind_text16,0,0,2,0},
{"sqlite3_bind_value",_wrap_sqlite3_bind_value,0,0,2,0},
{"sqlite3_bind_zeroblob",_wrap_sqlite3_bind_zeroblob,0,0,2,0},
{"sqlite3_bind_parameter_count",_wrap_sqlite3_bind_parameter_count,0,0,2,0},
{"sqlite3_bind_parameter_name",_wrap_sqlite3_bind_parameter_name,0,0,2,0},
{"sqlite3_bind_parameter_index",_wrap_sqlite3_bind_parameter_index,0,0,2,0},
{"sqlite3_clear_bindings",_wrap_sqlite3_clear_bindings,0,0,2,0},
{"sqlite3_column_count",_wrap_sqlite3_column_count,0,0,2,0},
{"sqlite3_column_name",_wrap_sqlite3_column_name,0,0,2,0},
{"sqlite3_column_name16",_wrap_sqlite3_column_name16,0,0,2,0},
{"sqlite3_column_database_name",_wrap_sqlite3_column_database_name,0,0,2,0},
{"sqlite3_column_database_name16",_wrap_sqlite3_column_database_name16,0,0,2,0},
{"sqlite3_column_table_name",_wrap_sqlite3_column_table_name,0,0,2,0},
{"sqlite3_column_table_name16",_wrap_sqlite3_column_table_name16,0,0,2,0},
{"sqlite3_column_origin_name",_wrap_sqlite3_column_origin_name,0,0,2,0},
{"sqlite3_column_origin_name16",_wrap_sqlite3_column_origin_name16,0,0,2,0},
{"sqlite3_column_decltype",_wrap_sqlite3_column_decltype,0,0,2,0},
{"sqlite3_column_decltype16",_wrap_sqlite3_column_decltype16,0,0,2,0},
{"sqlite3_step",_wrap_sqlite3_step,0,0,2,0},
{"sqlite3_data_count",_wrap_sqlite3_data_count,0,0,2,0},
{"sqlite3_column_blob",_wrap_sqlite3_column_blob,0,0,2,0},
{"sqlite3_column_bytes",_wrap_sqlite3_column_bytes,0,0,2,0},
{"sqlite3_column_bytes16",_wrap_sqlite3_column_bytes16,0,0,2,0},
{"sqlite3_column_double",_wrap_sqlite3_column_double,0,0,2,0},
{"sqlite3_column_int",_wrap_sqlite3_column_int,0,0,2,0},
{"sqlite3_column_int64",_wrap_sqlite3_column_int64,0,0,2,0},
{"sqlite3_column_text",_wrap_sqlite3_column_text,0,0,2,0},
{"sqlite3_column_text16",_wrap_sqlite3_column_text16,0,0,2,0},
{"sqlite3_column_type",_wrap_sqlite3_column_type,0,0,2,0},
{"sqlite3_column_value",_wrap_sqlite3_column_value,0,0,2,0},
{"sqlite3_finalize",_wrap_sqlite3_finalize,0,0,2,0},
{"sqlite3_reset",_wrap_sqlite3_reset,0,0,2,0},
{"sqlite3_create_function",_wrap_sqlite3_create_function,0,0,2,0},
{"sqlite3_create_function16",_wrap_sqlite3_create_function16,0,0,2,0},
{"sqlite3_aggregate_count",_wrap_sqlite3_aggregate_count,0,0,2,0},
{"sqlite3_expired",_wrap_sqlite3_expired,0,0,2,0},
{"sqlite3_transfer_bindings",_wrap_sqlite3_transfer_bindings,0,0,2,0},
{"sqlite3_global_recover",_wrap_sqlite3_global_recover,0,0,2,0},
{"sqlite3_value_blob",_wrap_sqlite3_value_blob,0,0,2,0},
{"sqlite3_value_bytes",_wrap_sqlite3_value_bytes,0,0,2,0},
{"sqlite3_value_bytes16",_wrap_sqlite3_value_bytes16,0,0,2,0},
{"sqlite3_value_double",_wrap_sqlite3_value_double,0,0,2,0},
{"sqlite3_value_int",_wrap_sqlite3_value_int,0,0,2,0},
{"sqlite3_value_int64",_wrap_sqlite3_value_int64,0,0,2,0},
{"sqlite3_value_text",_wrap_sqlite3_value_text,0,0,2,0},
{"sqlite3_value_text16",_wrap_sqlite3_value_text16,0,0,2,0},
{"sqlite3_value_text16le",_wrap_sqlite3_value_text16le,0,0,2,0},
{"sqlite3_value_text16be",_wrap_sqlite3_value_text16be,0,0,2,0},
{"sqlite3_value_type",_wrap_sqlite3_value_type,0,0,2,0},
{"sqlite3_value_numeric_type",_wrap_sqlite3_value_numeric_type,0,0,2,0},
{"sqlite3_aggregate_context",_wrap_sqlite3_aggregate_context,0,0,2,0},
{"sqlite3_user_data",_wrap_sqlite3_user_data,0,0,2,0},
{"sqlite3_get_auxdata",_wrap_sqlite3_get_auxdata,0,0,2,0},
{"sqlite3_set_auxdata",_wrap_sqlite3_set_auxdata,0,0,2,0},
{"sqlite3_result_blob",_wrap_sqlite3_result_blob,0,0,2,0},
{"sqlite3_result_double",_wrap_sqlite3_result_double,0,0,2,0},
{"sqlite3_result_error",_wrap_sqlite3_result_error,0,0,2,0},
{"sqlite3_result_error16",_wrap_sqlite3_result_error16,0,0,2,0},
{"sqlite3_result_error_toobig",_wrap_sqlite3_result_error_toobig,0,0,2,0},
{"sqlite3_result_int",_wrap_sqlite3_result_int,0,0,2,0},
{"sqlite3_result_int64",_wrap_sqlite3_result_int64,0,0,2,0},
{"sqlite3_result_null",_wrap_sqlite3_result_null,0,0,2,0},
{"sqlite3_result_text",_wrap_sqlite3_result_text,0,0,2,0},
{"sqlite3_result_text16",_wrap_sqlite3_result_text16,0,0,2,0},
{"sqlite3_result_text16le",_wrap_sqlite3_result_text16le,0,0,2,0},
{"sqlite3_result_text16be",_wrap_sqlite3_result_text16be,0,0,2,0},
{"sqlite3_result_value",_wrap_sqlite3_result_value,0,0,2,0},
{"sqlite3_result_zeroblob",_wrap_sqlite3_result_zeroblob,0,0,2,0},
{"sqlite3_create_collation",_wrap_sqlite3_create_collation,0,0,2,0},
{"sqlite3_create_collation_v2",_wrap_sqlite3_create_collation_v2,0,0,2,0},
{"sqlite3_create_collation16",_wrap_sqlite3_create_collation16,0,0,2,0},
{"sqlite3_collation_needed",_wrap_sqlite3_collation_needed,0,0,2,0},
{"sqlite3_collation_needed16",_wrap_sqlite3_collation_needed16,0,0,2,0},
{"sqlite3_sleep",_wrap_sqlite3_sleep,0,0,2,0},
{"sqlite3_temp_directory",0,_wrap_sqlite3_temp_directory_get,_wrap_sqlite3_temp_directory_set,2,0},
{"sqlite3_get_autocommit",_wrap_sqlite3_get_autocommit,0,0,2,0},
{"sqlite3_db_handle",_wrap_sqlite3_db_handle,0,0,2,0},
{"sqlite3_commit_hook",_wrap_sqlite3_commit_hook,0,0,2,0},
{"sqlite3_rollback_hook",_wrap_sqlite3_rollback_hook,0,0,2,0},
{"sqlite3_update_hook",_wrap_sqlite3_update_hook,0,0,2,0},
{"sqlite3_enable_shared_cache",_wrap_sqlite3_enable_shared_cache,0,0,2,0},
{"sqlite3_thread_cleanup",_wrap_sqlite3_thread_cleanup,0,0,2,0},
{"sqlite3_table_column_metadata",_wrap_sqlite3_table_column_metadata,0,0,2,0},
{"sqlite3_load_extension",_wrap_sqlite3_load_extension,0,0,2,0},
{"sqlite3_enable_load_extension",_wrap_sqlite3_enable_load_extension,0,0,2,0},
{"sqlite3_auto_extension",_wrap_sqlite3_auto_extension,0,0,2,0},
{"sqlite3_reset_auto_extension",_wrap_sqlite3_reset_auto_extension,0,0,2,0},
{"sqlite3_module_iVersion_set",_wrap_sqlite3_module_iVersion_set,0,0,2,0},
{"sqlite3_module_iVersion_get",_wrap_sqlite3_module_iVersion_get,0,0,2,0},
{"sqlite3_module_xCreate_set",_wrap_sqlite3_module_xCreate_set,0,0,2,0},
{"sqlite3_module_xCreate_get",_wrap_sqlite3_module_xCreate_get,0,0,2,0},
{"sqlite3_module_xConnect_set",_wrap_sqlite3_module_xConnect_set,0,0,2,0},
{"sqlite3_module_xConnect_get",_wrap_sqlite3_module_xConnect_get,0,0,2,0},
{"sqlite3_module_xBestIndex_set",_wrap_sqlite3_module_xBestIndex_set,0,0,2,0},
{"sqlite3_module_xBestIndex_get",_wrap_sqlite3_module_xBestIndex_get,0,0,2,0},
{"sqlite3_module_xDisconnect_set",_wrap_sqlite3_module_xDisconnect_set,0,0,2,0},
{"sqlite3_module_xDisconnect_get",_wrap_sqlite3_module_xDisconnect_get,0,0,2,0},
{"sqlite3_module_xDestroy_set",_wrap_sqlite3_module_xDestroy_set,0,0,2,0},
{"sqlite3_module_xDestroy_get",_wrap_sqlite3_module_xDestroy_get,0,0,2,0},
{"sqlite3_module_xOpen_set",_wrap_sqlite3_module_xOpen_set,0,0,2,0},
{"sqlite3_module_xOpen_get",_wrap_sqlite3_module_xOpen_get,0,0,2,0},
{"sqlite3_module_xClose_set",_wrap_sqlite3_module_xClose_set,0,0,2,0},
{"sqlite3_module_xClose_get",_wrap_sqlite3_module_xClose_get,0,0,2,0},
{"sqlite3_module_xFilter_set",_wrap_sqlite3_module_xFilter_set,0,0,2,0},
{"sqlite3_module_xFilter_get",_wrap_sqlite3_module_xFilter_get,0,0,2,0},
{"sqlite3_module_xNext_set",_wrap_sqlite3_module_xNext_set,0,0,2,0},
{"sqlite3_module_xNext_get",_wrap_sqlite3_module_xNext_get,0,0,2,0},
{"sqlite3_module_xEof_set",_wrap_sqlite3_module_xEof_set,0,0,2,0},
{"sqlite3_module_xEof_get",_wrap_sqlite3_module_xEof_get,0,0,2,0},
{"sqlite3_module_xColumn_set",_wrap_sqlite3_module_xColumn_set,0,0,2,0},
{"sqlite3_module_xColumn_get",_wrap_sqlite3_module_xColumn_get,0,0,2,0},
{"sqlite3_module_xRowid_set",_wrap_sqlite3_module_xRowid_set,0,0,2,0},
{"sqlite3_module_xRowid_get",_wrap_sqlite3_module_xRowid_get,0,0,2,0},
{"sqlite3_module_xUpdate_set",_wrap_sqlite3_module_xUpdate_set,0,0,2,0},
{"sqlite3_module_xUpdate_get",_wrap_sqlite3_module_xUpdate_get,0,0,2,0},
{"sqlite3_module_xBegin_set",_wrap_sqlite3_module_xBegin_set,0,0,2,0},
{"sqlite3_module_xBegin_get",_wrap_sqlite3_module_xBegin_get,0,0,2,0},
{"sqlite3_module_xSync_set",_wrap_sqlite3_module_xSync_set,0,0,2,0},
{"sqlite3_module_xSync_get",_wrap_sqlite3_module_xSync_get,0,0,2,0},
{"sqlite3_module_xCommit_set",_wrap_sqlite3_module_xCommit_set,0,0,2,0},
{"sqlite3_module_xCommit_get",_wrap_sqlite3_module_xCommit_get,0,0,2,0},
{"sqlite3_module_xRollback_set",_wrap_sqlite3_module_xRollback_set,0,0,2,0},
{"sqlite3_module_xRollback_get",_wrap_sqlite3_module_xRollback_get,0,0,2,0},
{"sqlite3_module_xFindFunction_set",_wrap_sqlite3_module_xFindFunction_set,0,0,2,0},
{"sqlite3_module_xFindFunction_get",_wrap_sqlite3_module_xFindFunction_get,0,0,2,0},
{"sqlite3_module_xRename_set",_wrap_sqlite3_module_xRename_set,0,0,2,0},
{"sqlite3_module_xRename_get",_wrap_sqlite3_module_xRename_get,0,0,2,0},
{"new_sqlite3_module",_wrap_new_sqlite3_module,0,0,2,0},
{"delete_sqlite3_module",_wrap_delete_sqlite3_module,0,0,2,0},
{"sqlite3_index_info_nConstraint_get",_wrap_sqlite3_index_info_nConstraint_get,0,0,2,0},
{"sqlite3_index_info_nOrderBy_get",_wrap_sqlite3_index_info_nOrderBy_get,0,0,2,0},
{"sqlite3_index_info_idxNum_set",_wrap_sqlite3_index_info_idxNum_set,0,0,2,0},
{"sqlite3_index_info_idxNum_get",_wrap_sqlite3_index_info_idxNum_get,0,0,2,0},
{"sqlite3_index_info_idxStr_set",_wrap_sqlite3_index_info_idxStr_set,0,0,2,0},
{"sqlite3_index_info_idxStr_get",_wrap_sqlite3_index_info_idxStr_get,0,0,2,0},
{"sqlite3_index_info_needToFreeIdxStr_set",_wrap_sqlite3_index_info_needToFreeIdxStr_set,0,0,2,0},
{"sqlite3_index_info_needToFreeIdxStr_get",_wrap_sqlite3_index_info_needToFreeIdxStr_get,0,0,2,0},
{"sqlite3_index_info_orderByConsumed_set",_wrap_sqlite3_index_info_orderByConsumed_set,0,0,2,0},
{"sqlite3_index_info_orderByConsumed_get",_wrap_sqlite3_index_info_orderByConsumed_get,0,0,2,0},
{"sqlite3_index_info_estimatedCost_set",_wrap_sqlite3_index_info_estimatedCost_set,0,0,2,0},
{"sqlite3_index_info_estimatedCost_get",_wrap_sqlite3_index_info_estimatedCost_get,0,0,2,0},
{"sqlite3_index_info_aConstraintUsage_get",_wrap_sqlite3_index_info_aConstraintUsage_get,0,0,2,0},
{"new_sqlite3_index_info",_wrap_new_sqlite3_index_info,0,0,2,0},
{"delete_sqlite3_index_info",_wrap_delete_sqlite3_index_info,0,0,2,0},
{"sqlite3_index_info_aConstraintUsage_argvIndex_set",_wrap_sqlite3_index_info_aConstraintUsage_argvIndex_set,0,0,2,0},
{"sqlite3_index_info_aConstraintUsage_argvIndex_get",_wrap_sqlite3_index_info_aConstraintUsage_argvIndex_get,0,0,2,0},
{"sqlite3_index_info_aConstraintUsage_omit_set",_wrap_sqlite3_index_info_aConstraintUsage_omit_set,0,0,2,0},
{"sqlite3_index_info_aConstraintUsage_omit_get",_wrap_sqlite3_index_info_aConstraintUsage_omit_get,0,0,2,0},
{"new_sqlite3_index_info_aConstraintUsage",_wrap_new_sqlite3_index_info_aConstraintUsage,0,0,2,0},
{"delete_sqlite3_index_info_aConstraintUsage",_wrap_delete_sqlite3_index_info_aConstraintUsage,0,0,2,0},
{"sqlite3_create_module",_wrap_sqlite3_create_module,0,0,2,0},
{"sqlite3_create_module_v2",_wrap_sqlite3_create_module_v2,0,0,2,0},
{"sqlite3_vtab_pModule_set",_wrap_sqlite3_vtab_pModule_set,0,0,2,0},
{"sqlite3_vtab_pModule_get",_wrap_sqlite3_vtab_pModule_get,0,0,2,0},
{"sqlite3_vtab_nRef_set",_wrap_sqlite3_vtab_nRef_set,0,0,2,0},
{"sqlite3_vtab_nRef_get",_wrap_sqlite3_vtab_nRef_get,0,0,2,0},
{"sqlite3_vtab_zErrMsg_set",_wrap_sqlite3_vtab_zErrMsg_set,0,0,2,0},
{"sqlite3_vtab_zErrMsg_get",_wrap_sqlite3_vtab_zErrMsg_get,0,0,2,0},
{"new_sqlite3_vtab",_wrap_new_sqlite3_vtab,0,0,2,0},
{"delete_sqlite3_vtab",_wrap_delete_sqlite3_vtab,0,0,2,0},
{"sqlite3_vtab_cursor_pVtab_set",_wrap_sqlite3_vtab_cursor_pVtab_set,0,0,2,0},
{"sqlite3_vtab_cursor_pVtab_get",_wrap_sqlite3_vtab_cursor_pVtab_get,0,0,2,0},
{"new_sqlite3_vtab_cursor",_wrap_new_sqlite3_vtab_cursor,0,0,2,0},
{"delete_sqlite3_vtab_cursor",_wrap_delete_sqlite3_vtab_cursor,0,0,2,0},
{"sqlite3_declare_vtab",_wrap_sqlite3_declare_vtab,0,0,2,0},
{"sqlite3_overload_function",_wrap_sqlite3_overload_function,0,0,2,0},
{"sqlite3_blob_open",_wrap_sqlite3_blob_open,0,0,2,0},
{"sqlite3_blob_close",_wrap_sqlite3_blob_close,0,0,2,0},
{"sqlite3_blob_bytes",_wrap_sqlite3_blob_bytes,0,0,2,0},
{"sqlite3_blob_read",_wrap_sqlite3_blob_read,0,0,2,0},
{"sqlite3_blob_write",_wrap_sqlite3_blob_write,0,0,2,0},
{"delete_generic_db",_wrap_delete_generic_db,0,0,2,0},
{"generic_db_sql",_wrap_generic_db_sql,0,0,2,0},
{"error_check",_wrap_error_check,0,0,2,0},
{"sqlite3_db_db_set",_wrap_sqlite3_db_db_set,0,0,2,0},
{"sqlite3_db_db_get",_wrap_sqlite3_db_db_get,0,0,2,0},
{"new_sqlite3_db",_wrap_new_sqlite3_db,0,0,2,0},
{"delete_sqlite3_db",_wrap_delete_sqlite3_db,0,0,2,0},
{"sqlite3_db_sql",_wrap_sqlite3_db_sql,0,0,2,0},
{0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_sqlite3_dbTo_p_generic_db(void *x, int *newmemory) {
    return (void *)((generic_db *)  ((sqlite3_db *) x));
}
static swig_type_info _swigt__p_Mem = {"_p_Mem", "sqlite3_value *|Mem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_sqlite3_context__void = {"_p_f_p_sqlite3_context__void", "void (*)(sqlite3_context *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_sqlite3_context_int_p_p_Mem__void = {"_p_f_p_sqlite3_context_int_p_p_Mem__void", "void (*)(sqlite3_context *,int,Mem **)|void (*)(sqlite3_context *,int,sqlite3_value **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_sqlite3_p_void_int_p_q_const__p_q_const__char_p_p_sqlite3_vtab_p_p_char__int = {"_p_f_p_sqlite3_p_void_int_p_q_const__p_q_const__char_p_p_sqlite3_vtab_p_p_char__int", "int (*)(sqlite3 *,void *,int,char const *const *,sqlite3_vtab **,char **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_sqlite3_vtab__int = {"_p_f_p_sqlite3_vtab__int", "int (*)(sqlite3_vtab *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_sqlite3_vtab_cursor__int = {"_p_f_p_sqlite3_vtab_cursor__int", "int (*)(sqlite3_vtab_cursor *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_sqlite3_vtab_cursor_int_p_q_const__char_int_p_p_Mem__int = {"_p_f_p_sqlite3_vtab_cursor_int_p_q_const__char_int_p_p_Mem__int", "int (*)(sqlite3_vtab_cursor *,int,char const *,int,Mem **)|int (*)(sqlite3_vtab_cursor *,int,char const *,int,sqlite3_value **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_sqlite3_vtab_cursor_p_long_long__int = {"_p_f_p_sqlite3_vtab_cursor_p_long_long__int", "int (*)(sqlite3_vtab_cursor *,long long *)|int (*)(sqlite3_vtab_cursor *,sqlite_int64 *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_sqlite3_vtab_cursor_p_sqlite3_context_int__int = {"_p_f_p_sqlite3_vtab_cursor_p_sqlite3_context_int__int", "int (*)(sqlite3_vtab_cursor *,sqlite3_context *,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_sqlite3_vtab_int_p_p_Mem_p_long_long__int = {"_p_f_p_sqlite3_vtab_int_p_p_Mem_p_long_long__int", "int (*)(sqlite3_vtab *,int,Mem **,long long *)|int (*)(sqlite3_vtab *,int,sqlite3_value **,sqlite_int64 *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_sqlite3_vtab_int_p_q_const__char_p_p_f_p_sqlite3_context_int_p_p_Mem__void_p_p_void__int = {"_p_f_p_sqlite3_vtab_int_p_q_const__char_p_p_f_p_sqlite3_context_int_p_p_Mem__void_p_p_void__int", "int (*)(sqlite3_vtab *,int,char const *,void (**)(sqlite3_context *,int,Mem **),void **)|int (*)(sqlite3_vtab *,int,char const *,void (**)(sqlite3_context *,int,sqlite3_value **),void **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_sqlite3_vtab_p_p_sqlite3_vtab_cursor__int = {"_p_f_p_sqlite3_vtab_p_p_sqlite3_vtab_cursor__int", "int (*)(sqlite3_vtab *,sqlite3_vtab_cursor **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_sqlite3_vtab_p_q_const__char__int = {"_p_f_p_sqlite3_vtab_p_q_const__char__int", "int (*)(sqlite3_vtab *,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_sqlite3_vtab_p_sqlite3_index_info__int = {"_p_f_p_sqlite3_vtab_p_sqlite3_index_info__int", "int (*)(sqlite3_vtab *,sqlite3_index_info *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__int = {"_p_f_p_void__int", "int (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_int__int = {"_p_f_p_void_int__int", "int (*)(void *,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_int_p_p_char_p_p_char__int = {"_p_f_p_void_int_p_p_char_p_p_char__int", "int (*)(void *,int,char **,char **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_int_p_q_const__char_p_q_const__char_long_long__void = {"_p_f_p_void_int_p_q_const__char_p_q_const__char_long_long__void", "void (*)(void *,int,char const *,char const *,sqlite_int64)|void (*)(void *,int,char const *,char const *,long long)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_int_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char__int = {"_p_f_p_void_int_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char__int", "int (*)(void *,int,char const *,char const *,char const *,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_int_p_q_const__void_int_p_q_const__void__int = {"_p_f_p_void_int_p_q_const__void_int_p_q_const__void__int", "int (*)(void *,int,void const *,int,void const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_q_const__char__void = {"_p_f_p_void_p_q_const__char__void", "void (*)(void *,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_q_const__char_unsigned_long_long__void = {"_p_f_p_void_p_q_const__char_unsigned_long_long__void", "void (*)(void *,char const *,sqlite_uint64)|void (*)(void *,char const *,unsigned long long)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_sqlite3_int_p_q_const__char__void = {"_p_f_p_void_p_sqlite3_int_p_q_const__char__void", "void (*)(void *,sqlite3 *,int,char const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void_p_sqlite3_int_p_q_const__void__void = {"_p_f_p_void_p_sqlite3_int_p_q_const__void__void", "void (*)(void *,sqlite3 *,int,void const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_generic_db = {"_p_generic_db", "generic_db *", 0, 0, (void*)&_wrap_class_generic_db, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "sqlite_int64 *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_char = {"_p_p_p_char", "char ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sqlite3 = {"_p_p_sqlite3", "sqlite3 **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sqlite3_blob = {"_p_p_sqlite3_blob", "sqlite3_blob **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sqlite3_stmt = {"_p_p_sqlite3_stmt", "sqlite3_stmt **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sqlite3 = {"_p_sqlite3", "sqlite3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sqlite3_blob = {"_p_sqlite3_blob", "sqlite3_blob *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sqlite3_context = {"_p_sqlite3_context", "sqlite3_context *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sqlite3_db = {"_p_sqlite3_db", "sqlite3_db *", 0, 0, (void*)&_wrap_class_sqlite3_db, 0};
static swig_type_info _swigt__p_sqlite3_index_info = {"_p_sqlite3_index_info", "sqlite3_index_info *", 0, 0, (void*)&_wrap_class_sqlite3_index_info, 0};
static swig_type_info _swigt__p_sqlite3_index_info_aConstraintUsage = {"_p_sqlite3_index_info_aConstraintUsage", "sqlite3_index_info_aConstraintUsage *", 0, 0, (void*)&_wrap_class_sqlite3_index_info_aConstraintUsage, 0};
static swig_type_info _swigt__p_sqlite3_module = {"_p_sqlite3_module", "sqlite3_module *", 0, 0, (void*)&_wrap_class_sqlite3_module, 0};
static swig_type_info _swigt__p_sqlite3_stmt = {"_p_sqlite3_stmt", "sqlite3_stmt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sqlite3_vtab = {"_p_sqlite3_vtab", "sqlite3_vtab *", 0, 0, (void*)&_wrap_class_sqlite3_vtab, 0};
static swig_type_info _swigt__p_sqlite3_vtab_cursor = {"_p_sqlite3_vtab_cursor", "sqlite3_vtab_cursor *", 0, 0, (void*)&_wrap_class_sqlite3_vtab_cursor, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "sqlite_uint64 *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_va_list = {"_p_va_list", "va_list *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Mem,
  &_swigt__p_char,
  &_swigt__p_f_p_sqlite3_context__void,
  &_swigt__p_f_p_sqlite3_context_int_p_p_Mem__void,
  &_swigt__p_f_p_sqlite3_p_void_int_p_q_const__p_q_const__char_p_p_sqlite3_vtab_p_p_char__int,
  &_swigt__p_f_p_sqlite3_vtab__int,
  &_swigt__p_f_p_sqlite3_vtab_cursor__int,
  &_swigt__p_f_p_sqlite3_vtab_cursor_int_p_q_const__char_int_p_p_Mem__int,
  &_swigt__p_f_p_sqlite3_vtab_cursor_p_long_long__int,
  &_swigt__p_f_p_sqlite3_vtab_cursor_p_sqlite3_context_int__int,
  &_swigt__p_f_p_sqlite3_vtab_int_p_p_Mem_p_long_long__int,
  &_swigt__p_f_p_sqlite3_vtab_int_p_q_const__char_p_p_f_p_sqlite3_context_int_p_p_Mem__void_p_p_void__int,
  &_swigt__p_f_p_sqlite3_vtab_p_p_sqlite3_vtab_cursor__int,
  &_swigt__p_f_p_sqlite3_vtab_p_q_const__char__int,
  &_swigt__p_f_p_sqlite3_vtab_p_sqlite3_index_info__int,
  &_swigt__p_f_p_void__int,
  &_swigt__p_f_p_void__void,
  &_swigt__p_f_p_void_int__int,
  &_swigt__p_f_p_void_int_p_p_char_p_p_char__int,
  &_swigt__p_f_p_void_int_p_q_const__char_p_q_const__char_long_long__void,
  &_swigt__p_f_p_void_int_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char__int,
  &_swigt__p_f_p_void_int_p_q_const__void_int_p_q_const__void__int,
  &_swigt__p_f_p_void_p_q_const__char__void,
  &_swigt__p_f_p_void_p_q_const__char_unsigned_long_long__void,
  &_swigt__p_f_p_void_p_sqlite3_int_p_q_const__char__void,
  &_swigt__p_f_p_void_p_sqlite3_int_p_q_const__void__void,
  &_swigt__p_generic_db,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_char,
  &_swigt__p_p_p_char,
  &_swigt__p_p_sqlite3,
  &_swigt__p_p_sqlite3_blob,
  &_swigt__p_p_sqlite3_stmt,
  &_swigt__p_p_void,
  &_swigt__p_sqlite3,
  &_swigt__p_sqlite3_blob,
  &_swigt__p_sqlite3_context,
  &_swigt__p_sqlite3_db,
  &_swigt__p_sqlite3_index_info,
  &_swigt__p_sqlite3_index_info_aConstraintUsage,
  &_swigt__p_sqlite3_module,
  &_swigt__p_sqlite3_stmt,
  &_swigt__p_sqlite3_vtab,
  &_swigt__p_sqlite3_vtab_cursor,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_va_list,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_Mem[] = {  {&_swigt__p_Mem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_sqlite3_context__void[] = {  {&_swigt__p_f_p_sqlite3_context__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_sqlite3_context_int_p_p_Mem__void[] = {  {&_swigt__p_f_p_sqlite3_context_int_p_p_Mem__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_sqlite3_p_void_int_p_q_const__p_q_const__char_p_p_sqlite3_vtab_p_p_char__int[] = {  {&_swigt__p_f_p_sqlite3_p_void_int_p_q_const__p_q_const__char_p_p_sqlite3_vtab_p_p_char__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_sqlite3_vtab__int[] = {  {&_swigt__p_f_p_sqlite3_vtab__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_sqlite3_vtab_cursor__int[] = {  {&_swigt__p_f_p_sqlite3_vtab_cursor__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_sqlite3_vtab_cursor_int_p_q_const__char_int_p_p_Mem__int[] = {  {&_swigt__p_f_p_sqlite3_vtab_cursor_int_p_q_const__char_int_p_p_Mem__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_sqlite3_vtab_cursor_p_long_long__int[] = {  {&_swigt__p_f_p_sqlite3_vtab_cursor_p_long_long__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_sqlite3_vtab_cursor_p_sqlite3_context_int__int[] = {  {&_swigt__p_f_p_sqlite3_vtab_cursor_p_sqlite3_context_int__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_sqlite3_vtab_int_p_p_Mem_p_long_long__int[] = {  {&_swigt__p_f_p_sqlite3_vtab_int_p_p_Mem_p_long_long__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_sqlite3_vtab_int_p_q_const__char_p_p_f_p_sqlite3_context_int_p_p_Mem__void_p_p_void__int[] = {  {&_swigt__p_f_p_sqlite3_vtab_int_p_q_const__char_p_p_f_p_sqlite3_context_int_p_p_Mem__void_p_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_sqlite3_vtab_p_p_sqlite3_vtab_cursor__int[] = {  {&_swigt__p_f_p_sqlite3_vtab_p_p_sqlite3_vtab_cursor__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_sqlite3_vtab_p_q_const__char__int[] = {  {&_swigt__p_f_p_sqlite3_vtab_p_q_const__char__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_sqlite3_vtab_p_sqlite3_index_info__int[] = {  {&_swigt__p_f_p_sqlite3_vtab_p_sqlite3_index_info__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__int[] = {  {&_swigt__p_f_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_int__int[] = {  {&_swigt__p_f_p_void_int__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_int_p_p_char_p_p_char__int[] = {  {&_swigt__p_f_p_void_int_p_p_char_p_p_char__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_int_p_q_const__char_p_q_const__char_long_long__void[] = {  {&_swigt__p_f_p_void_int_p_q_const__char_p_q_const__char_long_long__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_int_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char__int[] = {  {&_swigt__p_f_p_void_int_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_int_p_q_const__void_int_p_q_const__void__int[] = {  {&_swigt__p_f_p_void_int_p_q_const__void_int_p_q_const__void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_q_const__char__void[] = {  {&_swigt__p_f_p_void_p_q_const__char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_q_const__char_unsigned_long_long__void[] = {  {&_swigt__p_f_p_void_p_q_const__char_unsigned_long_long__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_sqlite3_int_p_q_const__char__void[] = {  {&_swigt__p_f_p_void_p_sqlite3_int_p_q_const__char__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void_p_sqlite3_int_p_q_const__void__void[] = {  {&_swigt__p_f_p_void_p_sqlite3_int_p_q_const__void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_generic_db[] = {  {&_swigt__p_sqlite3_db, _p_sqlite3_dbTo_p_generic_db, 0, 0},  {&_swigt__p_generic_db, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_char[] = {  {&_swigt__p_p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sqlite3[] = {  {&_swigt__p_p_sqlite3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sqlite3_blob[] = {  {&_swigt__p_p_sqlite3_blob, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sqlite3_stmt[] = {  {&_swigt__p_p_sqlite3_stmt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sqlite3[] = {  {&_swigt__p_sqlite3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sqlite3_blob[] = {  {&_swigt__p_sqlite3_blob, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sqlite3_context[] = {  {&_swigt__p_sqlite3_context, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sqlite3_db[] = {  {&_swigt__p_sqlite3_db, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sqlite3_index_info[] = {  {&_swigt__p_sqlite3_index_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sqlite3_index_info_aConstraintUsage[] = {  {&_swigt__p_sqlite3_index_info_aConstraintUsage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sqlite3_module[] = {  {&_swigt__p_sqlite3_module, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sqlite3_stmt[] = {  {&_swigt__p_sqlite3_stmt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sqlite3_vtab[] = {  {&_swigt__p_sqlite3_vtab, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sqlite3_vtab_cursor[] = {  {&_swigt__p_sqlite3_vtab_cursor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_va_list[] = {  {&_swigt__p_va_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Mem,
  _swigc__p_char,
  _swigc__p_f_p_sqlite3_context__void,
  _swigc__p_f_p_sqlite3_context_int_p_p_Mem__void,
  _swigc__p_f_p_sqlite3_p_void_int_p_q_const__p_q_const__char_p_p_sqlite3_vtab_p_p_char__int,
  _swigc__p_f_p_sqlite3_vtab__int,
  _swigc__p_f_p_sqlite3_vtab_cursor__int,
  _swigc__p_f_p_sqlite3_vtab_cursor_int_p_q_const__char_int_p_p_Mem__int,
  _swigc__p_f_p_sqlite3_vtab_cursor_p_long_long__int,
  _swigc__p_f_p_sqlite3_vtab_cursor_p_sqlite3_context_int__int,
  _swigc__p_f_p_sqlite3_vtab_int_p_p_Mem_p_long_long__int,
  _swigc__p_f_p_sqlite3_vtab_int_p_q_const__char_p_p_f_p_sqlite3_context_int_p_p_Mem__void_p_p_void__int,
  _swigc__p_f_p_sqlite3_vtab_p_p_sqlite3_vtab_cursor__int,
  _swigc__p_f_p_sqlite3_vtab_p_q_const__char__int,
  _swigc__p_f_p_sqlite3_vtab_p_sqlite3_index_info__int,
  _swigc__p_f_p_void__int,
  _swigc__p_f_p_void__void,
  _swigc__p_f_p_void_int__int,
  _swigc__p_f_p_void_int_p_p_char_p_p_char__int,
  _swigc__p_f_p_void_int_p_q_const__char_p_q_const__char_long_long__void,
  _swigc__p_f_p_void_int_p_q_const__char_p_q_const__char_p_q_const__char_p_q_const__char__int,
  _swigc__p_f_p_void_int_p_q_const__void_int_p_q_const__void__int,
  _swigc__p_f_p_void_p_q_const__char__void,
  _swigc__p_f_p_void_p_q_const__char_unsigned_long_long__void,
  _swigc__p_f_p_void_p_sqlite3_int_p_q_const__char__void,
  _swigc__p_f_p_void_p_sqlite3_int_p_q_const__void__void,
  _swigc__p_generic_db,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_char,
  _swigc__p_p_p_char,
  _swigc__p_p_sqlite3,
  _swigc__p_p_sqlite3_blob,
  _swigc__p_p_sqlite3_stmt,
  _swigc__p_p_void,
  _swigc__p_sqlite3,
  _swigc__p_sqlite3_blob,
  _swigc__p_sqlite3_context,
  _swigc__p_sqlite3_db,
  _swigc__p_sqlite3_index_info,
  _swigc__p_sqlite3_index_info_aConstraintUsage,
  _swigc__p_sqlite3_module,
  _swigc__p_sqlite3_stmt,
  _swigc__p_sqlite3_vtab,
  _swigc__p_sqlite3_vtab_cursor,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_long_long,
  _swigc__p_va_list,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



void SWIG_init_user(octave_swig_type* module_ns);

DEFUN_DLD (SWIG_name,args,nargout,SWIG_name_d) {
  static bool already_init=false;
  if (already_init)
    return octave_value_list();
  already_init=true;

  octave_swig_ref::register_type();
  octave_swig_packed::register_type();
  SWIG_InitializeModule(0);
  SWIG_PropagateClientData();
  
  install_builtin_function(swig_type,"swig_type",std::string());
  install_builtin_function(swig_typequery,"swig_typequery",std::string());
  install_builtin_function(swig_this,"swig_this",std::string());
  install_builtin_function(swig_subclass,"subclass",std::string());

  bool global_option=true; // * swig cli option should control this default
  for (int j=0;j<args.length();++j)
    if (args(j).is_string()&&args(j).string_value()=="noglobal")
      global_option=true;
    else if (args(j).is_string()&&args(j).string_value()=="noglobal")
      global_option=false;

  octave_swig_type* cvar_ns=new octave_swig_type;
  for (int j=0;swig_globals[j].name;++j)
    if (swig_globals[j].get_method)
      cvar_ns->assign(swig_globals[j].name,&swig_globals[j]);

  octave_swig_type* module_ns=new octave_swig_type;
  module_ns->assign("cvar",Swig::swig_value_ref(cvar_ns));
  for (int j=0;swig_globals[j].name;++j)
    if (swig_globals[j].method)
      module_ns->assign(swig_globals[j].name,&swig_globals[j]);

  link_to_global_variable(curr_sym_tab->lookup(SWIG_name_d,true));
  set_global_value(SWIG_name_d,Swig::swig_value_ref(module_ns));

  // * need better solution here; swig_type -> octave_class mapping is 
  // * really n-to-1, in some cases such as template partial spec, etc. 
  // * see failing tests.
  for (int j=0;swig_types[j];++j)
    if (swig_types[j]->clientdata) {
      swig_octave_class* c=(swig_octave_class*)swig_types[j]->clientdata;
      module_ns->assign(c->name,
			Swig::swig_value_ref
			(new octave_swig_type(0,swig_types[j])));
    }

  SWIG_init_user(module_ns);

  swig_install_ops(octave_swig_ref::static_type_id());

  if (global_option)
    module_ns->install_global();

  return octave_value_list();
}


void SWIG_init_user(octave_swig_type* module_ns)
{
  SWIG_Octave_SetConstant(module_ns,"SQLITE_VERSION",SWIG_FromCharPtr("3.4.2"));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_VERSION_NUMBER",SWIG_From_int((int)(3004002)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_OK",SWIG_From_int((int)(0)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_ERROR",SWIG_From_int((int)(1)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_INTERNAL",SWIG_From_int((int)(2)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_PERM",SWIG_From_int((int)(3)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_ABORT",SWIG_From_int((int)(4)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_BUSY",SWIG_From_int((int)(5)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_LOCKED",SWIG_From_int((int)(6)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_NOMEM",SWIG_From_int((int)(7)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_READONLY",SWIG_From_int((int)(8)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_INTERRUPT",SWIG_From_int((int)(9)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_IOERR",SWIG_From_int((int)(10)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_CORRUPT",SWIG_From_int((int)(11)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_NOTFOUND",SWIG_From_int((int)(12)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_FULL",SWIG_From_int((int)(13)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_CANTOPEN",SWIG_From_int((int)(14)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_PROTOCOL",SWIG_From_int((int)(15)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_EMPTY",SWIG_From_int((int)(16)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_SCHEMA",SWIG_From_int((int)(17)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_TOOBIG",SWIG_From_int((int)(18)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_CONSTRAINT",SWIG_From_int((int)(19)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_MISMATCH",SWIG_From_int((int)(20)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_MISUSE",SWIG_From_int((int)(21)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_NOLFS",SWIG_From_int((int)(22)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_AUTH",SWIG_From_int((int)(23)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_FORMAT",SWIG_From_int((int)(24)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_RANGE",SWIG_From_int((int)(25)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_NOTADB",SWIG_From_int((int)(26)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_ROW",SWIG_From_int((int)(100)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_DONE",SWIG_From_int((int)(101)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_IOERR_READ",SWIG_From_int((int)((10|(1 << 8)))));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_IOERR_SHORT_READ",SWIG_From_int((int)((10|(2 << 8)))));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_IOERR_WRITE",SWIG_From_int((int)((10|(3 << 8)))));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_IOERR_FSYNC",SWIG_From_int((int)((10|(4 << 8)))));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_IOERR_DIR_FSYNC",SWIG_From_int((int)((10|(5 << 8)))));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_IOERR_TRUNCATE",SWIG_From_int((int)((10|(6 << 8)))));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_IOERR_FSTAT",SWIG_From_int((int)((10|(7 << 8)))));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_IOERR_UNLOCK",SWIG_From_int((int)((10|(8 << 8)))));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_IOERR_RDLOCK",SWIG_From_int((int)((10|(9 << 8)))));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_IOERR_DELETE",SWIG_From_int((int)((10|(10 << 8)))));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_IOERR_BLOCKED",SWIG_From_int((int)((10|(11 << 8)))));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_DENY",SWIG_From_int((int)(1)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_IGNORE",SWIG_From_int((int)(2)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_CREATE_INDEX",SWIG_From_int((int)(1)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_CREATE_TABLE",SWIG_From_int((int)(2)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_CREATE_TEMP_INDEX",SWIG_From_int((int)(3)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_CREATE_TEMP_TABLE",SWIG_From_int((int)(4)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_CREATE_TEMP_TRIGGER",SWIG_From_int((int)(5)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_CREATE_TEMP_VIEW",SWIG_From_int((int)(6)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_CREATE_TRIGGER",SWIG_From_int((int)(7)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_CREATE_VIEW",SWIG_From_int((int)(8)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_DELETE",SWIG_From_int((int)(9)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_DROP_INDEX",SWIG_From_int((int)(10)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_DROP_TABLE",SWIG_From_int((int)(11)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_DROP_TEMP_INDEX",SWIG_From_int((int)(12)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_DROP_TEMP_TABLE",SWIG_From_int((int)(13)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_DROP_TEMP_TRIGGER",SWIG_From_int((int)(14)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_DROP_TEMP_VIEW",SWIG_From_int((int)(15)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_DROP_TRIGGER",SWIG_From_int((int)(16)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_DROP_VIEW",SWIG_From_int((int)(17)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_INSERT",SWIG_From_int((int)(18)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_PRAGMA",SWIG_From_int((int)(19)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_READ",SWIG_From_int((int)(20)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_SELECT",SWIG_From_int((int)(21)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_TRANSACTION",SWIG_From_int((int)(22)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_UPDATE",SWIG_From_int((int)(23)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_ATTACH",SWIG_From_int((int)(24)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_DETACH",SWIG_From_int((int)(25)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_ALTER_TABLE",SWIG_From_int((int)(26)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_REINDEX",SWIG_From_int((int)(27)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_ANALYZE",SWIG_From_int((int)(28)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_CREATE_VTABLE",SWIG_From_int((int)(29)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_DROP_VTABLE",SWIG_From_int((int)(30)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_FUNCTION",SWIG_From_int((int)(31)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_COPY",SWIG_From_int((int)(0)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_INTEGER",SWIG_From_int((int)(1)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_FLOAT",SWIG_From_int((int)(2)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_BLOB",SWIG_From_int((int)(4)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_NULL",SWIG_From_int((int)(5)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_TEXT",SWIG_From_int((int)(3)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE3_TEXT",SWIG_From_int((int)(3)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_UTF8",SWIG_From_int((int)(1)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_UTF16LE",SWIG_From_int((int)(2)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_UTF16BE",SWIG_From_int((int)(3)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_UTF16",SWIG_From_int((int)(4)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_ANY",SWIG_From_int((int)(5)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_UTF16_ALIGNED",SWIG_From_int((int)(8)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_INDEX_CONSTRAINT_EQ",SWIG_From_int((int)(2)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_INDEX_CONSTRAINT_GT",SWIG_From_int((int)(4)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_INDEX_CONSTRAINT_LE",SWIG_From_int((int)(8)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_INDEX_CONSTRAINT_LT",SWIG_From_int((int)(16)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_INDEX_CONSTRAINT_GE",SWIG_From_int((int)(32)));
  SWIG_Octave_SetConstant(module_ns,"SQLITE_INDEX_CONSTRAINT_MATCH",SWIG_From_int((int)(64)));
}

