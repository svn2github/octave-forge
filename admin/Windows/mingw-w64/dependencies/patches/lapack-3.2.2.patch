diff --git a/INSTALL/Makefile b/INSTALL/Makefile
--- a/INSTALL/Makefile
+++ b/INSTALL/Makefile
@@ -1,5 +1,7 @@
 include ../make.inc
 
+vpath %.f $(SRCDIR)/INSTALL
+
 .SUFFIXES : .o .f 
 all:  testlsame testslamch testdlamch testsecond testdsecnd testieee testversion 
 
diff --git a/Makefile b/Makefile
--- a/Makefile
+++ b/Makefile
@@ -6,7 +6,7 @@
 
 include make.inc
 
-all: lapack_install lib lapack_testing blas_testing
+all: lapack_install lib lapack_testing blas_testing shlib
 
 lib: lapacklib tmglib
 #lib: blaslib variants lapacklib tmglib
@@ -23,6 +23,15 @@
 lapacklib:	lapack_install
 	( cd SRC; $(MAKE) )
 
+shlib : lapack.dll
+
+lapack.dll : $(LAPACKLIB)
+	$(LOADER) -shared $(LOADOPTS) -o $@ $(LIB_DEFFILE) \
+	  -Wl,--out-implib=liblapack.dll.a \
+	  -Wl,--output-def=lapack_out.def \
+	  -Wl,--whole-archive $< \
+	  -Wl,--no-whole-archive -lblas
+
 variants:
 	( cd SRC/VARIANTS ; $(MAKE))
 	
diff --git a/SRC/Makefile b/SRC/Makefile
--- a/SRC/Makefile
+++ b/SRC/Makefile
@@ -1,5 +1,7 @@
 include ../make.inc
 
+vpath %.f $(SRCDIR)/SRC
+
 #######################################################################
 #  This is the makefile to create a library for LAPACK.
 #  The files are organized as follows:
@@ -366,27 +368,41 @@
 ALLOBJ=$(SLASRC) $(DLASRC) $(CLASRC) $(ZLASRC) $(SCLAUX) $(DZLAUX)	\
 	$(ALLAUX)
 
-../$(LAPACKLIB): $(ALLOBJ) $(ALLXOBJ)
-	$(ARCH) $(ARCHFLAGS) $@ $(ALLOBJ) $(ALLXOBJ)
+FSOURCES = $(wildcard $(SRCDIR)/SRC/*.f) $(SRCDIR)/INSTALL/dlamch.f $(SRCDIR)/INSTALL/slamch.f
+
+ALLDEF=$(patsubst %.o,%.def, $(ALLOBJ))
+
+%.def : %.f
+	@echo "Making $@"
+	@sed -n \
+	     -e 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/' \
+	     -e 's/^\(      \|	\)\(.*function\|subroutine\|entry\)[ 	]*\([^ 	(]\+\).*$$/\3_/p' < $< > $@
+
+../$(LIB_DEFFILE): $(ALLDEF)
+	echo "EXPORTS" > $@
+	cat $^ >> $@
+
+../$(LAPACKLIB): $(ALLOBJ)  $(ALLXOBJ) ../$(LIB_DEFFILE)
+	$(AR) $(ARFLAGS) $@ $(ALLOBJ) $(ALLXOBJ)
 	$(RANLIB) $@
 
 single: $(SLASRC) $(ALLAUX) $(SCLAUX) 
-	$(ARCH) $(ARCHFLAGS) ../$(LAPACKLIB) $(SLASRC) $(ALLAUX) \
+	$(AR) $(ARFLAGS) ../$(LAPACKLIB) $(SLASRC) $(ALLAUX) \
 	$(SCLAUX)
 	$(RANLIB) ../$(LAPACKLIB)
 
 complex: $(CLASRC) $(ALLAUX) $(SCLAUX)
-	$(ARCH) $(ARCHFLAGS) ../$(LAPACKLIB) $(CLASRC) $(ALLAUX) \
+	$(AR) $(ARFLAGS) ../$(LAPACKLIB) $(CLASRC) $(ALLAUX) \
 	$(SCLAUX)
 	$(RANLIB) ../$(LAPACKLIB)
 
 double: $(DLASRC) $(ALLAUX) $(DZLAUX)
-	$(ARCH) $(ARCHFLAGS) ../$(LAPACKLIB) $(DLASRC) $(ALLAUX) \
+	$(AR) $(ARFLAGS) ../$(LAPACKLIB) $(DLASRC) $(ALLAUX) \
 	$(DZLAUX)
 	$(RANLIB) ../$(LAPACKLIB)
 
 complex16: $(ZLASRC) $(ALLAUX) $(DZLAUX)
-	$(ARCH) $(ARCHFLAGS) ../$(LAPACKLIB) $(ZLASRC) $(ALLAUX) \
+	$(AR) $(ARFLAGS) ../$(LAPACKLIB) $(ZLASRC) $(ALLAUX) \
 	$(DZLAUX)
 	$(RANLIB) ../$(LAPACKLIB)
 
diff --git a/TESTING/EIG/Makefile b/TESTING/EIG/Makefile
--- a/TESTING/EIG/Makefile
+++ b/TESTING/EIG/Makefile
@@ -1,5 +1,7 @@
 include ../../make.inc
 
+vpath %.f $(SRCDIR)/TESTING/EIG
+
 ########################################################################
 #  This is the makefile for the eigenvalue test program from LAPACK.
 #  The test files are organized as follows:
diff --git a/TESTING/LIN/Makefile b/TESTING/LIN/Makefile
--- a/TESTING/LIN/Makefile
+++ b/TESTING/LIN/Makefile
@@ -1,5 +1,7 @@
 include ../../make.inc
 
+vpath %.f $(SRCDIR)/TESTING/LIN
+
 #######################################################################
 #  This makefile creates the test programs for the linear equation
 #  routines in LAPACK.  The test files are grouped as follows:
diff --git a/TESTING/MATGEN/Makefile b/TESTING/MATGEN/Makefile
--- a/TESTING/MATGEN/Makefile
+++ b/TESTING/MATGEN/Makefile
@@ -1,5 +1,7 @@
 include ../../make.inc
 
+vpath %.f $(SRCDIR)/TESTING/MATGEN
+
 #######################################################################
 #  This is the makefile to create a library of the test matrix
 #  generators used in LAPACK.  The files are organized as follows:
@@ -60,23 +62,23 @@
 
 ../../$(TMGLIB): $(SMATGEN) $(CMATGEN) $(SCATGEN) $(DMATGEN)	\
 		$(ZMATGEN) $(DZATGEN)
-	$(ARCH) $(ARCHFLAGS) $@ $(ALLOBJ)
+	$(AR) $(ARFLAGS) $@ $(ALLOBJ)
 	$(RANLIB) $@
 
 single: $(SMATGEN) $(SCATGEN)
-	$(ARCH) $(ARCHFLAGS) ../../$(TMGLIB) $(SMATGEN) $(SCATGEN)
+	$(AR) $(ARFLAGS) ../../$(TMGLIB) $(SMATGEN) $(SCATGEN)
 	$(RANLIB) ../../$(TMGLIB)
 
 complex: $(CMATGEN) $(SCATGEN)
-	$(ARCH) $(ARCHFLAGS) ../../$(TMGLIB) $(CMATGEN) $(SCATGEN)
+	$(AR) $(ARFLAGS) ../../$(TMGLIB) $(CMATGEN) $(SCATGEN)
 	$(RANLIB) ../../$(TMGLIB)
 
 double: $(DMATGEN) $(DZATGEN)
-	$(ARCH) $(ARCHFLAGS) ../../$(TMGLIB) $(DMATGEN) $(DZATGEN)
+	$(AR) $(ARFLAGS) ../../$(TMGLIB) $(DMATGEN) $(DZATGEN)
 	$(RANLIB) ../../$(TMGLIB)
 
 complex16: $(ZMATGEN) $(DZATGEN)
-	$(ARCH) $(ARCHFLAGS) ../../$(TMGLIB) $(ZMATGEN) $(DZATGEN)
+	$(AR) $(ARFLAGS) ../../$(TMGLIB) $(ZMATGEN) $(DZATGEN)
 	$(RANLIB) ../../$(TMGLIB)
 
 $(SCATGEN): $(FRC)
diff --git a/TESTING/Makefile b/TESTING/Makefile
--- a/TESTING/Makefile
+++ b/TESTING/Makefile
@@ -37,6 +37,9 @@
 
 include ../make.inc
 
+vpath %.f  $(SRCDIR)/TESTING
+vpath %.in $(SRCDIR)/TESTING
+
 ifneq ($(strip $(VARLIB)),)
     LAPACKLIB :=  $(VARLIB) ../$(LAPACKLIB)
 endif
@@ -151,61 +154,61 @@
 
 stest.out: stest.in xlintsts
 	@echo Testing REAL LAPACK linear equation routines
-	./xlintsts < stest.in > $@ 2>&1
+	./xlintsts < $< > $@ 2>&1
 #
 # ======== COMPLEX LIN TESTS ==========================
 
 ctest.out: ctest.in xlintstc
 	@echo Testing COMPLEX LAPACK linear equation routines
-	./xlintstc < ctest.in > $@ 2>&1
+	./xlintstc < $< > $@ 2>&1
 #
 # ======== DOUBLE LIN TESTS ===========================
 
 dtest.out: dtest.in xlintstd
 	@echo Testing DOUBLE PRECISION LAPACK linear equation routines
-	./xlintstd < dtest.in > $@ 2>&1
+	./xlintstd < $< > $@ 2>&1
 #
 # ======== COMPLEX16 LIN TESTS ========================
 
 ztest.out: ztest.in xlintstz
 	@echo Testing COMPLEX16 LAPACK linear equation routines
-	./xlintstz < ztest.in > $@ 2>&1
+	./xlintstz < $< > $@ 2>&1
 #
 # ======== SINGLE-DOUBLE PROTO LIN TESTS ==============
 
 dstest.out: dstest.in xlintstds
 	@echo Testing SINGLE-DOUBLE PRECISION LAPACK prototype linear equation routines
-	./xlintstds < dstest.in > $@ 2>&1
+	./xlintstds < $< > $@ 2>&1
 #
 # ======== COMPLEX-COMPLEX16 LIN TESTS ========================
 
 zctest.out: zctest.in xlintstzc
 	@echo Testing COMPLEX-COMPLEX16 LAPACK protoype linear equation routines
-	./xlintstzc < zctest.in > $@ 2>&1
+	./xlintstzc < $< > $@ 2>&1
 #
 # ======== SINGLE RFP LIN TESTS ========================
 
 stest_rfp.out: stest_rfp.in xlintstrfs
 	@echo Testing REAL LAPACK RFP protoype linear equation routines
-	./xlintstrfs < stest_rfp.in > $@ 2>&1
+	./xlintstrfs < $< > $@ 2>&1
 #
 # ======== COMPLEX16 RFP LIN TESTS ========================
 
 dtest_rfp.out: dtest_rfp.in xlintstrfd
 	@echo Testing DOUBLE PRECISION LAPACK RFP protoype linear equation routines
-	./xlintstrfd < dtest_rfp.in > $@ 2>&1
+	./xlintstrfd < $< > $@ 2>&1
 #
 # ======== COMPLEX16 RFP LIN TESTS ========================
 
 ctest_rfp.out: ctest_rfp.in xlintstrfc
 	@echo Testing COMPLEX LAPACK RFP protoype linear equation routines
-	./xlintstrfc < ctest_rfp.in > $@ 2>&1
+	./xlintstrfc < $< > $@ 2>&1
 #
 # ======== COMPLEX16 RFP LIN TESTS ========================
 
 ztest_rfp.out: ztest_rfp.in xlintstrfz
 	@echo Testing COMPLEX16 LAPACK RFP protoype linear equation routines
-	./xlintstrfz < ztest_rfp.in > $@ 2>&1
+	./xlintstrfz < $< > $@ 2>&1
 #
 #
 # ======== SINGLE EIG TESTS ===========================
@@ -213,297 +216,297 @@
 
 snep.out: nep.in xeigtsts
 	@echo NEP: Testing Nonsymmetric Eigenvalue Problem routines
-	./xeigtsts < nep.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 ssep.out: sep.in xeigtsts
 	@echo SEP: Testing Symmetric Eigenvalue Problem routines
-	./xeigtsts < sep.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 ssvd.out: svd.in xeigtsts
 	@echo SVD: Testing Singular Value Decomposition routines
-	./xeigtsts < svd.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 sec.out: sec.in xeigtsts
 	@echo SEC: Testing REAL Eigen Condition Routines
-	./xeigtsts < sec.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 sed.out: sed.in xeigtsts
 	@echo SEV: Testing REAL Nonsymmetric Eigenvalue Driver
-	./xeigtsts < sed.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 sgg.out: sgg.in xeigtsts
 	@echo SGG: Testing REAL Nonsymmetric Generalized Eigenvalue Problem routines
-	./xeigtsts < sgg.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 sgd.out: sgd.in xeigtsts
 	@echo SGD: Testing REAL Nonsymmetric Generalized Eigenvalue Problem driver routines
-	./xeigtsts < sgd.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 ssb.out: ssb.in xeigtsts
 	@echo SSB: Testing REAL Symmetric Eigenvalue Problem routines
-	./xeigtsts < ssb.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 ssg.out: ssg.in xeigtsts
 	@echo SSG: Testing REAL Symmetric Generalized Eigenvalue Problem routines
-	./xeigtsts < ssg.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 sbal.out: sbal.in xeigtsts
 	@echo SGEBAL: Testing the balancing of a REAL general matrix
-	./xeigtsts < sbal.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 sbak.out: sbak.in xeigtsts
 	@echo SGEBAK: Testing the back transformation of a REAL balanced matrix
-	./xeigtsts < sbak.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 sgbal.out: sgbal.in xeigtsts
 	@echo SGGBAL: Testing the balancing of a pair of REAL general matrices
-	./xeigtsts < sgbal.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 sgbak.out: sgbak.in xeigtsts
 	@echo SGGBAK: Testing the back transformation of a pair of REAL balanced matrices
-	./xeigtsts < sgbak.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 sbb.out: sbb.in xeigtsts
 	@echo SBB:  Testing banded Singular Value Decomposition routines
-	./xeigtsts < sbb.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 sglm.out: glm.in xeigtsts
 	@echo GLM: Testing Generalized Linear Regression Model routines
-	./xeigtsts < glm.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 sgqr.out: gqr.in xeigtsts
 	@echo GQR: Testing Generalized QR and RQ factorization routines
-	./xeigtsts < gqr.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 sgsv.out: gsv.in xeigtsts
 	@echo GSV: Testing Generalized Singular Value Decomposition routines
-	./xeigtsts < gsv.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 
 slse.out: lse.in xeigtsts
 	@echo LSE: Testing Constrained Linear Least Squares routines
-	./xeigtsts < lse.in > $@ 2>&1
+	./xeigtsts < $< > $@ 2>&1
 #
 # ======== COMPLEX EIG TESTS ===========================
 
 cnep.out: nep.in xeigtstc
 	@echo NEP: Testing Nonsymmetric Eigenvalue Problem routines
-	./xeigtstc < nep.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 csep.out: sep.in xeigtstc
 	@echo SEP: Testing Symmetric Eigenvalue Problem routines
-	./xeigtstc < sep.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 csvd.out: svd.in xeigtstc
 	@echo SVD: Testing Singular Value Decomposition routines
-	./xeigtstc < svd.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 cec.out: cec.in xeigtstc
 	@echo CEC: Testing COMPLEX Eigen Condition Routines
-	./xeigtstc < cec.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 ced.out: ced.in xeigtstc
 	@echo CES: Testing COMPLEX Nonsymmetric Schur Form Driver
-	./xeigtstc < ced.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 cgg.out: cgg.in xeigtstc
 	@echo CGG: Testing COMPLEX Nonsymmetric Generalized Eigenvalue Problem routines
-	./xeigtstc < cgg.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 cgd.out: cgd.in xeigtstc
 	@echo CGD: Testing COMPLEX Nonsymmetric Generalized Eigenvalue Problem driver routines
-	./xeigtstc < cgd.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 csb.out: csb.in xeigtstc
 	@echo CHB: Testing Hermitian Eigenvalue Problem routines
-	./xeigtstc < csb.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 csg.out: csg.in xeigtstc
 	@echo CSG: Testing Symmetric Generalized Eigenvalue Problem routines
-	./xeigtstc < csg.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 cbal.out: cbal.in xeigtstc
 	@echo CGEBAL: Testing the balancing of a COMPLEX general matrix
-	./xeigtstc < cbal.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 cbak.out: cbak.in xeigtstc
 	@echo CGEBAK: Testing the back transformation of a COMPLEX balanced matrix
-	./xeigtstc < cbak.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 cgbal.out: cgbal.in xeigtstc
 	@echo CGGBAL: Testing the balancing of a pair of COMPLEX general matrices
-	./xeigtstc < cgbal.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 cgbak.out: cgbak.in xeigtstc
 	@echo CGGBAK: Testing the back transformation of a pair of COMPLEX balanced matrices
-	./xeigtstc < cgbak.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 cbb.out: cbb.in xeigtstc
 	@echo CBB:  Testing banded Singular Value Decomposition routines
-	./xeigtstc < cbb.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 cglm.out: glm.in xeigtstc
 	@echo GLM: Testing Generalized Linear Regression Model routines
-	./xeigtstc < glm.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 cgqr.out: gqr.in xeigtstc
 	@echo GQR: Testing Generalized QR and RQ factorization routines
-	./xeigtstc < gqr.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 cgsv.out: gsv.in xeigtstc
 	@echo GSV: Testing Generalized Singular Value Decomposition routines
-	./xeigtstc < gsv.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 
 clse.out: lse.in xeigtstc
 	@echo LSE: Testing Constrained Linear Least Squares routines
-	./xeigtstc < lse.in > $@ 2>&1
+	./xeigtstc < $< > $@ 2>&1
 #
 # ======== DOUBLE EIG TESTS ===========================
 
 dnep.out: nep.in xeigtstd
 	@echo NEP: Testing Nonsymmetric Eigenvalue Problem routines
-	./xeigtstd < nep.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dsep.out: sep.in xeigtstd
 	@echo SEP: Testing Symmetric Eigenvalue Problem routines
-	./xeigtstd < sep.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dsvd.out: svd.in xeigtstd
 	@echo SVD: Testing Singular Value Decomposition routines
-	./xeigtstd < svd.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dec.out: dec.in xeigtstd
 	@echo DEC: Testing DOUBLE PRECISION Eigen Condition Routines
-	./xeigtstd < dec.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 ded.out: ded.in xeigtstd
 	@echo DEV: Testing DOUBLE PRECISION Nonsymmetric Eigenvalue Driver
-	./xeigtstd < ded.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dgg.out: dgg.in xeigtstd
 	@echo DGG: Testing DOUBLE PRECISION Nonsymmetric Generalized Eigenvalue Problem routines
-	./xeigtstd < dgg.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dgd.out: dgd.in xeigtstd
 	@echo DGD: Testing DOUBLE PRECISION Nonsymmetric Generalized Eigenvalue Problem driver routines
-	./xeigtstd < dgd.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dsb.out: dsb.in xeigtstd
 	@echo DSB: Testing DOUBLE PRECISION Symmetric Eigenvalue Problem routines
-	./xeigtstd < dsb.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dsg.out: dsg.in xeigtstd
 	@echo DSG: Testing DOUBLE PRECISION Symmetric Generalized Eigenvalue Problem routines
-	./xeigtstd < dsg.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dbal.out: dbal.in xeigtstd
 	@echo DGEBAL: Testing the balancing of a DOUBLE PRECISION general matrix
-	./xeigtstd < dbal.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dbak.out: dbak.in xeigtstd
 	@echo DGEBAK:  Testing the back transformation of a DOUBLE PRECISION balanced matrix
-	./xeigtstd < dbak.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dgbal.out: dgbal.in xeigtstd
 	@echo DGGBAL: Testing the balancing of a pair of DOUBLE PRECISION general matrices
-	./xeigtstd < dgbal.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dgbak.out: dgbak.in xeigtstd
 	@echo DGGBAK: Testing the back transformation of a pair of DOUBLE PRECISION balanced matrices
-	./xeigtstd < dgbak.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dbb.out: dbb.in xeigtstd
 	@echo DBB:  Testing banded Singular Value Decomposition routines
-	./xeigtstd < dbb.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dglm.out: glm.in xeigtstd
 	@echo GLM: Testing Generalized Linear Regression Model routines
-	./xeigtstd < glm.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dgqr.out: gqr.in xeigtstd
 	@echo GQR: Testing Generalized QR and RQ factorization routines
-	./xeigtstd < gqr.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dgsv.out: gsv.in xeigtstd
 	@echo GSV: Testing Generalized Singular Value Decomposition routines
-	./xeigtstd < gsv.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 
 dlse.out: lse.in xeigtstd
 	@echo LSE: Testing Constrained Linear Least Squares routines
-	./xeigtstd < lse.in > $@ 2>&1
+	./xeigtstd < $< > $@ 2>&1
 #
 # ======== COMPLEX16 EIG TESTS ===========================
 
 znep.out: nep.in xeigtstz
 	@echo NEP: Testing Nonsymmetric Eigenvalue Problem routines
-	./xeigtstz < nep.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zsep.out: sep.in xeigtstz
 	@echo SEP: Testing Symmetric Eigenvalue Problem routines
-	./xeigtstz < sep.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zsvd.out: svd.in xeigtstz
 	@echo SVD: Testing Singular Value Decomposition routines
-	./xeigtstz < svd.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zec.out: zec.in xeigtstz
 	@echo ZEC: Testing COMPLEX16 Eigen Condition Routines
-	./xeigtstz < zec.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zed.out: zed.in xeigtstz
 	@echo ZES: Testing COMPLEX16 Nonsymmetric Schur Form Driver
-	./xeigtstz < zed.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zgg.out: zgg.in xeigtstz
 	@echo ZGG: Testing COMPLEX16 Nonsymmetric Generalized Eigenvalue Problem routines
-	./xeigtstz < zgg.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zgd.out: zgd.in xeigtstz
 	@echo ZGD: Testing COMPLEX16 Nonsymmetric Generalized Eigenvalue Problem driver routines
-	./xeigtstz < zgd.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zsb.out: zsb.in xeigtstz
 	@echo ZHB: Testing Hermitian Eigenvalue Problem routines
-	./xeigtstz < zsb.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zsg.out: zsg.in xeigtstz
 	@echo ZSG: Testing Symmetric Generalized Eigenvalue Problem routines
-	./xeigtstz < zsg.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zbal.out: zbal.in xeigtstz
 	@echo ZGEBAL: Testing the balancing of a COMPLEX16 general matrix
-	./xeigtstz < zbal.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zbak.out: zbak.in xeigtstz
 	@echo ZGEBAK: Testing the back transformation of a COMPLEX16 balanced matrix
-	./xeigtstz < zbak.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zgbal.out: zgbal.in xeigtstz
 	@echo ZGGBAL: Testing the balancing of a pair of COMPLEX general matrices
-	./xeigtstz < zgbal.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zgbak.out: zgbak.in xeigtstz
 	@echo ZGGBAK: Testing the back transformation of a pair of COMPLEX16 balanced matrices
-	./xeigtstz < zgbak.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zbb.out: zbb.in xeigtstz
 	@echo ZBB: Testing banded Singular Value Decomposition routines
-	./xeigtstz < zbb.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zglm.out: glm.in xeigtstz
 	@echo GLM: Testing Generalized Linear Regression Model routines
-	./xeigtstz < glm.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zgqr.out: gqr.in xeigtstz
 	@echo GQR: Testing Generalized QR and RQ factorization routines
-	./xeigtstz < gqr.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zgsv.out: gsv.in xeigtstz
 	@echo GSV: Testing Generalized Singular Value Decomposition routines
-	./xeigtstz < gsv.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 
 zlse.out: lse.in xeigtstz
 	@echo LSE: Testing Constrained Linear Least Squares routines
-	./xeigtstz < lse.in > $@ 2>&1
+	./xeigtstz < $< > $@ 2>&1
 # ==============================================================================
 
 xlintsts:	../$(LAPACKLIB) ../$(TMGLIB) $(FRCLIN) $(FRC)
diff --git a/make.inc b/make.inc
new file mode 100644
--- /dev/null
+++ b/make.inc
@@ -0,0 +1,74 @@
+# -*- Makefile -*-
+####################################################################
+#  LAPACK make include file.                                       #
+#  LAPACK, Version 3.2.2                                           #
+#  June 2010                                                       #
+####################################################################
+#
+# See the INSTALL/ directory for more examples.
+#
+SHELL = /bin/sh
+#
+#  The machine (platform) identifier to append to the library names
+#
+PLAT = 
+#  
+#  Modify the FORTRAN and OPTS definitions to refer to the
+#  compiler and desired compiler options for your machine.  NOOPT
+#  refers to the compiler options desired when NO OPTIMIZATION is
+#  selected.  Define LOADER and LOADOPTS to refer to the loader
+#  and desired load options for your machine.
+#
+FORTRAN  = $(CROSS)gfortran -fimplicit-none -g
+OPTS     = $(FFLAGS)
+DRVOPTS  = $(OPTS)
+NOOPT    =
+LOADER   = $(CROSS)gfortran -g
+LOADOPTS = $(LDFLAGS) $(FLDFLAGS)
+#
+# Timer for the SECOND and DSECND routines
+#
+# Default : SECOND and DSECND will use a call to the EXTERNAL FUNCTION ETIME
+# TIMER    = EXT_ETIME
+# For RS6K : SECOND and DSECND will use a call to the EXTERNAL FUNCTION ETIME_
+# TIMER    = EXT_ETIME_
+# For gfortran compiler: SECOND and DSECND will use a call to the INTERNAL FUNCTION ETIME
+TIMER    = INT_ETIME
+# If your Fortran compiler does not provide etime (like Nag Fortran Compiler, etc...)
+# SECOND and DSECND will use a call to the Fortran standard INTERNAL FUNCTION CPU_TIME 
+#TIMER    = INT_CPU_TIME
+# If neither of this works...you can use the NONE value... In that case, SECOND and DSECND will always return 0
+# TIMER     = NONE
+#
+#  The archiver and the flag(s) to use when building archive (library)
+#  If you system has no ranlib, set RANLIB = echo.
+#
+AR       = $(CROSS)ar
+ARFLAGS  = cr
+RANLIB   = $(CROSS)ranlib
+#
+#  The location of BLAS library for linking the testing programs.
+#  The target's machine-specific, optimized BLAS library should be
+#  used whenever possible.
+#
+BLASLIB      = -lblas
+#
+#  Location of the extended-precision BLAS (XBLAS) Fortran library
+#  used for building and testing extended-precision routines.  The
+#  relevant routines will be compiled and XBLAS will be linked only if
+#  USEXBLAS is defined.
+#
+# USEXBLAS    = Yes
+XBLASLIB     =
+# XBLASLIB    = -lxblas
+#
+#  Names of generated libraries.
+#
+LAPACKLIB    = liblapack$(PLAT).a
+TMGLIB       = libtmglib$(PLAT).a
+EIGSRCLIB    = libeigsrc$(PLAT).a
+LINSRCLIB    = liblinsrc$(PLAT).a
+
+SRCTOP = $(SRCDIR)
+
+LIB_DEFFILE = $(patsubst %.a,%.def, $(LAPACKLIB))
