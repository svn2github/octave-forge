md5="90ef11ebcf1efdf954fbbe9f607ea593";rev="1.1";by="Jorge Barros de Abreu <ficmatin01 at skipthis solar dot com dot br>"
-*- texinfo -*-
@deftypefn {Fun@value{cedilha}@~ao Carreg@'avel} {[@var{x}, @var{xdot}, @var{istate}, @var{msg}] =} daspk (@var{fcn}, @var{x_0}, @var{xdot_0}, @var{t}, @var{t_crit})
Resolve o conjunto de equa@,{c}@~oes diferenciais alg@'ebricas
@tex
$$ 0 = f (x, \dot{x}, t) $$
com
$$ x(t_0) = x_0, \dot{x}(t_0) = \dot{x}_0 $$
@end tex
@ifinfo

@example
0 = f (x, xdot, t)
@end example

com

@example
x(t_0) = x_0, xdot(t_0) = xdot_0
@end example

@end ifinfo
A solu@value{cedilha}@~ao @'e retornada nas matrizes @var{x} e @var{xdot},
com cada linha nas matrizes resultado correspondendo a um dos
elementos no vetor @var{t}.  O primeiro elemento de @var{t}
pode ser @math{t_0} e corresponde ao estado inicial do
sistema @var{x_0} e sua derivada @var{xdot_0}, de modo que a primeira
linha de sa@'ida @var{x} @'e @var{x_0} e a primeira linha
de sa@'ida @var{xdot} @'e @var{xdot_0}.

O primeiro argumento, @var{fcn}, @'e uma @'e uma seq@"u@^encia de caracteres ou um array de c@'elulas de dois elementos
de seq@"u@^encia de caracteres, expl@'icita ou manipulador de fun@,{c}@~ao, que nomeia a fun@,{c}@~ao, para chamar
para calcular o vetor de residuais para o conjunto de equa@,{c}@~oes.  Deve
ter a forma

@example
@var{res} = f (@var{x}, @var{xdot}, @var{t})
@end example

@noindent
no qual @var{x}, @var{xdot}, e @var{res} s@~ao vetores, e@var{t} @'e um
escalar.

Se @var{fcn} @'e um array de seq@"u@^encia de caracteres de dois elementos, o primeiro elemento nomeia
uma fun@value{cedilha}@~ao @math{f} descrita acima, e o segundo elemento nomeia
uma fun@value{cedilha}@~ao para calcular o jacobiano modificado
@tex
$$
J = {\partial f \over \partial x}
  + c {\partial f \over \partial \dot{x}}
$$
@end tex
@ifinfo

@example
      df       df
jac = -- + c ------
      dx     d xdot
@end example
@end ifinfo

The fun@value{cedilha}@~ao Jacobiana modificada deve ter a forma

@example

@var{jac} = j (@var{x}, @var{xdot}, @var{t}, @var{c})

@end example

O segundo e o terceiro argumentos para @code{daspk} especificam a condi@,{c}@~ao
inicial dos estados e suas derivadas, e o quarto argumento
especifica um vetor de tempos de sa@'ida no qual a solu@value{cedilha}@~ao @'e esperada,
inclu@'indo o tempo correspondente @`a condi@,{c}@~ao inicial.

O conjunto de estados iniciais e derivadas n@~ao s@~ao estritamente requeridos para
ser consistente.  Se eles n@~ao forem consistentes, voc@^e deve usar a
 fun@value{cedilha}@~ao @code{daspk_options} para fornecer informa@value{cedilha}@~ao adicional de forma
que @code{daspk} possa calcular um ponto inicial consistente.

O quinto argumento @'e opcional, e pode ser usado para especificar um conjunto de
tempos limites para o resolvedor DAE.  Isso @'e @'util para
evitar dificuldades com singularidades e com pontos onde existe uma
discontinuidade na derivada.

Ap@'os um c@'alculo com sucesso, o valor de @var{istate} ser@'a
maior que zero (consistente com a vers@~ao Fortran de @sc{Daspk}).

Se o c@'alculo falhar, o valor de @var{istate} ser@'a
menor que zero e @var{msg} conter@'a informa@value{cedilha}@~ao adicional.

Voc@^e pode usar a fun@value{cedilha}@~ao @code{daspk_options} para escolher
par@^ametros opcionais para @code{daspk}.
@seealso{dassl}
@end deftypefn
